{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/landscape-plus/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape-plus/source/img/scrollup.png","path":"img/scrollup.png","modified":1},{"_id":"themes/landscape-plus/source/img/reflection_8-wallpaper-1440x900.png","path":"img/reflection_8-wallpaper-1440x900.png","modified":1},{"_id":"themes/landscape-plus/source/img/authorLogo.png","path":"img/authorLogo.png","modified":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape-plus/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape-plus/source/css/images/bannera.jpg","path":"css/images/bannera.jpg","modified":1},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape-plus/source/css/bdshare.styl","path":"css/bdshare.styl","modified":1},{"_id":"source/CodeSource/AsyncSocket/AsyncSocket.zip","path":"CodeSource/AsyncSocket/AsyncSocket.zip","modified":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1},{"_id":"source/MyImage/Swift/Object-C与Swift混编5.png","path":"MyImage/Swift/Object-C与Swift混编5.png","modified":1},{"_id":"source/MyImage/Swift/Object-C与Swift混编4.png","path":"MyImage/Swift/Object-C与Swift混编4.png","modified":1},{"_id":"source/MyImage/Swift/Object-C与Swift混编3.png","path":"MyImage/Swift/Object-C与Swift混编3.png","modified":1},{"_id":"source/MyImage/Swift/Object-C与Swift混编2.png","path":"MyImage/Swift/Object-C与Swift混编2.png","modified":1},{"_id":"source/MyImage/Swift/Object-C与Swift混编1.png","path":"MyImage/Swift/Object-C与Swift混编1.png","modified":1},{"_id":"source/MyImage/Swift/Object-C与Swift混编.png","path":"MyImage/Swift/Object-C与Swift混编.png","modified":1},{"_id":"source/MyImage/StoryBoard/StoryBoard.png","path":"MyImage/StoryBoard/StoryBoard.png","modified":1},{"_id":"source/MyImage/ReactNative/ReactNativeProjectBase.png","path":"MyImage/ReactNative/ReactNativeProjectBase.png","modified":1},{"_id":"source/MyImage/IOS开发经验总结/框架类组织架构图.jpg","path":"MyImage/IOS开发经验总结/框架类组织架构图.jpg","modified":1},{"_id":"source/MyImage/IOS开发经验总结/iOS学习路线.png","path":"MyImage/IOS开发经验总结/iOS学习路线.png","modified":1},{"_id":"source/MyImage/Git/git.jpg","path":"MyImage/Git/git.jpg","modified":1},{"_id":"source/MyImage/AsyncSocket/AsyncSocket.jpg","path":"MyImage/AsyncSocket/AsyncSocket.jpg","modified":1},{"_id":"source/MP3s/339744.mp3","path":"MP3s/339744.mp3","modified":1},{"_id":"source/MP3s/309769.mp3","path":"MP3s/309769.mp3","modified":1},{"_id":"source/MP3s/255319.mp3","path":"MP3s/255319.mp3","modified":1},{"_id":"source/MP3s/235319.mp3","path":"MP3s/235319.mp3","modified":1},{"_id":"source/MP3s/14945107.mp3","path":"MP3s/14945107.mp3","modified":1},{"_id":"source/MP3s/12309111.mp3","path":"MP3s/12309111.mp3","modified":1},{"_id":"source/MP3s/120125029.mp3","path":"MP3s/120125029.mp3","modified":1},{"_id":"source/MP3s/10736444.mp3","path":"MP3s/10736444.mp3","modified":1},{"_id":"source/MP3s/10405520.mp3","path":"MP3s/10405520.mp3","modified":1},{"_id":"source/CodeSource/testiOS8.zip","path":"CodeSource/testiOS8.zip","modified":1},{"_id":"source/CodeSource/ssh.zip","path":"CodeSource/ssh.zip","modified":1},{"_id":"source/CodeSource/StoryBoard/StoryBoardUtilities.zip","path":"CodeSource/StoryBoard/StoryBoardUtilities.zip","modified":1},{"_id":"source/CodeSource/StoryBoard/StoryBoardUtilities.m","path":"CodeSource/StoryBoard/StoryBoardUtilities.m","modified":1},{"_id":"source/CodeSource/StoryBoard/StoryBoardUtilities.h","path":"CodeSource/StoryBoard/StoryBoardUtilities.h","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewControllerTests/NSTableViewControllerTests.swift","path":"CodeSource/NSTableViewController/NSTableViewControllerTests/NSTableViewControllerTests.swift","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewControllerTests/Info.plist","path":"CodeSource/NSTableViewController/NSTableViewControllerTests/Info.plist","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/NSTableViewController.xcscheme","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/NSTableViewController.xcscheme","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/xcshareddata/NSTableViewController.xccheckout","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/xcshareddata/NSTableViewController.xccheckout","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.pbxproj","path":"CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/ViewController.swift","path":"CodeSource/NSTableViewController/NSTableViewController/ViewController.swift","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/NSUITableViewController.swift","path":"CodeSource/NSTableViewController/NSTableViewController/NSUITableViewController.swift","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Info.plist","path":"CodeSource/NSTableViewController/NSTableViewController/Info.plist","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Base.lproj/Main.storyboard","path":"CodeSource/NSTableViewController/NSTableViewController/Base.lproj/Main.storyboard","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Base.lproj/LaunchScreen.xib","path":"CodeSource/NSTableViewController/NSTableViewController/Base.lproj/LaunchScreen.xib","modified":1},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/AppDelegate.swift","path":"CodeSource/NSTableViewController/NSTableViewController/AppDelegate.swift","modified":1},{"_id":"source/CodeSource/NSPath/NSPathTool.m","path":"CodeSource/NSPath/NSPathTool.m","modified":1},{"_id":"source/CodeSource/NSPath/NSPathTool.h","path":"CodeSource/NSPath/NSPathTool.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSObject+NSKeyValueObject.m","path":"CodeSource/NSExtension/NSObject+NSKeyValueObject.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSObject+NSKeyValueObject.h","path":"CodeSource/NSExtension/NSObject+NSKeyValueObject.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/NSExtension.xcscheme","path":"CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/NSExtension.xcscheme","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/project.xcworkspace/xcuserdata/DexSinis.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/NSExtension/NSExtension.xcodeproj/project.xcworkspace/xcuserdata/DexSinis.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/NSExtension/NSExtension.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/project.pbxproj","path":"CodeSource/NSExtension/NSExtension.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/main.m","path":"CodeSource/NSExtension/NSExtension/main.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/User.m","path":"CodeSource/NSExtension/NSExtension/User.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/User.h","path":"CodeSource/NSExtension/NSExtension/User.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSPropertyType.m","path":"CodeSource/NSExtension/NSExtension/NSPropertyType.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSPropertyType.h","path":"CodeSource/NSExtension/NSExtension/NSPropertyType.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSProperty.m","path":"CodeSource/NSExtension/NSExtension/NSProperty.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSProperty.h","path":"CodeSource/NSExtension/NSExtension/NSProperty.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+Property.m","path":"CodeSource/NSExtension/NSExtension/NSObject+Property.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+Property.h","path":"CodeSource/NSExtension/NSExtension/NSObject+Property.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+NSKeyValueObject.m","path":"CodeSource/NSExtension/NSExtension/NSObject+NSKeyValueObject.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+NSKeyValueObject.h","path":"CodeSource/NSExtension/NSExtension/NSObject+NSKeyValueObject.h","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSConst.m","path":"CodeSource/NSExtension/NSExtension/NSConst.m","modified":1},{"_id":"source/CodeSource/NSExtension/NSExtension/NSConst.h","path":"CodeSource/NSExtension/NSExtension/NSConst.h","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/MasonryTests/MasonryTests.m","path":"CodeSource/GitHub/Masonry/Masonry/MasonryTests/MasonryTests.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/MasonryTests/Info.plist","path":"CodeSource/GitHub/Masonry/Masonry/MasonryTests/Info.plist","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/Masonry.xcscheme","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/Masonry.xcscheme","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/xcshareddata/Masonry.xccheckout","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/xcshareddata/Masonry.xccheckout","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.pbxproj","path":"CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/main.m","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/main.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/ViewController.m","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/ViewController.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/ViewController.h","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/ViewController.h","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Info.plist","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/Info.plist","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoTwoViewController.m","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/DemoTwoViewController.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoTwoViewController.h","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/DemoTwoViewController.h","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoThreeViewController.m","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/DemoThreeViewController.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoThreeViewController.h","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/DemoThreeViewController.h","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoOneViewController.m","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/DemoOneViewController.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoOneViewController.h","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/DemoOneViewController.h","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Base.lproj/Main.storyboard","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/Base.lproj/Main.storyboard","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Base.lproj/LaunchScreen.xib","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/Base.lproj/LaunchScreen.xib","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/AppDelegate.m","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/AppDelegate.m","modified":1},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/AppDelegate.h","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/AppDelegate.h","modified":1},{"_id":"source/CodeSource/FoodPin.zip","path":"CodeSource/FoodPin.zip","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPinTests/Info.plist","path":"CodeSource/FoodPin/FoodPinTests/Info.plist","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPinTests/FoodPinTests.swift","path":"CodeSource/FoodPin/FoodPinTests/FoodPinTests.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/FoodPin.xcscheme","path":"CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/FoodPin.xcscheme","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/xcshareddata/FoodPin.xccheckout","path":"CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/xcshareddata/FoodPin.xccheckout","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.pbxproj","path":"CodeSource/FoodPin/FoodPin.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/ViewController.swift","path":"CodeSource/FoodPin/FoodPin/ViewController.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Swift-Masonry-Bridging-Header.h","path":"CodeSource/FoodPin/FoodPin/Swift-Masonry-Bridging-Header.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/RestaurantTableViewController.swift","path":"CodeSource/FoodPin/FoodPin/RestaurantTableViewController.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/RestaurantController.swift","path":"CodeSource/FoodPin/FoodPin/RestaurantController.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Restaurant.swift","path":"CodeSource/FoodPin/FoodPin/Restaurant.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/LICENSE","path":"CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/LICENSE","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/Classes/UITableView+FDTemplateLayoutCell.m","path":"CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/Classes/UITableView+FDTemplateLayoutCell.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/Classes/UITableView+FDTemplateLayoutCell.h","path":"CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/Classes/UITableView+FDTemplateLayoutCell.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/ViewController+MASAdditions.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/ViewController+MASAdditions.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/ViewController+MASAdditions.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/ViewController+MASAdditions.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASShorthandAdditions.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASShorthandAdditions.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASAdditions.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASAdditions.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASAdditions.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASAdditions.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSLayoutConstraint+MASDebugAdditions.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/NSLayoutConstraint+MASDebugAdditions.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSLayoutConstraint+MASDebugAdditions.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/NSLayoutConstraint+MASDebugAdditions.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASShorthandAdditions.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASShorthandAdditions.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASAdditions.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASAdditions.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASAdditions.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASAdditions.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Masonry.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Masonry.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewConstraint.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewConstraint.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewConstraint.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewConstraint.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewAttribute.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewAttribute.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewAttribute.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewAttribute.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASUtilities.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASUtilities.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASLayoutConstraint.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASLayoutConstraint.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASLayoutConstraint.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASLayoutConstraint.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraintMaker.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraintMaker.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraintMaker.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraintMaker.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint+Private.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint+Private.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASCompositeConstraint.m","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASCompositeConstraint.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASCompositeConstraint.h","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/MASCompositeConstraint.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Info.plist","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Info.plist","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleUsingConstantsView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleUsingConstantsView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleUpdateConstraintsView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleUpdateConstraintsView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleRemakeConstraintsView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleRemakeConstraintsView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleCompositeEdgesView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleCompositeEdgesView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleBasicView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleBasicView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleBasicAnimationView.swift","path":"CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleBasicAnimationView.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Info.plist","path":"CodeSource/FoodPin/FoodPin/Info.plist","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/wafflewolf@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/wafflewolf@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/wafflewolf.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/wafflewolf.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/upstate@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/upstate@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/upstate.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/upstate.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/traif@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/traif@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/traif.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/traif.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/thaicafe@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/thaicafe@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/thaicafe.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/thaicafe.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/teakha@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/teakha@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/teakha.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/teakha.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/royaloak@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/royaloak@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/royaloak.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/royaloak.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/posatelier@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/posatelier@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/posatelier.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/posatelier.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/petiteoyster@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/petiteoyster@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/petiteoyster.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/petiteoyster.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/palominoespresso@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/palominoespresso@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/palominoespresso.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/palominoespresso.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/homei@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/homei@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/homei.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/homei.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/haighschocolate@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/haighschocolate@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/haighschocolate.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/haighschocolate.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/grahamavenuemeats@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/grahamavenuemeats@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/grahamavenuemeats.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/grahamavenuemeats.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/forkeerestaurant@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/forkeerestaurant@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/forkeerestaurant.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/forkeerestaurant.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/fiveleaves@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/fiveleaves@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/fiveleaves.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/fiveleaves.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/donostia@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/donostia@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/donostia.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/donostia.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/confessional@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/confessional@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/confessional.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/confessional.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/cafelore@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/cafelore@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/cafelore.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/cafelore.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/cafeloisl@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/cafeloisl@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/cafeloisl.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/cafeloisl.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/cafedeadend@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/cafedeadend@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/cafedeadend.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/cafedeadend.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/bourkestreetbakery@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/bourkestreetbakery@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/bourkestreetbakery.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/bourkestreetbakery.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/barrafina@2x.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/barrafina@2x.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/barrafina.jpg","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/barrafina.jpg","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/HWTestHeightCell.m","path":"CodeSource/FoodPin/FoodPin/HWTestHeightCell.m","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/HWTestHeightCell.h","path":"CodeSource/FoodPin/FoodPin/HWTestHeightCell.h","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/DidSet_WillSet.swift","path":"CodeSource/FoodPin/FoodPin/DidSet_WillSet.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/CustomTableViewCell.swift","path":"CodeSource/FoodPin/FoodPin/CustomTableViewCell.swift","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Base.lproj/Main.storyboard","path":"CodeSource/FoodPin/FoodPin/Base.lproj/Main.storyboard","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/Base.lproj/LaunchScreen.xib","path":"CodeSource/FoodPin/FoodPin/Base.lproj/LaunchScreen.xib","modified":1},{"_id":"source/CodeSource/FoodPin/FoodPin/AppDelegate.swift","path":"CodeSource/FoodPin/FoodPin/AppDelegate.swift","modified":1},{"_id":"source/CodeSource/FoodPin/DayCode/2015.09.10.zip","path":"CodeSource/FoodPin/DayCode/2015.09.10.zip","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTaskTests/en.lproj/InfoPlist.strings","path":"CodeSource/DownloadTask/DownloadTaskTests/en.lproj/InfoPlist.strings","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTaskTests/DownloadTaskTests.m","path":"CodeSource/DownloadTask/DownloadTaskTests/DownloadTaskTests.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTaskTests/DownloadTaskTests-Info.plist","path":"CodeSource/DownloadTask/DownloadTaskTests/DownloadTaskTests-Info.plist","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcschemes/DownloadTask.xcscheme","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcschemes/DownloadTask.xcscheme","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/DownloadTask.xcscheme","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/DownloadTask.xcscheme","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/xcuserdata/apple.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/xcuserdata/apple.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/xcuserdata/DexSinis.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/xcuserdata/DexSinis.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.pbxproj","path":"CodeSource/DownloadTask/DownloadTask.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/main.m","path":"CodeSource/DownloadTask/DownloadTask/main.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/en.lproj/InfoPlist.strings","path":"CodeSource/DownloadTask/DownloadTask/en.lproj/InfoPlist.strings","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/ViewController.m","path":"CodeSource/DownloadTask/DownloadTask/ViewController.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/ViewController.h","path":"CodeSource/DownloadTask/DownloadTask/ViewController.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/NSDataRequestManager.m","path":"CodeSource/DownloadTask/DownloadTask/NSDataRequestManager.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/NSDataRequestManager.h","path":"CodeSource/DownloadTask/DownloadTask/NSDataRequestManager.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/DownloadTask-Prefix.pch","path":"CodeSource/DownloadTask/DownloadTask/DownloadTask-Prefix.pch","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/DownloadTask-Info.plist","path":"CodeSource/DownloadTask/DownloadTask/DownloadTask-Info.plist","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/Base.lproj/Main.storyboard","path":"CodeSource/DownloadTask/DownloadTask/Base.lproj/Main.storyboard","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AppDelegate.m","path":"CodeSource/DownloadTask/DownloadTask/AppDelegate.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AppDelegate.h","path":"CodeSource/DownloadTask/DownloadTask/AppDelegate.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLSessionManager.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLSessionManager.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLSessionManager.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLSessionManager.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLResponseSerialization.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLResponseSerialization.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLResponseSerialization.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLResponseSerialization.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLRequestSerialization.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLRequestSerialization.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLRequestSerialization.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLRequestSerialization.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLConnectionOperation.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLConnectionOperation.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLConnectionOperation.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLConnectionOperation.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFSecurityPolicy.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFSecurityPolicy.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFSecurityPolicy.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFSecurityPolicy.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworking.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworking.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworkReachabilityManager.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworkReachabilityManager.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworkReachabilityManager.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworkReachabilityManager.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPSessionManager.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPSessionManager.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPSessionManager.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPSessionManager.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperationManager.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperationManager.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperationManager.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperationManager.h","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperation.m","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperation.m","modified":1},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperation.h","path":"CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperation.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/socket_tutorialTests.m","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/socket_tutorialTests.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/socket_tutorialTests-Info.plist","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/socket_tutorialTests-Info.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/en.lproj/InfoPlist.strings","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/en.lproj/InfoPlist.strings","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcschemes/socket_tutorial.xcscheme","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcschemes/socket_tutorial.xcscheme","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/socket_tutorial.xcscheme","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/socket_tutorial.xcscheme","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/xcuserdata/xiaoliangwang.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/xcuserdata/xiaoliangwang.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.pbxproj","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/socket_tutorial-Prefix.pch","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/socket_tutorial-Prefix.pch","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/socket_tutorial-Info.plist","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/socket_tutorial-Info.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/main.m","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/main.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/en.lproj/InfoPlist.strings","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/en.lproj/InfoPlist.strings","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/classes/Singleton.m","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/classes/Singleton.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/classes/Singleton.h","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/classes/Singleton.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/ViewController.m","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/ViewController.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/ViewController.h","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/ViewController.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Base.lproj/Main.storyboard","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Base.lproj/Main.storyboard","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/AppDelegate.m","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/AppDelegate.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/AppDelegate.h","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/AppDelegate.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncUdpSocket.m","path":"CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncUdpSocket.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncUdpSocket.h","path":"CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncUdpSocket.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncSocket.m","path":"CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncSocket.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncSocket.h","path":"CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncSocket.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClientTests/SocketClientTests.m","path":"CodeSource/AsyncSocket/SocketClient/SocketClientTests/SocketClientTests.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClientTests/Info.plist","path":"CodeSource/AsyncSocket/SocketClient/SocketClientTests/Info.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/SocketClient.xcscheme","path":"CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/SocketClient.xcscheme","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/xcshareddata/SocketClient.xccheckout","path":"CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/xcshareddata/SocketClient.xccheckout","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.pbxproj","path":"CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/main.m","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/main.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/ViewController.m","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/ViewController.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/ViewController.h","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/ViewController.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Info.plist","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/Info.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Base.lproj/Main.storyboard","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/Base.lproj/Main.storyboard","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Base.lproj/LaunchScreen.xib","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/Base.lproj/LaunchScreen.xib","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AsyncSocket.m","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/AsyncSocket.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AsyncSocket.h","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/AsyncSocket.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AppDelegate.m","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/AppDelegate.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AppDelegate.h","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/AppDelegate.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/main.m","path":"CodeSource/AsyncSocket/EchoServer/main.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/Instructions.txt","path":"CodeSource/AsyncSocket/EchoServer/Instructions.txt","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/Info.plist","path":"CodeSource/AsyncSocket/EchoServer/Info.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/English.lproj/MainMenu.nib/keyedobjects.nib","path":"CodeSource/AsyncSocket/EchoServer/English.lproj/MainMenu.nib/keyedobjects.nib","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/English.lproj/MainMenu.nib/designable.nib","path":"CodeSource/AsyncSocket/EchoServer/English.lproj/MainMenu.nib/designable.nib","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/English.lproj/InfoPlist.strings","path":"CodeSource/AsyncSocket/EchoServer/English.lproj/InfoPlist.strings","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer_Prefix.pch","path":"CodeSource/AsyncSocket/EchoServer/EchoServer_Prefix.pch","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/EchoServer.xcscheme","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/EchoServer.xcscheme","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/xcshareddata/EchoServer.xccheckout","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/xcshareddata/EchoServer.xccheckout","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.pbxproj","path":"CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.pbxproj","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AsyncSocket.m","path":"CodeSource/AsyncSocket/EchoServer/AsyncSocket.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AsyncSocket.h","path":"CodeSource/AsyncSocket/EchoServer/AsyncSocket.h","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AppController.m","path":"CodeSource/AsyncSocket/EchoServer/AppController.m","modified":1},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AppController.h","path":"CodeSource/AsyncSocket/EchoServer/AppController.h","modified":1}],"Cache":[{"_id":"themes/landscape-plus/source/css/bdshare.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441693115000},{"_id":"themes/landscape-plus/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1441693115000},{"_id":"themes/landscape-plus/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1441693115000},{"_id":"themes/landscape-plus/README.md","shasum":"8b97168e671e77ad7857c1dfad45b5a24fe6c6ee","modified":1441693115000},{"_id":"themes/landscape-plus/_config.yml","shasum":"67e55c853b32730f08f46752765f0a6bf4885417","modified":1441770312000},{"_id":"themes/landscape-plus/languages/default.yml","shasum":"0270b76db4c94f8905d4c0dc2303da5d5e756a19","modified":1441693115000},{"_id":"themes/landscape-plus/languages/zh-CN.yml","shasum":"bab536eff019db1c8615a83e24e142105f397398","modified":1441693115000},{"_id":"themes/landscape-plus/languages/zh-TW.yml","shasum":"1187826de31c687542e882835fc8062c2bc7a551","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","shasum":"8b8265dfae8b0f804d231ce86f45cff055bc997a","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","shasum":"51224604e7584e83e80023e1b9cf09971aecaad2","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","shasum":"78823298e9e47d8e6556fc2bb4598fc2814f2d52","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","shasum":"78d29e0a625e21ebc05d7ec28029c2246001cf71","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","shasum":"c241624258bf91fb1da14987a8f984cc433dcb51","modified":1444355704000},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","shasum":"465b39f02583d1de31ac3121a9ac198fc9f5d2f8","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","shasum":"3fe4db436767c803206c0917cf5b6a75b47dd37d","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/head.ejs.zip","shasum":"6cc0a63dcccb24765b720b9b2fede2ef497e5f9a","modified":1444355355000},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","shasum":"16a904de7bceccbb36b4267565f2215704db2880","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","shasum":"aa3a3eadf31d9b3e4d3081cd3ca61860e55ef553","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","shasum":"ae96217d072f637925c907f5f467450083863f50","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","shasum":"bbb86beab343e08e689a372ddb60bfa782e93bc4","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","shasum":"ff4eb9afa0b9e5b31c55c6775880452222c57f53","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","shasum":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","shasum":"b461390feb5ef82df7aef9677a31d5137c352f61","modified":1441693115000},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","shasum":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1441693115000},{"_id":"themes/landscape-plus/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1441693115000},{"_id":"themes/landscape-plus/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1441693115000},{"_id":"themes/landscape-plus/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1441693115000},{"_id":"themes/landscape-plus/layout/layout.ejs","shasum":"3626a74826657529bea744fb014dd9607e9834d0","modified":1441693115000},{"_id":"themes/landscape-plus/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1441693115000},{"_id":"themes/landscape-plus/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1441693115000},{"_id":"themes/landscape-plus/package.json","shasum":"5deaa023c44f9f59f3df6e2a033a5fc2586797e6","modified":1441693115000},{"_id":"themes/landscape-plus/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1441693115000},{"_id":"themes/landscape-plus/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","shasum":"19b5af4e0969d93fb757577bd6ff380ef2224eb9","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_extend.styl","shasum":"3f8a9e4e63b7249408ac54559a5f9633d703e132","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","shasum":"1bd06c119e4b64b85dbc37ba22f5210edf10e0b4","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","shasum":"a3c2f696d9477223bd45b49e5f996d7998ae52e5","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","shasum":"7b84632d01242eecb6a6d08c29b36a1c84f75f7d","modified":1441696427000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","shasum":"c9ea5b3956b73418dc8b1572e32eb65dc68ca0e5","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","shasum":"817f36dd591d6beef9d41011ae8490d31d5e2e50","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","shasum":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/_variables.styl","shasum":"f4dcd0ba9bc1a99d92c9b3ecc8ef583256401e79","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/style.styl","shasum":"30fdb982f5324d0023f38c28e83238b9518f2756","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1441693115000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1441693115000},{"_id":"themes/landscape-plus/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1441693115000},{"_id":"themes/landscape-plus/source/js/script.js","shasum":"89f3a9ba53e1481a0609cbb62e9530ca339b052d","modified":1441693115000},{"_id":"themes/landscape-plus/source/img/authorLogo.png","shasum":"e572b42cdd8fc8ae218d20b36b6a55daf2bb57e4","modified":1435713324000},{"_id":"themes/landscape-plus/source/css/images/bannera.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1441693115000},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","shasum":"4c8dd8233630b0ed12a5cbc62db5abce3710561c","modified":1441662332000},{"_id":"themes/landscape-plus/source/img/reflection_8-wallpaper-1440x900.png","shasum":"4c8dd8233630b0ed12a5cbc62db5abce3710561c","modified":1441662332000},{"_id":"source/CodeSource/FoodPin/READNE.md","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441966313000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AppController.h","shasum":"641f6d7d13c8cc24f9104022d8ced5971a264b04","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AppController.m","shasum":"1a2bcef4d8b2a2287a47dec4bdff454b5dcabe4b","modified":1441009070000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AsyncSocket.h","shasum":"1b24ad0a686ec4058b82103e7c72f03e249b54d2","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.pbxproj","shasum":"34207cf3fc20fc42f83ef59edafb1902d8e41c63","modified":1440990732000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"9bfe5b51effd8f7c6942756d7080a488a8f0b74a","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/xcshareddata/EchoServer.xccheckout","shasum":"80201116b1880c71ecd866a55df83997eaf26f9e","modified":1441006248000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"0bb97e7b8a17d7b1854146fab054d808164cffca","modified":1441008990000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/EchoServer.xcscheme","shasum":"2412dd7117c7a37c89e32fd4ab437693ae0e6ecd","modified":1440990575000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"f15a4bcee0f83b3554de0d22f8590efc73c94387","modified":1440990574000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"190a97ed203cdfacea4269266756fb51a7af5027","modified":1441012378000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/EchoServer_Prefix.pch","shasum":"76bb75566aeceadac88e9653cf918f20a4a838ce","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/English.lproj/InfoPlist.strings","shasum":"7bde0cc8e052215b1aebe679fc0efe3f4f5387da","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/English.lproj/MainMenu.nib/keyedobjects.nib","shasum":"ac80358e84b9a16e391c1e2bde0e7e3fdb99e3f6","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/Info.plist","shasum":"45b338dd798f8a7343a2db908cab1160d911b623","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/Instructions.txt","shasum":"d127a438c8ed323fcb4d26276876902681580e30","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/main.m","shasum":"c4789aace61a20caf77fdf0a4ca8a1c9ed3a5642","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AppDelegate.h","shasum":"716f3cf7bbce1eccae8b98bc9be339d236f10468","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AppDelegate.m","shasum":"f1a85038f0d39dab079801315f4632cd9ebf043f","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AsyncSocket.h","shasum":"1b24ad0a686ec4058b82103e7c72f03e249b54d2","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Base.lproj/LaunchScreen.xib","shasum":"7ef28ece75b95f7818591787b08251c46bd99b5f","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Base.lproj/Main.storyboard","shasum":"e770bbe7fa203f633e160f850e22081b3c02ad18","modified":1441008963000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Images.xcassets/AppIcon.appiconset/Contents.json","shasum":"e78d8bd65a4d2bcdb1ce28ef6f49ecf73c96b576","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/Info.plist","shasum":"1634576a4f7e415f98f644188d9009240ea70e03","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/ViewController.m","shasum":"b89257900e5eb935fbc6a7bc4896867c410dfb2a","modified":1441008799000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/ViewController.h","shasum":"85c87df45db5e319174316298ade59e0fd004797","modified":1441008639000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/main.m","shasum":"52d7f8905f39007c3fbbf64db2b800b584508721","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.pbxproj","shasum":"6b4cd3c858a94d7d2fd5c065bad9985ba1dc0658","modified":1441007898000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"8b5532ed632dd47663c30aba01cbe0dbe41ac896","modified":1441007341000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/xcshareddata/SocketClient.xccheckout","shasum":"aa21b0d8200c89abadd84e022c3be5483a07b0ad","modified":1441007386000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"e8c0350450268e7b81a57744c97c3f4bef387e65","modified":1441012382000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/SocketClient.xcscheme","shasum":"a1345e88b76f6b0803dcf4395ecf8d1cfcdd02c3","modified":1441007342000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"65127f318e4d8151e19bd84b879b77b779492d44","modified":1441007342000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClientTests/Info.plist","shasum":"a6c77997784219bfc069196b896803d75a879d28","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClientTests/SocketClientTests.m","shasum":"999fab83acb97b7302340628f93182706fb22adb","modified":1441007340000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncSocket.h","shasum":"7a498805306828a65746e7b6da581d25e275349f","modified":1402190982000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncUdpSocket.h","shasum":"da497978584d7e1d81512b729346a203ec07bdd2","modified":1402190982000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/AppDelegate.h","shasum":"e9a6ef234f250c2ccbe4f639b653ca7987fb83c6","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncUdpSocket.m","shasum":"e712fe4d6cdbca78bb860898c5f2ffa8a754132f","modified":1402190982000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/AppDelegate.m","shasum":"a16e609de17edc2dc4003288a25ccf84e1c8527c","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Base.lproj/Main.storyboard","shasum":"c75b9d4336a231e94a9632e12eb9092c0e18f54b","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Images.xcassets/AppIcon.appiconset/Contents.json","shasum":"c92c5983bbebb9311e547f72183300cceb51a6dd","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Images.xcassets/LaunchImage.launchimage/Contents.json","shasum":"204f5ffda0f87ea238e2251824cf837e2dc5df1e","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/ViewController.h","shasum":"7774846160b17466308f3f1cbc319a02fdb4a17c","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/ViewController.m","shasum":"51704946206addcac7b8cbe8a48c5200f5c3c3ee","modified":1440991052000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/classes/Singleton.m","shasum":"c3f375fa4e3448e3f96cc1e6c7d0bb0c010e17da","modified":1441003411000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/classes/Singleton.h","shasum":"0a50f6cfc6466d97daf56ee04fd504f6d86c32ea","modified":1404442628000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/en.lproj/InfoPlist.strings","shasum":"8faaa0faa6cd692b602eb74340c754c739d5eaa3","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/main.m","shasum":"9c74f0e7f574ad66b4dc636f51de1511eeea2806","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/socket_tutorial-Info.plist","shasum":"2016b5252bf15ed48c8b3fb936e4148de8c835a5","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/socket_tutorial-Prefix.pch","shasum":"bf2fc6dfc093e1043bade3a85f0474d8da0c1c48","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"94d28696795b0a4c6de837d7e691c0d85f7315f1","modified":1404440431000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.pbxproj","shasum":"8cc95f3579f3127c7c76cf169a08983f55725447","modified":1404440704000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"baf683f22e1611db69b3e918a892e6565e3865b3","modified":1441007732000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/project.xcworkspace/xcuserdata/xiaoliangwang.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"e70caa254ff3feedefa6d0240b776c3a456b3896","modified":1404445023000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"6400f1515e560c147c221d29902cebeff7f30efa","modified":1441007454000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/socket_tutorial.xcscheme","shasum":"2558e4fde9b7cb3df25270aeddee3b8bd547cdd9","modified":1440990189000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"b9ea6aecdd8fb917e1d8223e4a90cfa38e056619","modified":1440990188000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"0bb97e7b8a17d7b1854146fab054d808164cffca","modified":1404441257000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcschemes/socket_tutorial.xcscheme","shasum":"1dddcbaeef54605ff7f0dbe039535fdd04274bb3","modified":1404440432000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorial.xcodeproj/xcuserdata/xiaoliangwang.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"b9ea6aecdd8fb917e1d8223e4a90cfa38e056619","modified":1404440432000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/socket_tutorialTests.m","shasum":"7083a106bc29f20985a8159932a63798e989379d","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/en.lproj/InfoPlist.strings","shasum":"8faaa0faa6cd692b602eb74340c754c739d5eaa3","modified":1404440430000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/socket_tutorialTests/socket_tutorialTests-Info.plist","shasum":"2db9f2d8b1f26d881a616b3aae775819e767c4d1","modified":1404440430000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperation.h","shasum":"5a29475eaa1620702e7d3844aa34a48498ce0bd4","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperation.m","shasum":"9b1fd2f5476d6e40a7d1c38c26f32089ac8a5cc3","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperationManager.h","shasum":"a54dd6ba79c39cc1f1d2b9b4c5d73e0961676e22","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPRequestOperationManager.m","shasum":"deb3d791151815d4f1ce26cf465bd296096c2036","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPSessionManager.h","shasum":"0f160f61a5cd289cfdf8df74a199ae966d552e38","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworkReachabilityManager.h","shasum":"01c4148d289f9ae65704baf0a8ece1faddbf6a7d","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFHTTPSessionManager.m","shasum":"e6bec00344fa491c4aeaf98e0c00bac33cf5f842","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworkReachabilityManager.m","shasum":"6973f15267a53ebe9ee9b5588fe0d310f62164fb","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFNetworking.h","shasum":"f858acce07e16356bead1b226399e22381937505","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFSecurityPolicy.m","shasum":"b7865ee2600fec8571d31848de8a68081288f0ef","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFSecurityPolicy.h","shasum":"0c54c6d58e34457c756fbbdb8fe4d78e7b07b668","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLConnectionOperation.h","shasum":"ea045c7c6ea95e61bde2bc5503c9f4ea516949c0","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLConnectionOperation.m","shasum":"ffbe5c263333206d2cd2785c9b543cde9e6388bc","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLRequestSerialization.h","shasum":"3e9fa2cb8f64f9b5ff742e2c533d6720e575d67f","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLResponseSerialization.h","shasum":"92d9739ca8187cd86dde267347b006307f4e488d","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLRequestSerialization.m","shasum":"ca6e2a280879827157c414f5ab86927b4d83cbd3","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLSessionManager.h","shasum":"bd14ee1bdead3d9caf8460bda9a895eb15a1bdfc","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLResponseSerialization.m","shasum":"a966509fc15bed107f5a799889b10eadf1b33094","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AppDelegate.h","shasum":"7e8c591ec7d1ca79b21e6a1402d75095c2220f7d","modified":1391593983000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AFNetworking/AFURLSessionManager.m","shasum":"494a8bbc9e0687255336a461e124449dfa5f35ce","modified":1441562628000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/Base.lproj/Main.storyboard","shasum":"b35f4717ac880abe12a898b699da4fcbccb1572b","modified":1444360142000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/AppDelegate.m","shasum":"6dc565ed8c9dc9cd8d3118a5e9d03e392103f015","modified":1391593826000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/DownloadTask-Info.plist","shasum":"3a9849afb5bb456cebcd2c7776878a5c0bc9f2e9","modified":1444360139000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/DownloadTask-Prefix.pch","shasum":"bf2fc6dfc093e1043bade3a85f0474d8da0c1c48","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/Images.xcassets/LaunchImage.launchimage/Contents.json","shasum":"114b259dbbb6a6ff31bab3135f4cbb6d2f6f60e9","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/Images.xcassets/AppIcon.appiconset/Contents.json","shasum":"3e251cdc4f1adaebd6e9f7d778e52d5e7755fb65","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/NSDataRequestManager.h","shasum":"4efb7efc4c189399f6f68201a57b8bb056700c2c","modified":1444394203000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/ViewController.h","shasum":"45fe1dd8e9c5e145fd75fe08335b1ea392cf8cb2","modified":1444361280000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/NSDataRequestManager.m","shasum":"79aa4cd6531c2424a16939658cc7da0fead817a6","modified":1444394174000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/en.lproj/InfoPlist.strings","shasum":"8faaa0faa6cd692b602eb74340c754c739d5eaa3","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/ViewController.m","shasum":"cc68ea01b4255c75a97fdf7dbb2e7309b3fb1ab6","modified":1391595820000},{"_id":"source/CodeSource/DownloadTask/DownloadTask/main.m","shasum":"3f75ccfb0d83c10a3ecf1b489750ffe2a1c80b93","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/xcuserdata/DexSinis.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"8b74efe940539027db6e43a3d4a389e1f196fa34","modified":1444395275000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.pbxproj","shasum":"3607d248f35fd09b7cc4b00b8b2c69776b19af7e","modified":1444394268000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"57ab7e5f6903d53ed7ca599c457d434f743a2f26","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/project.xcworkspace/xcuserdata/apple.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"266fca851d9395a506f208075b930543d69b0d65","modified":1391596394000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"0bb97e7b8a17d7b1854146fab054d808164cffca","modified":1391588833000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"7843392342bcba03357416cbeaeb58e7de5ff5bc","modified":1444359917000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/DownloadTask.xcscheme","shasum":"7a99d6a477aaf26d488f025af59cc438a939aeb8","modified":1444359918000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"7843392342bcba03357416cbeaeb58e7de5ff5bc","modified":1391584102000},{"_id":"source/CodeSource/DownloadTask/DownloadTask.xcodeproj/xcuserdata/apple.xcuserdatad/xcschemes/DownloadTask.xcscheme","shasum":"0b00b2668e61757c11107254138aff8a02c9b022","modified":1391584102000},{"_id":"source/CodeSource/DownloadTask/DownloadTaskTests/DownloadTaskTests-Info.plist","shasum":"0c5ccf5f42c8689a39568b6ffbc4b397ce9e1992","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTaskTests/DownloadTaskTests.m","shasum":"ed7a5c094fee7c5c65497b2cdbe98076d54e7440","modified":1391584101000},{"_id":"source/CodeSource/DownloadTask/DownloadTaskTests/en.lproj/InfoPlist.strings","shasum":"8faaa0faa6cd692b602eb74340c754c739d5eaa3","modified":1391584101000},{"_id":"source/CodeSource/FoodPin/FoodPin/Base.lproj/LaunchScreen.xib","shasum":"b6bb2b6290def45dc1bac0bedb493338013b98cb","modified":1441870678000},{"_id":"source/CodeSource/FoodPin/DayCode/2015.09.10.zip","shasum":"563098b184c671522cb9d15a66871e98aab9322b","modified":1441878481000},{"_id":"source/CodeSource/FoodPin/FoodPin/AppDelegate.swift","shasum":"f27252e4cf9a84bded4b0664ea2d099dae8491d6","modified":1441956478000},{"_id":"source/CodeSource/FoodPin/FoodPin/Base.lproj/Main.storyboard","shasum":"981c6b3247569f91f18ea3ac385ea85d35cbce44","modified":1441870678000},{"_id":"source/CodeSource/FoodPin/FoodPin/CustomTableViewCell.swift","shasum":"83a70de525a736aadc80b6c9cd5252ce6de84986","modified":1441966063000},{"_id":"source/CodeSource/FoodPin/FoodPin/DidSet_WillSet.swift","shasum":"c5f139c6d6ea1b73c8f6502af899c4584c49c531","modified":1441938353000},{"_id":"source/CodeSource/FoodPin/FoodPin/HWTestHeightCell.h","shasum":"23c25b60250ea32e037e3eb1f2e07a6003ab4fe3","modified":1432149756000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/Contents.json","shasum":"d26fcebf3e5b0ed5f8402d40b6b83a4231189ef2","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/LaunchImage.launchimage/Contents.json","shasum":"972fc2577595cb8f13b71924ebd63db678de63ff","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/AppIcon.appiconset/Contents.json","shasum":"e78d8bd65a4d2bcdb1ce28ef6f49ecf73c96b576","modified":1441870678000},{"_id":"source/CodeSource/FoodPin/FoodPin/HWTestHeightCell.m","shasum":"6da7ab6c3d9c77fafd12143bb57da89382e9eaf4","modified":1441965638000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/Contents.json","shasum":"883493421114b8c91f1d46dc5b31dc5cc0a973eb","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/Contents.json","shasum":"7bf4760178d3faae525f68ea708ad0a8810c45af","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/Contents.json","shasum":"9db6604a1724e2fadd2178f784dc33dded00ad8e","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/Contents.json","shasum":"2911dc5a058bcacdd99c42d8549d86b2850a5879","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/Contents.json","shasum":"6a2497e619e481852e5aaa454c055676442889e2","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/Contents.json","shasum":"a581adee2b5c38da0b26c5878ee38656be32164d","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/Contents.json","shasum":"24dda4442176ba162370a5bdc04e0d9209610623","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/Contents.json","shasum":"6614465fe2a1eb1ef41b9b13c23994d481b50ca7","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/Contents.json","shasum":"a33e649aab5e052a5ceccd11b78b59773ba10999","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/Contents.json","shasum":"4e2c4743c2de550336f181635d54744e37a6f4b0","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/Contents.json","shasum":"a4a98656bba6505ba28935021416fd9a2e4afa08","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/Contents.json","shasum":"bf3fbdc8b2dccebd6eb100e37a41d6c7cc192961","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/Contents.json","shasum":"35da428bc718685e153429f38f605f1b7ac4666b","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/Contents.json","shasum":"1a0352309f06633b8f73c70c513c0f46a5c3a197","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/Contents.json","shasum":"32672636c0b6c4fc784df2e7003f2ab4c773b3ec","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/Contents.json","shasum":"c2d7b1b28babcc823afb650a5696ffc93560edc2","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/Contents.json","shasum":"4813cd6ec8cf9d96f6a6a46097804520e6efc6ef","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/Contents.json","shasum":"78504294d35dc04aa3346b0f935689fbb15a30af","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/Contents.json","shasum":"d45ece16214e251eb0c0ef46bcd16f1de3a8134a","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/Contents.json","shasum":"030eb9047caf134f0e491063760bb3b4847d5088","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Info.plist","shasum":"fcd216019e66c5c37886b5e68048cd3f1bfed695","modified":1441870678000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleBasicAnimationView.swift","shasum":"d8fef773adfcca879609c34e0735f5e5bee97ded","modified":1409512078000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleBasicView.swift","shasum":"d14709d47aecdc9d108d1512951e2a0492c6ccb6","modified":1441962101000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleCompositeEdgesView.swift","shasum":"218be5e649d0617209d2b6b48e0de5d86f4bc586","modified":1409512078000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleUpdateConstraintsView.swift","shasum":"f80cf8c89ad881f17caeac5e459e623dc46e2959","modified":1441954596000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleRemakeConstraintsView.swift","shasum":"536b68cf1321594ed48a5f735e077622ce694c36","modified":1441954629000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleUsingConstantsView.swift","shasum":"ef6a89deb6a48584cbfdcf09efc9d858760315f5","modified":1409512078000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Demo/MASExampleView.swift","shasum":"5dbd3d3992e51ff58b428caac22a10d6dfa1f5e2","modified":1441954872000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Info.plist","shasum":"b2d4abf3a421142e2e28ac10575891f339899485","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASCompositeConstraint.h","shasum":"8f19333aacda0daf139575c0b3e7886fc169ebd9","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASCompositeConstraint.m","shasum":"b51ac1c737902ffde71ecb77979d783e830ab0a8","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint.h","shasum":"5ce6e71db84d22dd6a1b7d30f727c72d150d8527","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint.m","shasum":"ad13bd77c1a8778d60cb96047406aebbe42db505","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraint+Private.h","shasum":"c83547853b8a39e6266aef863ac2fcb11fb06912","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraintMaker.h","shasum":"7eda61990a935b4794f9db3983673dc4567c7eff","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASLayoutConstraint.h","shasum":"58a9a1a984bd884897a1f4191d1689e33e8b0936","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASLayoutConstraint.m","shasum":"8518c4d2f9174cd44439da86df463c77d7b2f30a","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASConstraintMaker.m","shasum":"18d4710570d24c5186e01997fcaf8ee572e017a6","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASUtilities.h","shasum":"f7a714f788266999664c86ecac6e3dfa968a52f4","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewAttribute.m","shasum":"9e18ab8326d87fc96b08e322def4062501afeb59","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewConstraint.h","shasum":"41a3a2369975d0384b6c0d592374b23f780d6d4e","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewAttribute.h","shasum":"624bdb4df786227f1ef60be56a8855957a97081c","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/Masonry.h","shasum":"62d9691cc9a3eceae88349a43ba620b3470818e7","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/MASViewConstraint.m","shasum":"822c8e0338c9e28a5b7ce400241056e68f59dc88","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASAdditions.h","shasum":"0979a2c13ba6a9306804d6170c6b3dda83eef1ba","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASAdditions.m","shasum":"3f3a37e62395431822b89b6e72b28bb1451b57b5","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSArray+MASShorthandAdditions.h","shasum":"c44933644fefad606e8e3523e7ab9d2a44465952","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSLayoutConstraint+MASDebugAdditions.h","shasum":"12a1dad621360b8ee4eb95e20318ec5d62204449","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASAdditions.h","shasum":"d5e4de4314a8f05e011a9aacb2f74c5cc542847a","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/NSLayoutConstraint+MASDebugAdditions.m","shasum":"f38962e0fb2a612ad17cb48e3a52ba6e196ec397","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASAdditions.m","shasum":"383bfe59d666a6db42da0d1cfb18770a7bf913d1","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/View+MASShorthandAdditions.h","shasum":"84d1379de90edbec08f9cbbc688368abd4aea1bf","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/ViewController+MASAdditions.m","shasum":"28946322cc280bf94add98df5c7da382c96d0155","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/Masonry/ViewController+MASAdditions.h","shasum":"6bf8ddfbd0ae04ddc4bf24170604b7728ad75acc","modified":1441478826000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/Classes/UITableView+FDTemplateLayoutCell.h","shasum":"c4b5f16dd861fa26b5711f24f388e909e7fc3a70","modified":1432149756000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/Classes/UITableView+FDTemplateLayoutCell.m","shasum":"ca652ac0be9657538ad071572cd16cc0903e32a5","modified":1432149756000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/LICENSE","shasum":"a4692c5ae019f8bf1695b9c8b4e0ccae899b6e80","modified":1432149756000},{"_id":"source/CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/README.md","shasum":"ac53ae8f5d1b02e4fb3581b1a1462d3d5f3037fd","modified":1432149756000},{"_id":"source/CodeSource/FoodPin/FoodPin/Restaurant.swift","shasum":"f142f80f544e76ef893f1ab35dfdc8f6bd7301fd","modified":1441935936000},{"_id":"source/CodeSource/FoodPin/FoodPin/RestaurantController.swift","shasum":"eedc4ca18e9f2df9a3ddea6ad8b46cbef85bcb09","modified":1441965440000},{"_id":"source/CodeSource/FoodPin/FoodPin/ViewController.swift","shasum":"e25075ec43bdb5d025cf44f11225524b23fee875","modified":1441955762000},{"_id":"source/CodeSource/FoodPin/FoodPin/Swift-Masonry-Bridging-Header.h","shasum":"959b6dd878c8b9637f77351660b9ac377516a0ef","modified":1441965609000},{"_id":"source/CodeSource/FoodPin/FoodPin/RestaurantTableViewController.swift","shasum":"9ccbfe847cd5cd50e9646952f6d383d8be0aaee9","modified":1441965972000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"fc3123e776b3c83b37a0208bed91a04cd0482998","modified":1441870679000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/xcshareddata/FoodPin.xccheckout","shasum":"b6c529d1d3e2c4072c3b40ae68b08b54a24d0b01","modified":1441965980000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.pbxproj","shasum":"0bcaab6951cb801ef87253683602065e5f403943","modified":1441965980000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"2683482d866fa24a3132b0aea30da1715f398165","modified":1441970039000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"9468aced5fcc98cb14c5d09ce26e9894c9037a3c","modified":1441966111000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"ebd4795451703b5bd3e8668552385e1100d07900","modified":1441870680000},{"_id":"source/CodeSource/FoodPin/FoodPin.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/FoodPin.xcscheme","shasum":"e7df6269b87a8667a033044cb473c00d08a623ee","modified":1441870680000},{"_id":"source/CodeSource/FoodPin/FoodPinTests/FoodPinTests.swift","shasum":"2874ad0476a02e37c4dec3494038df46de0e740c","modified":1441870678000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/AppDelegate.h","shasum":"41ed5b528d8235d716da5570b21b7478a08e33ce","modified":1441789753000},{"_id":"source/CodeSource/FoodPin/FoodPinTests/Info.plist","shasum":"7dec470c9f111a6a0139aa526cc2bf7a7b245f32","modified":1441870678000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/AppDelegate.m","shasum":"16a15ffb753abccaab577049e309eb2e65c70742","modified":1441794115000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Base.lproj/Main.storyboard","shasum":"fb2149d1eeeb15a903e65532f82d4db625008d38","modified":1441790089000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Base.lproj/LaunchScreen.xib","shasum":"1979cf6a3f4e86e56ecb7f7b24affc88c9be9a55","modified":1441789753000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoOneViewController.h","shasum":"47e24adc94ff1e2bb4245d41cec07a6e43e20ba0","modified":1441790175000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoThreeViewController.h","shasum":"e65c5278b6d8a350b3eba81f23b4e7e917d43cdb","modified":1441790203000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoOneViewController.m","shasum":"da7a98dee1698d87a9de29eeca711152110e5a26","modified":1441794175000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoThreeViewController.m","shasum":"923cd75a1fb414466176c781980c311a4d3e257d","modified":1441790203000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoTwoViewController.h","shasum":"160b3a5f4e72182084951ba29e9db0f113973d45","modified":1441790191000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Images.xcassets/AppIcon.appiconset/Contents.json","shasum":"e78d8bd65a4d2bcdb1ce28ef6f49ecf73c96b576","modified":1441789753000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/DemoTwoViewController.m","shasum":"d5c7f22a87b1571369c8fcd13b1a89c5fe5b0777","modified":1441790191000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/Info.plist","shasum":"f8b972bb8996b94200d72c9a483516b2d1faa32d","modified":1441791634000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/ViewController.h","shasum":"b634fb0aa04e45e00855d0f93ff6bd3bd7cada36","modified":1441793468000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/ViewController.m","shasum":"75e36395fc1ec61d15bef6352cc941feb6f7c46a","modified":1441794407000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry/main.m","shasum":"758d9ffcd1ee702f7a698df0dbe9f60966c7bcc5","modified":1441789753000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.pbxproj","shasum":"5294507aaf2bbc516000868f1a99e4eb39dc95d0","modified":1441791634000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"802d46be3bc29315c0ad4620941a5350fd698c8c","modified":1441789754000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/xcshareddata/Masonry.xccheckout","shasum":"6d348e4d58247c2144a991ece2027608d075c90b","modified":1441953972000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"f77da9239d6e14bd4d7f265f7878006e2e4afdc6","modified":1441955912000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"ae00c22cc7d7b9ce6e22b242632d59aff599be3e","modified":1441966216000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"5bd51b68dcc91a6bc7a3099c3f0fca931ac1f004","modified":1441789755000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/Masonry.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/Masonry.xcscheme","shasum":"20063b67f22a4c21384cff55714902e7fa2a4140","modified":1441789755000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/MasonryTests/MasonryTests.m","shasum":"d98cf994be573bed3f7d44c41737c02c93ac60b1","modified":1441789753000},{"_id":"source/CodeSource/GitHub/Masonry/Masonry/MasonryTests/Info.plist","shasum":"7dec470c9f111a6a0139aa526cc2bf7a7b245f32","modified":1441789753000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSConst.m","shasum":"26de9202e670c86329d0d2d5122e5ec97510a9f4","modified":1442909299000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSConst.h","shasum":"990cc1817e0609395e36cbaaea3f5dc236d0d769","modified":1442909196000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+NSKeyValueObject.m","shasum":"15095fdf92e9b6f7d1bf491cd39596f5dada3e6d","modified":1442972009000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+NSKeyValueObject.h","shasum":"92aa6eddcf95b6fa13ea60efb7978fcd6ed35f2a","modified":1442972501000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+Property.h","shasum":"932ef164727738e7825809d74add5f39b31820ec","modified":1442913757000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSObject+Property.m","shasum":"ec4e9f7877dd023e7dd446eb9f2b865c7b320cf7","modified":1442972814000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSPropertyType.m","shasum":"fba6c2f0a5c8ec78fd0e2ad7794be52bfdc6280c","modified":1442974838000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSPropertyType.h","shasum":"f204974b2e47881d6c6f333fef64e023a3ef668d","modified":1442909795000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSProperty.m","shasum":"3101d79faa7ffc1afef11e9c2e91d2ff63729d5a","modified":1442915236000},{"_id":"source/CodeSource/NSExtension/NSExtension/NSProperty.h","shasum":"a72521743a30d92e9cec2a43898a4fb597d7f864","modified":1442915042000},{"_id":"source/CodeSource/NSExtension/NSExtension/main.m","shasum":"f9c5767f70a563dae60f8429bb2feff74062b174","modified":1442974147000},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/project.pbxproj","shasum":"cd956b6a743aee5dbebb19a8b33f4ee73cf74387","modified":1442972697000},{"_id":"source/CodeSource/NSExtension/NSExtension/User.m","shasum":"1586a7a8032baf953c16e6c095e75aa4c00dc0cf","modified":1442903699000},{"_id":"source/CodeSource/NSExtension/NSExtension/User.h","shasum":"a7ee57a40a55c60b9521c07e5b2c243a197dc2ec","modified":1442904063000},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"4a99d795af7954f0b2985bf8cbad2fd0db0f64e4","modified":1442894290000},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"2e04156c7e73926369c5d185731a719b15405811","modified":1442894290000},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcschemes/NSExtension.xcscheme","shasum":"08ddba28b1a487ab8c521425f31e9e76a836b616","modified":1442894291000},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/project.xcworkspace/xcuserdata/DexSinis.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"e4c785de775e788613458a612eec111f182ea5ad","modified":1442980507000},{"_id":"source/CodeSource/NSExtension/NSExtension.xcodeproj/xcuserdata/DexSinis.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"8a5bb247967d14032940cdebf01adb4c46c931ac","modified":1442975526000},{"_id":"source/CodeSource/NSExtension/NSObject+NSKeyValueObject.h","shasum":"92aa6eddcf95b6fa13ea60efb7978fcd6ed35f2a","modified":1442972501000},{"_id":"source/CodeSource/NSExtension/NSObject+NSKeyValueObject.m","shasum":"15095fdf92e9b6f7d1bf491cd39596f5dada3e6d","modified":1442972009000},{"_id":"source/CodeSource/NSPath/NSPathTool.h","shasum":"8d085da12cd45ed3b9bdd3b3af180c2a2d2d5f08","modified":1434623952000},{"_id":"source/CodeSource/NSPath/NSPathTool.m","shasum":"8762b562b2d9fe175f21f97a4678c7eb97f976ab","modified":1434623898000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/AppDelegate.swift","shasum":"88cb431ae7128c27501d321d74760dd5122fdfca","modified":1441868101000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Base.lproj/Main.storyboard","shasum":"75b1054b83273e0935b6856e51f5a75c493fce0e","modified":1441868726000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Base.lproj/LaunchScreen.xib","shasum":"eec40a82d964d3030e67de42f399fe2a4843ded3","modified":1441866079000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Images.xcassets/AppIcon.appiconset/Contents.json","shasum":"e78d8bd65a4d2bcdb1ce28ef6f49ecf73c96b576","modified":1441866079000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/Info.plist","shasum":"fcd216019e66c5c37886b5e68048cd3f1bfed695","modified":1441866079000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/NSUITableViewController.swift","shasum":"734639bb5ad1d3e1883839c15590c5ed266f29ee","modified":1441870111000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController/ViewController.swift","shasum":"9746878f68bbf9d31eaa1038df99db3121f5b04a","modified":1441866079000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/contents.xcworkspacedata","shasum":"7998278587660ee6e4a76671c46950f2181503ac","modified":1441866080000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/xcshareddata/NSTableViewController.xccheckout","shasum":"3038b68fe900a7a5f514a2de640ae064a115e76a","modified":1441867785000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.pbxproj","shasum":"328e2f876954caf27313aea97af078cb84c7df89","modified":1441867174000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/project.xcworkspace/xcuserdata/a000.xcuserdatad/UserInterfaceState.xcuserstate","shasum":"74a8bde9ef4dfa79a9bfbc7b15ea482d10885867","modified":1441886446000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist","shasum":"0bb97e7b8a17d7b1854146fab054d808164cffca","modified":1441866950000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/NSTableViewController.xcscheme","shasum":"6e52b8f36ee74b4ba216fe7e71252ebda7a2eb4f","modified":1441866081000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewControllerTests/NSTableViewControllerTests.swift","shasum":"34ea0fcce613127fb8cea93f8def17734c1bf43b","modified":1441866079000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewController.xcodeproj/xcuserdata/a000.xcuserdatad/xcschemes/xcschememanagement.plist","shasum":"f0cfe98b33db60a8406ab4281d101c959a14ce4e","modified":1441866081000},{"_id":"source/CodeSource/NSTableViewController/NSTableViewControllerTests/Info.plist","shasum":"7dec470c9f111a6a0139aa526cc2bf7a7b245f32","modified":1441866079000},{"_id":"source/CodeSource/StoryBoard/StoryBoardUtilities.h","shasum":"e520b2525daefb0b6a10fc44c80bf10e15f78ae0","modified":1427091656000},{"_id":"source/CodeSource/StoryBoard/StoryBoardUtilities.zip","shasum":"b6ca4615e7e6ef798a0948049f75c26611c9baad","modified":1442028234000},{"_id":"source/CodeSource/StoryBoard/StoryBoardUtilities.m","shasum":"f3388af85e7060ad3f048269726df6e1efc5df19","modified":1427091656000},{"_id":"source/CodeSource/ssh.zip","shasum":"d4ab8451fc99bc1a8225d47e315b27f79b55753a","modified":1447384740000},{"_id":"source/MyImage/Swift/Object-C与Swift混编1.png","shasum":"aeaebdf67dc3da2a195b1a06954223b2a8cf4f25","modified":1442288533000},{"_id":"source/MyImage/Swift/Object-C与Swift混编2.png","shasum":"099541f56f0994e4546cffd8d9f0e0f09bb728ee","modified":1442288541000},{"_id":"source/MyImage/Swift/Object-C与Swift混编3.png","shasum":"3d14cf24bd5bd882b94b45d729d6489b1b3072d9","modified":1442288551000},{"_id":"source/MyImage/Swift/Object-C与Swift混编4.png","shasum":"40596564b5415cdc35206f8668911e867438925e","modified":1442288559000},{"_id":"source/_posts/AFNetworking简单使用.markdown","shasum":"fd8bed3faca926a47f292d1bb98270460bc4be94","modified":1444358278000},{"_id":"source/_posts/AsyncSocket简单使用.markdown","shasum":"35b34feb02afc333a8c32f46608a8d22cef8d463","modified":1441768722000},{"_id":"source/_posts/GCD简单使用.markdown","shasum":"cbc8011eec518b96196220e9f236b324869f0e0d","modified":1447925660000},{"_id":"source/_posts/GitHub项目.markdown","shasum":"7f707664703bf82df7dc884217f187eff22d6c45","modified":1447925257000},{"_id":"source/_posts/Git的简单使用.markdown","shasum":"5c48c39a0ab50edeb2aab3cd7679d75265fdc420","modified":1451884125000},{"_id":"source/_posts/IOS学习经验总结.md","shasum":"150cf3b15b009729ccd51275ce94904bc02f4926","modified":1446089855000},{"_id":"source/_posts/IOSFamousBlog.markdown","shasum":"da3bc1f503f2845597585d84728ba16c12c81758","modified":1444441828000},{"_id":"source/_posts/IOS学习经验过程总结.markdown","shasum":"1da81416fc7add38f31636632e427da35a83af25","modified":1444125202000},{"_id":"source/_posts/Macbook使用技巧.markdown","shasum":"ef460527b2c0b18486aa3bd0bcba596fa87e0417","modified":1444098616000},{"_id":"source/_posts/IOS学习路线.markdown","shasum":"a8c058d5412b5663b7704f03bd213bd65085a7f6","modified":1441785590000},{"_id":"source/_posts/MVC，MVP 和 MVVM 架构.markdown","shasum":"8224f8cbe8bcfac966f7670e6c940982b0c744d1","modified":1449212223000},{"_id":"source/_posts/NSBundle简单使用.markdown","shasum":"0496a514f31b81aeed13b21c9399b73d0e9835c6","modified":1448248495000},{"_id":"source/_posts/NSNotification简单使用.markdown","shasum":"5e7edea84d5dad601b51ce863ff4503a35aeccec","modified":1447925646000},{"_id":"source/_posts/NSURL简单使用.markdown","shasum":"0231f832f4eb46c4d02931badab3f2f7f42cac9c","modified":1447926018000},{"_id":"source/_posts/NSDate简单使用.markdown","shasum":"d1b52cfbc0a1d38ada276d0272e6f709bae555af","modified":1441768675000},{"_id":"source/_posts/Node包管理.markdown","shasum":"d344e0df35799c8fd343dad4fb1353c507741ad2","modified":1447925836000},{"_id":"source/_posts/Object-C与Swift混编.markdown","shasum":"b452d0aa606f22b19d26a1f9e253af2067db5c29","modified":1442302522000},{"_id":"source/_posts/SDWebImage简单使用.markdown","shasum":"d47ca9b6141ef08a582f6734187d471d67e9fdaf","modified":1448354674000},{"_id":"source/_posts/ReactNative简单使用.markdown","shasum":"174daf4b6978a95796d576444758922998d360b8","modified":1444957695000},{"_id":"source/_posts/StoryBoard简单使用.markdown","shasum":"0a87db2f533ec589d0ed3743ea8b87986cd93efb","modified":1442029124000},{"_id":"source/_posts/Swift实战之FoodPin(一).markdown","shasum":"430603e4c52790f33fbca7a7f2c02dfc36bd0a48","modified":1441879001000},{"_id":"source/_posts/UIButton简单使用.markdown","shasum":"3e58f1ba4a7a312653afe327ed7c03ed4fbeac26","modified":1441794518000},{"_id":"source/_posts/UIFont简单使用.markdown","shasum":"819ed159f2e871950c8702493ad4f8b10fc7fbcd","modified":1443093026000},{"_id":"source/_posts/UINavigationController简单使用.markdown","shasum":"a9b8481c4cd7ec3dfbd50696c22765c525b06d8d","modified":1442303388000},{"_id":"source/_posts/UIImage简单使用.markdown","shasum":"14b9dff37806bdec996d151fd759a787bd718f7f","modified":1441768689000},{"_id":"source/_posts/UITableView简单使用.markdown","shasum":"de178b99e1a8846ef864d29726d0a1b1e255501b","modified":1443146922000},{"_id":"source/_posts/UITextField简单使用.markdown","shasum":"bb4f76a7a183245db507a46f77fbba9c887c8182","modified":1447925752000},{"_id":"source/_posts/UIViewController简单使用.markdown","shasum":"01334b9e4d3b0f907d03ca6991005244219ffabe","modified":1448850902000},{"_id":"source/_posts/cocoapods简单使用.markdown","shasum":"128a2d8583e557ca7c9761ee825fcedef4453085","modified":1447925101000},{"_id":"source/_posts/exports 和 module.exports 的区别.markdown","shasum":"a44829ae3813e6d1e537d991edfd21c61189342f","modified":1447925544000},{"_id":"source/_posts/git的简单使用和hexo博客搭建.markdown","shasum":"2774e39df08a827b2e072301b2da89b5308cd083","modified":1441853730000},{"_id":"source/_posts/hello-world.md","shasum":"7e4132b1fcc820b923a18cb6dd81705e73862030","modified":1446089853000},{"_id":"source/_posts/hexo博客搭建.markdown","shasum":"5a00c95ec3f0fb14909230963d8ef4b42eb464fb","modified":1447925421000},{"_id":"source/_posts/init初始化简单实用.markdown","shasum":"e7931ef77f53e8313b535be2314ff75f6c62ff2e","modified":1442385391000},{"_id":"source/_posts/koa简单使用.markdown","shasum":"219b949bd4f9514b77519c66bab56a25664912dd","modified":1447925551000},{"_id":"source/_posts/markdown.md","shasum":"6d84a2ab5f0104c33a2e9b87fb327072585bfdd6","modified":1446089857000},{"_id":"source/_posts/markdown学习小tips.markdown","shasum":"c55dc535d33dca6b2a8702747f259dbe36a74674","modified":1447925410000},{"_id":"source/_posts/textsadasd.markdown","shasum":"a4002e17acce9484c5a6a43a264079f5e4e09efe","modified":1452271909000},{"_id":"source/_posts/开源库总结.markdown","shasum":"cd77df4b2b78dd05824830c69df91b785a8ccd3f","modified":1441768745000},{"_id":"source/_posts/常用命令总结.markdown","shasum":"734dbdf8a0a55da20d471b4e13d37923c774e07c","modified":1444123581000},{"_id":"source/_posts/归档.zip","shasum":"afdb080b4921ccd3153dfd208589c0b48439cd59","modified":1441768665000},{"_id":"source/_posts/教你如何获取ios系统信息.markdown","shasum":"a384265f2f9a81fd6511e503b5590306d48df1ac","modified":1449709446000},{"_id":"source/_posts/欢迎使用 Cmd Markdown 编辑阅读器.markdown","shasum":"fb6c272cb7597872761b460476b0fbc525d10a42","modified":1447925436000},{"_id":"source/_posts/语录.markdown","shasum":"81705801370b1360b4079cbbaf91f1949af1c3f4","modified":1447927230000},{"_id":"source/favicon.ico","shasum":"b3ad70661b0d4313f7cf61f7116457bbf4bb5a0e","modified":1440483999000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/AsyncSocket.m","shasum":"2214c6d003d319386ad5323c38b239dbbe66658d","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/EchoServer/English.lproj/MainMenu.nib/designable.nib","shasum":"353a5f8da579dadbbe1b515208635fd6c0d9d0a8","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/SocketClient/SocketClient/AsyncSocket.m","shasum":"2214c6d003d319386ad5323c38b239dbbe66658d","modified":1440649890000},{"_id":"source/CodeSource/AsyncSocket/socket_tutorial/Resources/socket/AsyncSocket.m","shasum":"2e7b48c49d95ae202ac43ad6362cf219215c1453","modified":1402190982000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/cafelore.jpg","shasum":"0026f11efeb12d3e2ad4710d25f51526d7cb17e2","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/homei.jpg","shasum":"48db3f5244ff475d2f90e1e9f0742499b49480cd","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/royaloak.jpg","shasum":"ad5baac675b76a61ac0ec613c323610d7fe0c254","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/traif.jpg","shasum":"875514aeb6352cac266b3788c20a86e5b2dfbc5b","modified":1441935446000},{"_id":"source/MyImage/AsyncSocket/AsyncSocket.jpg","shasum":"a1a07276ad8457be5374824a01c394badb26c274","modified":1441006062000},{"_id":"source/MyImage/Swift/Object-C与Swift混编5.png","shasum":"f846cce19340eb13d342c5aa8e0e169913aac164","modified":1442288571000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/barrafina.jpg","shasum":"bf08e40664e1295d6628ae87aadf2bf753b47bcb","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/bourkestreetbakery.jpg","shasum":"76d80c7ebba237641e95c004c119a1b377fcaa11","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/cafedeadend.jpg","shasum":"5bed7e5865f57511222f2f7c5d7e79dd9293c192","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/cafeloisl.jpg","shasum":"5ecab9f4f5759323df039235a634313b5c23065b","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/confessional.jpg","shasum":"5b52fb8f6e548e02bc32dc46cfdc9c3e8137683b","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/donostia.jpg","shasum":"87fac6f911439a4ffa21e98a9b6664cd21ef172c","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/fiveleaves.jpg","shasum":"776aa2b33871c8cd3b951cd22c311c168525281e","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/forkeerestaurant.jpg","shasum":"05d880e1202a33f1ac66768e71e0b4c3d2fcf396","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/grahamavenuemeats.jpg","shasum":"2c1963290dd526ee065ddde867b6f6e9b04e5890","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/haighschocolate.jpg","shasum":"13271fd1225b53e2f65c8f5e2947d905b5942c38","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/palominoespresso.jpg","shasum":"0c6848fff11cbefee8b9764729b8eae62b7c8eba","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/petiteoyster.jpg","shasum":"be947d2bfe3419c4caac4e54048b0c72b517baa1","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/posatelier.jpg","shasum":"f97c1f478cf65c3568b2b641a68ce38b3386a01f","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/teakha.jpg","shasum":"a06f4327b738401b7a8c921ca9820834d476245b","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/upstate.jpg","shasum":"5406f7235e57f1fef4d905f0beea71a93c673e5a","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/wafflewolf.jpg","shasum":"9fb1cc00be40305c0822ef9b411936c5062ec312","modified":1441935446000},{"_id":"source/MyImage/IOS开发经验总结/框架类组织架构图.jpg","shasum":"46d5ca864ea8178a170b7e42814a5452591b1349","modified":1441784795000},{"_id":"source/MyImage/ReactNative/ReactNativeProjectBase.png","shasum":"2ee388f4eaed7993f90d064f5af165ca38281aac","modified":1444880606000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/thaicafe.jpg","shasum":"d22d68e07de75a9dd4dc4d19d858704d6f76716a","modified":1441935446000},{"_id":"source/MyImage/IOS开发经验总结/iOS学习路线.png","shasum":"eaae27a6ae0c86c8016632f921d2874b473e174f","modified":1441784790000},{"_id":"source/CodeSource/AsyncSocket/AsyncSocket.zip","shasum":"2b2c154c02f03f5e157f2084136fc140bc848aab","modified":1441009253000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/bourkestreetbakery@2x.jpg","shasum":"766438334fb2369312b999316eec967fc3088fdd","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/barrafina@2x.jpg","shasum":"158ba785d6fbab6f3e79f6cc456dd3323c491212","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/cafelore@2x.jpg","shasum":"463a1623ec167d76b80c8f6f8af3c05acafecd17","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/cafeloisl@2x.jpg","shasum":"f84207e2546c30eb53226613f8c436fea39029bb","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/homei@2x.jpg","shasum":"4b0a8ac61d1a6929bdc19c998e1c12b6b9d7e7ad","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/royaloak@2x.jpg","shasum":"a1d5e6c8de353a83be44aba462d7e3f3f1baae5f","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/traif@2x.jpg","shasum":"0b4a173bcb7f98b69ea57a0f16e87cca5a16064f","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/upstate@2x.jpg","shasum":"a6d40d725bb179cdb3bb87d4b06f0ace7398046e","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/wafflewolf@2x.jpg","shasum":"af8fb17681b429a1debbaea00e44d022cade1c58","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/fiveleaves@2x.jpg","shasum":"bd492151d61685a0ab85d69d15102980b04f4474","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/forkeerestaurant@2x.jpg","shasum":"e06687181b1c4b92723a27ca31edbb2bc930df54","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/grahamavenuemeats@2x.jpg","shasum":"bb3120427f7b7ebd1a15114d0c670bf8d8f47922","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/palominoespresso@2x.jpg","shasum":"ec184f749ba2fcb2740c9d7e58bacad8daab9cfe","modified":1441935446000},{"_id":"source/MyImage/StoryBoard/StoryBoard.png","shasum":"5f41b4e1bffd1f3829e40b22c6463e451f1f6bde","modified":1441072315000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/cafedeadend@2x.jpg","shasum":"7364e06634a27e9032df4d414614816fc052d1d0","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/petiteoyster@2x.jpg","shasum":"33e3976d6f9fabb6e228277239c9321454bfba64","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/posatelier@2x.jpg","shasum":"2eeeb27c0ac3788a28af94ea8b1409b3c5baddd0","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/confessional@2x.jpg","shasum":"4f6fa53f1ce1f750ace51a5a607cc5347153a7e3","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/donostia@2x.jpg","shasum":"d82047a9bbf89fb2112e7ff7b7cd228979c07b27","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/haighschocolate@2x.jpg","shasum":"13ab5a835336c678d2cd47e691b584d338bcb8d3","modified":1441935446000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/teakha@2x.jpg","shasum":"38aebd216fdcfaed80a42541f85496ccb1b32a51","modified":1441935446000},{"_id":"source/MyImage/Swift/Object-C与Swift混编.png","shasum":"fa871c789d9aa93e782eec918b082402253b5ec6","modified":1442282609000},{"_id":"source/CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/thaicafe@2x.jpg","shasum":"89ec6bcb8d0fdcc3523cefba905682b8b49abe62","modified":1441935446000},{"_id":"source/CodeSource/testiOS8.zip","shasum":"62cc471d5d02affb7ad197068302e6b535c7cf7c","modified":1442540056000},{"_id":"source/_posts/5d379f5fjw1evxboep473j20c8bas7sb.jpg","shasum":"50c7115b618a2656da99eee9e4b406e419555619","modified":1441869770000},{"_id":"source/MyImage/Git/git.jpg","shasum":"6ebd749c8170c9c68355c5ec52efa16479af138c","modified":1448432492000},{"_id":"source/MP3s/120125029.mp3","shasum":"4fdf1d6d9ad27d3f0f46db82bdd2f5893fe1cfe1","modified":1419524962000},{"_id":"source/MP3s/12309111.mp3","shasum":"c7b82aa4e58b9f5bdb252fadc9800767c1f3dbd6","modified":1419524964000},{"_id":"source/MP3s/255319.mp3","shasum":"a093b5d106accb7b04e36ab257357dffb90aa5a6","modified":1419524966000},{"_id":"source/MP3s/309769.mp3","shasum":"4273db5e14575972f987e2110ae76acc90dd6262","modified":1419524962000},{"_id":"source/MP3s/235319.mp3","shasum":"01d1d5c194ff6e16c9f25f36a41e1b787cfb024d","modified":1419524962000},{"_id":"source/MP3s/339744.mp3","shasum":"ee0fd4942fdbd691b4590e29e539c8a89607d9fc","modified":1419524964000},{"_id":"source/MP3s/14945107.mp3","shasum":"97a07685d763b414a0fe6e62596261e46e042f31","modified":1419524964000},{"_id":"source/MP3s/10736444.mp3","shasum":"bb22ef0feeb3ed909bb7ac30bb791bf20d224658","modified":1419524966000},{"_id":"source/MP3s/10405520.mp3","shasum":"8a95adbe369c9c4e177a623b71d00f2cd90c2cd8","modified":1419524962000},{"_id":"source/CodeSource/FoodPin.zip","shasum":"f85b84769bce7e53540f6fa2a9ca9f97d7e431ab","modified":1441965809000}],"Category":[],"Data":[],"Page":[{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/NSTableViewController/NSTableViewController/Images.xcassets/AppIcon.appiconset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-10T06:21:19.000Z","updated":"2015-09-10T06:21:19.000Z","path":"CodeSource/NSTableViewController/NSTableViewController/Images.xcassets/AppIcon.appiconset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhav0030ph3m6ba431wg"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/GitHub/Masonry/Masonry/Masonry/Images.xcassets/AppIcon.appiconset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-09T09:09:13.000Z","updated":"2015-09-09T09:09:13.000Z","path":"CodeSource/GitHub/Masonry/Masonry/Masonry/Images.xcassets/AppIcon.appiconset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhb00031ph3mv8ig7u38"},{"_content":"","source":"CodeSource/FoodPin/READNE.md","raw":"","date":"2015-09-11T10:11:53.000Z","updated":"2015-09-11T10:11:53.000Z","path":"CodeSource/FoodPin/READNE.html","title":"","comments":1,"layout":"page","_id":"cij9jnhb40032ph3mhqr2b02r"},{"_content":"# UITableView-FDTemplateLayoutCell\n<img src=\"https://cloud.githubusercontent.com/assets/219689/7244961/4209de32-e816-11e4-87bc-b161c442d348.png\" width=\"640\">\n\n## Overview\nTemplate auto layout cell for **automatically** UITableViewCell height calculating.\n\n![Demo Overview](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot2.gif)\n\n## Basic usage\n\nIf you have a **self-satisfied** cell, then all you have to do is: \n\n``` objc\n#import \"UITableView+FDTemplateLayoutCell.h\"\n\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return [tableView fd_heightForCellWithIdentifier:@\"reuse identifer\" configuration:^(id cell) {\n        // Configure this cell with data, same as what you've done in \"-tableView:cellForRowAtIndexPath:\"\n        // Like:\n        //    cell.entity = self.feedEntities[indexPath.row];\n    }];\n}\n```\n## Height Caching API\n\nSince iOS8, `-tableView:heightForRowAtIndexPath:` will be called more times than we expect, we can feel these extra calculations when scrolling. So we provide another API with caches:   \n\n``` objc\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return [tableView fd_heightForCellWithIdentifier:@\"identifer\" cacheByIndexPath:indexPath configuration:^(id cell) {\n        // configurations\n    }];\n}\n```\n\n### Auto cache invalidation\n\nExtra calculations will be saved if a height at an index path has been cached, besides, **NO NEED** to worry about invalidating cached heights when data source changes, it will be done **automatically** when you call \"-reloadData\" or any method that triggers UITableView's reloading.\n\n## Precache\n\nPre-cache is an advanced function which helps to cache the rest of offscreen UITableViewCells automatically, just in **\"idle\"** time. It helps to improve scroll performance, because no extra height calculating will be used when scrolls. It's enabled by default if you use \"fd_heightForCellWithIdentifier:cacheByIndexPath:configuation:\" API.\n\n## About estimatedRowHeight\n`estimatedRowHeight` helps to delay all cells' height calculation from load time to scroll time. Feel free to set it or not when you're using FDTemplateLayoutCell. If you use \"cacheByIndexPath\" API, setting this estimatedRowHeight property is a better practice for imporve load time, and it **DOES NO LONGER** affect scroll performance because of \"precache\".\n``` objc\nself.tableView.estimatedRowHeight = 200;\n```\n\n## Debug log\n\nDebug log helps to debug or inspect what is this \"FDTemplateLayoutCell\" extention doing, turning on to print logs when \"calculating\", \"precaching\" or \"hitting cache\".Default to \"NO\", log by \"NSLog\".\n\n``` objc\nself.tableView.fd_debugLogEnabled = YES;\n```\n\nIt will print like this:  \n\n``` objc\n** FDTemplateLayoutCell ** layout cell created - FDFeedCell\n** FDTemplateLayoutCell ** calculate - [0:0] 233.5\n** FDTemplateLayoutCell ** calculate - [0:1] 155.5\n** FDTemplateLayoutCell ** calculate - [0:2] 258\n** FDTemplateLayoutCell ** calculate - [0:3] 284\n** FDTemplateLayoutCell ** precached - [0:3] 284\n** FDTemplateLayoutCell ** calculate - [0:4] 278.5\n** FDTemplateLayoutCell ** precached - [0:4] 278.5\n** FDTemplateLayoutCell ** hit cache - [0:3] 284\n** FDTemplateLayoutCell ** hit cache - [0:4] 278.5\n** FDTemplateLayoutCell ** hit cache - [0:5] 156\n** FDTemplateLayoutCell ** hit cache - [0:6] 165\n```\n\n## About self-satisfied cell\n\na fully **self-satisfied** cell is constrainted by auto layout and each edge(\"top\", \"left\", \"bottom\", \"right\") has at least one layout constraint against it.  \n\nA bad one :( - missing right and bottom\n![non-self-satisfied](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot0.png)   \n\nA good one :)  \n![self-satisfied](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot1.png)   \n\n## Installation\n\n```\npod search UITableView+FDTemplateLayoutCell \n```\n\n## License\nMIT\n","source":"CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/README.md","raw":"# UITableView-FDTemplateLayoutCell\n<img src=\"https://cloud.githubusercontent.com/assets/219689/7244961/4209de32-e816-11e4-87bc-b161c442d348.png\" width=\"640\">\n\n## Overview\nTemplate auto layout cell for **automatically** UITableViewCell height calculating.\n\n![Demo Overview](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot2.gif)\n\n## Basic usage\n\nIf you have a **self-satisfied** cell, then all you have to do is: \n\n``` objc\n#import \"UITableView+FDTemplateLayoutCell.h\"\n\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return [tableView fd_heightForCellWithIdentifier:@\"reuse identifer\" configuration:^(id cell) {\n        // Configure this cell with data, same as what you've done in \"-tableView:cellForRowAtIndexPath:\"\n        // Like:\n        //    cell.entity = self.feedEntities[indexPath.row];\n    }];\n}\n```\n## Height Caching API\n\nSince iOS8, `-tableView:heightForRowAtIndexPath:` will be called more times than we expect, we can feel these extra calculations when scrolling. So we provide another API with caches:   \n\n``` objc\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return [tableView fd_heightForCellWithIdentifier:@\"identifer\" cacheByIndexPath:indexPath configuration:^(id cell) {\n        // configurations\n    }];\n}\n```\n\n### Auto cache invalidation\n\nExtra calculations will be saved if a height at an index path has been cached, besides, **NO NEED** to worry about invalidating cached heights when data source changes, it will be done **automatically** when you call \"-reloadData\" or any method that triggers UITableView's reloading.\n\n## Precache\n\nPre-cache is an advanced function which helps to cache the rest of offscreen UITableViewCells automatically, just in **\"idle\"** time. It helps to improve scroll performance, because no extra height calculating will be used when scrolls. It's enabled by default if you use \"fd_heightForCellWithIdentifier:cacheByIndexPath:configuation:\" API.\n\n## About estimatedRowHeight\n`estimatedRowHeight` helps to delay all cells' height calculation from load time to scroll time. Feel free to set it or not when you're using FDTemplateLayoutCell. If you use \"cacheByIndexPath\" API, setting this estimatedRowHeight property is a better practice for imporve load time, and it **DOES NO LONGER** affect scroll performance because of \"precache\".\n``` objc\nself.tableView.estimatedRowHeight = 200;\n```\n\n## Debug log\n\nDebug log helps to debug or inspect what is this \"FDTemplateLayoutCell\" extention doing, turning on to print logs when \"calculating\", \"precaching\" or \"hitting cache\".Default to \"NO\", log by \"NSLog\".\n\n``` objc\nself.tableView.fd_debugLogEnabled = YES;\n```\n\nIt will print like this:  \n\n``` objc\n** FDTemplateLayoutCell ** layout cell created - FDFeedCell\n** FDTemplateLayoutCell ** calculate - [0:0] 233.5\n** FDTemplateLayoutCell ** calculate - [0:1] 155.5\n** FDTemplateLayoutCell ** calculate - [0:2] 258\n** FDTemplateLayoutCell ** calculate - [0:3] 284\n** FDTemplateLayoutCell ** precached - [0:3] 284\n** FDTemplateLayoutCell ** calculate - [0:4] 278.5\n** FDTemplateLayoutCell ** precached - [0:4] 278.5\n** FDTemplateLayoutCell ** hit cache - [0:3] 284\n** FDTemplateLayoutCell ** hit cache - [0:4] 278.5\n** FDTemplateLayoutCell ** hit cache - [0:5] 156\n** FDTemplateLayoutCell ** hit cache - [0:6] 165\n```\n\n## About self-satisfied cell\n\na fully **self-satisfied** cell is constrainted by auto layout and each edge(\"top\", \"left\", \"bottom\", \"right\") has at least one layout constraint against it.  \n\nA bad one :( - missing right and bottom\n![non-self-satisfied](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot0.png)   \n\nA good one :)  \n![self-satisfied](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot1.png)   \n\n## Installation\n\n```\npod search UITableView+FDTemplateLayoutCell \n```\n\n## License\nMIT\n","date":"2015-09-11T07:57:42.000Z","updated":"2015-05-20T19:22:36.000Z","path":"CodeSource/FoodPin/FoodPin/Lib/UITableView+FDTemplateLayoutCell/README.html","title":"","comments":1,"layout":"page","_id":"cij9jnhb60033ph3m5p04xpbe"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"wafflewolf.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"wafflewolf@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"wafflewolf.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"wafflewolf@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:27.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/wafflewolf.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbd0034ph3mib221pew"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"upstate.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"upstate@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"upstate.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"upstate@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/upstate.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbf0035ph3mdhzazkc7"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"traif.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"traif@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"traif.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"traif@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/traif.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbp0036ph3m7lv22spc"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"thaicafe.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"thaicafe@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"thaicafe.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"thaicafe@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/thaicafe.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbq0037ph3my5g1zbf2"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"teakha.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"teakha@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"teakha.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"teakha@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/teakha.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbr0038ph3m0lo7isd6"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"royaloak.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"royaloak@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"royaloak.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"royaloak@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:27.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/royaloak.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbr0039ph3mir34rzff"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"posatelier.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"posatelier@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"posatelier.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"posatelier@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/posatelier.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbs003aph3mdjawcgxf"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"petiteoyster.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"petiteoyster@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"petiteoyster.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"petiteoyster@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:27.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/petiteoyster.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbt003bph3mie9sgc9m"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"palominoespresso.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"palominoespresso@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"palominoespresso.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"palominoespresso@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/palominoespresso.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbu003cph3m0jr7yrlf"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"homei.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"homei@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"homei.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"homei@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/homei.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbv003dph3m3dgt108p"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"haighschocolate.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"haighschocolate@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"haighschocolate.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"haighschocolate@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/haighschocolate.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbx003eph3m1dk3g50e"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"grahamavenuemeats.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"grahamavenuemeats@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"grahamavenuemeats.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"grahamavenuemeats@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:27.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/grahamavenuemeats.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhby003fph3mx18xrssw"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"forkeerestaurant.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"forkeerestaurant@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"forkeerestaurant.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"forkeerestaurant@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/forkeerestaurant.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhbz003gph3mbke61yb0"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"fiveleaves.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"fiveleaves@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"fiveleaves.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"fiveleaves@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/fiveleaves.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc0003hph3m4iuplf0o"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"donostia.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"donostia@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"donostia.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"donostia@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:27.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/donostia.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc1003iph3m97mjkzzk"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"confessional.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"confessional@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"confessional.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"confessional@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/confessional.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc2003jph3m7btqhdfq"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"cafelore.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"cafelore@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"cafelore.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"cafelore@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafelore.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc4003kph3m5cpbv24z"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"cafeloisl.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"cafeloisl@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"cafeloisl.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"cafeloisl@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafeloisl.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc5003lph3mdf49bj9j"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"cafedeadend.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"cafedeadend@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"cafedeadend.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"cafedeadend@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/cafedeadend.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc6003mph3m9gihb5ql"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"bourkestreetbakery.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"bourkestreetbakery@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"bourkestreetbakery.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"bourkestreetbakery@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/bourkestreetbakery.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhc9003nph3m1ww2bb7k"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"barrafina.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"barrafina@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"1x\",\n      \"filename\" : \"barrafina.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"2x\",\n      \"filename\" : \"barrafina@2x.jpg\"\n    },\n    {\n      \"idiom\" : \"universal\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/barrafina.imageset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcb003oph3mxe11qh13"},{"_content":"{\n  \"images\" : [\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"subtype\" : \"retina4\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/LaunchImage.launchimage/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"subtype\" : \"retina4\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-11T01:37:26.000Z","updated":"2015-09-11T01:37:26.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/LaunchImage.launchimage/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcb003pph3mn6eqg190"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/FoodPin/FoodPin/Images.xcassets/AppIcon.appiconset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-09-10T07:37:58.000Z","updated":"2015-09-10T07:37:58.000Z","path":"CodeSource/FoodPin/FoodPin/Images.xcassets/AppIcon.appiconset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcc003qph3mt8m0ztt2"},{"_content":"{\n  \"images\" : [\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"orientation\" : \"landscape\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"orientation\" : \"landscape\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/DownloadTask/DownloadTask/Images.xcassets/LaunchImage.launchimage/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"orientation\" : \"landscape\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"orientation\" : \"landscape\",\n      \"idiom\" : \"ipad\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-10-09T03:35:54.000Z","updated":"2014-02-05T07:08:21.000Z","path":"CodeSource/DownloadTask/DownloadTask/Images.xcassets/LaunchImage.launchimage/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcg003rph3mu4s2rd5m"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"76x76\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"76x76\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/DownloadTask/DownloadTask/Images.xcassets/AppIcon.appiconset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"76x76\",\n      \"scale\" : \"1x\"\n    },\n    {\n      \"idiom\" : \"ipad\",\n      \"size\" : \"76x76\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-10-09T03:35:54.000Z","updated":"2014-02-05T07:08:21.000Z","path":"CodeSource/DownloadTask/DownloadTask/Images.xcassets/AppIcon.appiconset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcg003sph3mokdlo4oj"},{"_content":"{\n  \"images\" : [\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"subtype\" : \"retina4\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Images.xcassets/LaunchImage.launchimage/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"orientation\" : \"portrait\",\n      \"idiom\" : \"iphone\",\n      \"subtype\" : \"retina4\",\n      \"extent\" : \"full-screen\",\n      \"minimum-system-version\" : \"7.0\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-08-31T07:29:51.000Z","updated":"2014-07-04T02:20:30.000Z","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Images.xcassets/LaunchImage.launchimage/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcm003tph3m7g0ntx43"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Images.xcassets/AppIcon.appiconset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-08-31T07:29:51.000Z","updated":"2014-07-04T02:20:30.000Z","path":"CodeSource/AsyncSocket/socket_tutorial/socket_tutorial/Images.xcassets/AppIcon.appiconset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcn003uph3msqj4n8cp"},{"_content":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","source":"CodeSource/AsyncSocket/SocketClient/SocketClient/Images.xcassets/AppIcon.appiconset/Contents.json","raw":"{\n  \"images\" : [\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"29x29\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"40x40\",\n      \"scale\" : \"3x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"2x\"\n    },\n    {\n      \"idiom\" : \"iphone\",\n      \"size\" : \"60x60\",\n      \"scale\" : \"3x\"\n    }\n  ],\n  \"info\" : {\n    \"version\" : 1,\n    \"author\" : \"xcode\"\n  }\n}","date":"2015-08-31T07:49:00.000Z","updated":"2015-08-31T07:49:00.000Z","path":"CodeSource/AsyncSocket/SocketClient/SocketClient/Images.xcassets/AppIcon.appiconset/Contents.json","layout":"false","title":"","comments":1,"_id":"cij9jnhcp003vph3mf9lt77tx"}],"Post":[{"title":"语录","date":"2015-07-08T12:10:07.000Z","_content":"\n标签（空格分隔）： 未分类\n\n---\n1. 以前喜欢一个人，现在喜欢一个人\n\n2. 快乐是属于成人的词儿。你不必问一个孩子他是否快乐，你能看得出来。成人讨论要快乐是因为他们大多不快乐\n\n3. 在有生的瞬间能遇到你竟花光所有运气到这日才发现曾呼吸过空气\n4. 你做了一件错事，就很难再让人记起你曾经的好\n5. 你的努力程度之低，根本轮不到拼天赋\n\n\n\n\n","source":"_posts/语录.markdown","raw":"# 语录\ntitle: 语录\ntags : [心情]\ndate: 2015-07-08 20:10:07\n---\n\n标签（空格分隔）： 未分类\n\n---\n1. 以前喜欢一个人，现在喜欢一个人\n\n2. 快乐是属于成人的词儿。你不必问一个孩子他是否快乐，你能看得出来。成人讨论要快乐是因为他们大多不快乐\n\n3. 在有生的瞬间能遇到你竟花光所有运气到这日才发现曾呼吸过空气\n4. 你做了一件错事，就很难再让人记起你曾经的好\n5. 你的努力程度之低，根本轮不到拼天赋\n\n\n\n\n","slug":"语录","published":1,"updated":"2015-11-19T10:00:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh880000ph3myp4hplf4"},{"title":"欢迎使用 Cmd Markdown 编辑阅读器","date":"2015-08-09T12:11:07.000Z","_content":"\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 快捷键\n帮助    `Ctrl + /`\n同步文档    `Ctrl + S`\n创建文档    `Ctrl + Alt + N`\n最大化编辑器    `Ctrl + Enter`\n预览文档 `Ctrl + Alt + Enter`\n文档管理    `Ctrl + O`\n系统菜单    `Ctrl + M` \n\n加粗    `Ctrl + B`\n插入图片    `Ctrl + G`\n插入链接    `Ctrl + L`\n提升标题    `Ctrl + H`\n\n### 11. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n\n\n","source":"_posts/欢迎使用 Cmd Markdown 编辑阅读器.markdown","raw":"# 欢迎使用 Cmd Markdown 编辑阅读器\ntitle: 欢迎使用 Cmd Markdown 编辑阅读器\ntags : [MarkDown]\ndate: 2015-08-09 20:11:07\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 快捷键\n帮助    `Ctrl + /`\n同步文档    `Ctrl + S`\n创建文档    `Ctrl + Alt + N`\n最大化编辑器    `Ctrl + Enter`\n预览文档 `Ctrl + Alt + Enter`\n文档管理    `Ctrl + O`\n系统菜单    `Ctrl + M` \n\n加粗    `Ctrl + B`\n插入图片    `Ctrl + G`\n插入链接    `Ctrl + L`\n提升标题    `Ctrl + H`\n\n### 11. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n\n\n","slug":"欢迎使用 Cmd Markdown 编辑阅读器","published":1,"updated":"2015-11-19T09:30:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8g0003ph3mbcfv595f"},{"title":"教你如何获取ios系统信息","date":"2015-12-10T03:50:07.000Z","_content":"\n教你如何获取ios系统信息\nNSString *deviceID  =  ［UIDevice currentDevice] uniqueIdentifier];//设备id\n// NSString *deviceID   =   ［UIApplication sharedApplication] uuid];\nNSString *systemVersion   =   ［UIDevice currentDevice] systemVersion];//系统版本\nNSString *systemModel    =   ［UIDevice currentDevice] model];//是iphone 还是 ipad\nNSDictionary *dic    =   ［NSBundle mainBundle] infoDictionary];//获取info－plist\nNSString *appName  =   [dic objectForKey:@\"CFBundleIdentifier\"];//获取Bundle identifier\nNSString *appVersion   =   [dic valueForKey:@\"CFBundleVersion\"];//获取Bundle Version    \nNSDictionary *userInfo = ［NSDictionary alloc] initWithObjectsAndKeys:\n    deviceID, @\"deviceID\",\n    systemVersion, @\"systemVersion\",\n    systemModel, @\"systemModel\",\n    appName, @\"appName\",\n    appVersion, @\"appVersion\",nil];\n","source":"_posts/教你如何获取ios系统信息.markdown","raw":"# 教你如何获取ios系统信息\ntitle: 教你如何获取ios系统信息\ntags : [IOS开发SDK]\ndate: 2015-12-10 11:50:07\n---\n\n教你如何获取ios系统信息\nNSString *deviceID  =  ［UIDevice currentDevice] uniqueIdentifier];//设备id\n// NSString *deviceID   =   ［UIApplication sharedApplication] uuid];\nNSString *systemVersion   =   ［UIDevice currentDevice] systemVersion];//系统版本\nNSString *systemModel    =   ［UIDevice currentDevice] model];//是iphone 还是 ipad\nNSDictionary *dic    =   ［NSBundle mainBundle] infoDictionary];//获取info－plist\nNSString *appName  =   [dic objectForKey:@\"CFBundleIdentifier\"];//获取Bundle identifier\nNSString *appVersion   =   [dic valueForKey:@\"CFBundleVersion\"];//获取Bundle Version    \nNSDictionary *userInfo = ［NSDictionary alloc] initWithObjectsAndKeys:\n    deviceID, @\"deviceID\",\n    systemVersion, @\"systemVersion\",\n    systemModel, @\"systemModel\",\n    appName, @\"appName\",\n    appVersion, @\"appVersion\",nil];\n","slug":"教你如何获取ios系统信息","published":1,"updated":"2015-12-10T01:04:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8i0006ph3m2sff5uhg"},{"title":"开源库总结","date":"2015-09-08T12:10:07.000Z","_content":"\n# 开源库总结:\nDOUAudioStreamer(豆瓣音乐)  https://github.com/douban/DOUAudioStreamer\nABlurImgeView(毛玻璃效果) https://github.com/DexSinis/BlurView\n\n\n\n\n\n","source":"_posts/开源库总结.markdown","raw":"# 开源库总结\ntitle: 开源库总结\ntags : [IOS开源项目]\ndate: 2015-09-08 20:10:07\n---\n\n# 开源库总结:\nDOUAudioStreamer(豆瓣音乐)  https://github.com/douban/DOUAudioStreamer\nABlurImgeView(毛玻璃效果) https://github.com/DexSinis/BlurView\n\n\n\n\n\n","slug":"开源库总结","published":1,"updated":"2015-09-09T03:19:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8j0009ph3myua5muh5"},{"title":"常用命令总结","date":"2015-10-06T09:10:07.000Z","_content":"\n\npo [self.view recursiveDescription];\n\npod install --verbose --no-repo-update\npod update --verbose --no-repo-update","source":"_posts/常用命令总结.markdown","raw":"# 常用命令总结\ntitle: 常用命令总结\ntags : [命令行]\ndate: 2015-10-06 17:10:07\n---\n\n\npo [self.view recursiveDescription];\n\npod install --verbose --no-repo-update\npod update --verbose --no-repo-update","slug":"常用命令总结","published":1,"updated":"2015-10-06T09:26:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8l000cph3m6mryukxp"},{"title":"text","date":"2016-01-07T03:50:07.000Z","_content":"\n标签（空格分隔）： 未分类\n\n---\ntitle: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07\n\n\n\n\n","source":"_posts/textsadasd.markdown","raw":"# textsadasd\ntitle: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07\n---\n\n标签（空格分隔）： 未分类\n\n---\ntitle: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07title: text\ntags : [IOS开发SDK]\ndate: 2016-1-7 11:50:07\n\n\n\n\n","slug":"textsadasd","published":1,"updated":"2016-01-08T16:51:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8n000fph3mpcczt4rn"},{"title":"markdown学习小tips","date":"2015-08-08T09:10:07.000Z","_content":"## 1. 标题设置（让字体变大，和word的标题意思一样）\n\n在Markdown当中设置标题，有两种方式：\n第一种：通过在文字下方添加\"=\"和\"-\"，他们分别表示一级标题和二级标题。\n第二种：在文字开头加上 \"#\"，通过\"#\"数量表示几级标题。（一共只有1-6级标题，1级标题字体最大）\n\n### 这是三级级标题\n\t###这是三级标题\n#### 这是四级标题\n\t####这是四级级标题\n\n## 2. 块注释（blockquote）\n\n通过在文字开头添加\">\"表示块注释。（当>和文字之间添加五个blank时，块注释的文字会有变化。）\n\n\t> 注释块一\n\t>> 注释块二\n\t>>> 注释块3\n\t>>>> 注释块4\n\n> 注释块一\n>> 注释块二\n>>> 注释块3\n>>>> 注释块4\n\n## 3. 斜体\n\n将需要设置为斜体的文字两端使用1个\"\\*\"或者\"\\_\"夹起来\n\n*将需要设置为斜体的文字两端使用1个星星*\n\n_将需要设置为斜体的文字两端使用1个杠杠_\n\n## 4. 粗体\n\n将需要设置为斜体的文字两端使用2个\"\\*\"或者\"\\_\"夹起来\n\n**将需要设置为斜体的文字两端使用星星**\n\n__将需要设置为斜体的文字两端使用杠杠__\n\n## 5. 无序列表\n\n在文字开头添加(*, +, and -)实现无序列表。但是要注意在(*, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）\n* 无序列表1\n* 无序列表2\n* 无序列表3\n\n## 6. 有序列表\n\n使用数字后面跟上句号。（还要有空格）\n\n1. 有序列表1\n\n2. 有序列表2\n\n3. 有序列表3\n\n## 7. 链接（Links）\nMarkdown中有两种方式，实现链接，分别为内联方式和引用方式。\n内联方式：This is an [example link](http://example.com/).\n引用方式：\nI get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].  \n\n[1]: http://google.com/        \"Google\" \n[2]: http://search.yahoo.com/  \"Yahoo Search\" \n[3]: http://search.msn.com/    \"MSN Search\"\n\n```bash\n内联方式：This is an [example link](http://example.com/).\n引用方式：\nI get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].  \n\n[1]: http://google.com/        \"Google\" \n[2]: http://search.yahoo.com/  \"Yahoo Search\" \n[3]: http://search.msn.com/    \"MSN Search\"\n```\n\n\n## 8. 图片（Images）\n图片的处理方式和链接的处理方式，非常的类似。\n内联方式：![alt text](/img/authorLogo.png \"Title\")\n引用方式：\n![alt text][id] \n\n[id]: /img/authorLogo.png \"Title\"\n\n```bash\n图片的处理方式和链接的处理方式，非常的类似。\n内联方式：![alt text](/img/authorLogo.png \"Title\")\n引用方式：\n![alt text][id] \n\n[id]: /img/authorLogo.png \"Title\"\n```\n\n## 9. 代码（HTML中所谓的Code）\n实现方式有两种：\n第一种：简单文字出现一个代码框。使用`<blockquote>`。（`不是单引号而是左上角的ESC下面~中的`）\n第二种：大片文字需要实现代码框。使用Tab和四个空格。\n\n## 10. 脚注（footnote）\n实现方式如下：\nhello[^hello]\n\n\n[^hello]: hi\n\n## 11. 下划线\n在空白行下方添加三条\"-\"横线。（前面讲过在文字下方添加\"-\"，实现的2级标题）\n\nReferences： \n\n以上内容根据官方文档基本文档进行整理。http://daringfireball.net/projects/markdown/basics\nMarkdown官方网站：http://daringfireball.net/projects/markdown/ \n\n推荐一款在线的Markdown编辑器：https://stackedit.io/ \n\n","source":"_posts/markdown学习小tips.markdown","raw":"# markdown学习小tips\ntitle: markdown学习小tips\ntags : [MarkDown]\ndate: 2015-08-08 17:10:07\n---\n## 1. 标题设置（让字体变大，和word的标题意思一样）\n\n在Markdown当中设置标题，有两种方式：\n第一种：通过在文字下方添加\"=\"和\"-\"，他们分别表示一级标题和二级标题。\n第二种：在文字开头加上 \"#\"，通过\"#\"数量表示几级标题。（一共只有1-6级标题，1级标题字体最大）\n\n### 这是三级级标题\n\t###这是三级标题\n#### 这是四级标题\n\t####这是四级级标题\n\n## 2. 块注释（blockquote）\n\n通过在文字开头添加\">\"表示块注释。（当>和文字之间添加五个blank时，块注释的文字会有变化。）\n\n\t> 注释块一\n\t>> 注释块二\n\t>>> 注释块3\n\t>>>> 注释块4\n\n> 注释块一\n>> 注释块二\n>>> 注释块3\n>>>> 注释块4\n\n## 3. 斜体\n\n将需要设置为斜体的文字两端使用1个\"\\*\"或者\"\\_\"夹起来\n\n*将需要设置为斜体的文字两端使用1个星星*\n\n_将需要设置为斜体的文字两端使用1个杠杠_\n\n## 4. 粗体\n\n将需要设置为斜体的文字两端使用2个\"\\*\"或者\"\\_\"夹起来\n\n**将需要设置为斜体的文字两端使用星星**\n\n__将需要设置为斜体的文字两端使用杠杠__\n\n## 5. 无序列表\n\n在文字开头添加(*, +, and -)实现无序列表。但是要注意在(*, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）\n* 无序列表1\n* 无序列表2\n* 无序列表3\n\n## 6. 有序列表\n\n使用数字后面跟上句号。（还要有空格）\n\n1. 有序列表1\n\n2. 有序列表2\n\n3. 有序列表3\n\n## 7. 链接（Links）\nMarkdown中有两种方式，实现链接，分别为内联方式和引用方式。\n内联方式：This is an [example link](http://example.com/).\n引用方式：\nI get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].  \n\n[1]: http://google.com/        \"Google\" \n[2]: http://search.yahoo.com/  \"Yahoo Search\" \n[3]: http://search.msn.com/    \"MSN Search\"\n\n```bash\n内联方式：This is an [example link](http://example.com/).\n引用方式：\nI get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].  \n\n[1]: http://google.com/        \"Google\" \n[2]: http://search.yahoo.com/  \"Yahoo Search\" \n[3]: http://search.msn.com/    \"MSN Search\"\n```\n\n\n## 8. 图片（Images）\n图片的处理方式和链接的处理方式，非常的类似。\n内联方式：![alt text](/img/authorLogo.png \"Title\")\n引用方式：\n![alt text][id] \n\n[id]: /img/authorLogo.png \"Title\"\n\n```bash\n图片的处理方式和链接的处理方式，非常的类似。\n内联方式：![alt text](/img/authorLogo.png \"Title\")\n引用方式：\n![alt text][id] \n\n[id]: /img/authorLogo.png \"Title\"\n```\n\n## 9. 代码（HTML中所谓的Code）\n实现方式有两种：\n第一种：简单文字出现一个代码框。使用`<blockquote>`。（`不是单引号而是左上角的ESC下面~中的`）\n第二种：大片文字需要实现代码框。使用Tab和四个空格。\n\n## 10. 脚注（footnote）\n实现方式如下：\nhello[^hello]\n\n\n[^hello]: hi\n\n## 11. 下划线\n在空白行下方添加三条\"-\"横线。（前面讲过在文字下方添加\"-\"，实现的2级标题）\n\nReferences： \n\n以上内容根据官方文档基本文档进行整理。http://daringfireball.net/projects/markdown/basics\nMarkdown官方网站：http://daringfireball.net/projects/markdown/ \n\n推荐一款在线的Markdown编辑器：https://stackedit.io/ \n\n","slug":"markdown学习小tips","published":1,"updated":"2015-11-19T09:30:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8o000hph3mitxbih3l"},{"_content":"<h3>Some HTML</h3>\n\n<p>Hello world! 本网站是一个在线的工具集合，域名为org域名，翻译为“一个工具”（a tool）.</p>\n<p>aTool主要包含有以下的功能：</p>\n<hr />\n\n<ol>\n  <li>在线多媒体处理工具</li>\n  <li>在线站长工具</li>\n  <li>在线代码转换工具</li>\n  <li>在线便民工具</li>\n  <li>在线小游戏</li>\n</ol>\n<hr />\n<p>更多工具，To be continue...</p>","source":"_posts/markdown.md","raw":"<h3>Some HTML</h3>\n\n<p>Hello world! 本网站是一个在线的工具集合，域名为org域名，翻译为“一个工具”（a tool）.</p>\n<p>aTool主要包含有以下的功能：</p>\n<hr />\n\n<ol>\n  <li>在线多媒体处理工具</li>\n  <li>在线站长工具</li>\n  <li>在线代码转换工具</li>\n  <li>在线便民工具</li>\n  <li>在线小游戏</li>\n</ol>\n<hr />\n<p>更多工具，To be continue...</p>","slug":"markdown","published":1,"date":"2015-10-29T03:37:37.000Z","updated":"2015-10-29T03:37:37.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8q000jph3mtj9v8jwk"},{"title":"koa简单使用","date":"2015-11-08T09:10:07.000Z","_content":"**简书**\nhttp://www.jianshu.com/p/01796348328a\n\n\n\n\n","source":"_posts/koa简单使用.markdown","raw":"# koa简单使用\ntitle: koa简单使用\ntags : [Node]\ndate: 2015-11-08 17:10:07\n---\n**简书**\nhttp://www.jianshu.com/p/01796348328a\n\n\n\n\n","slug":"koa简单使用","published":1,"updated":"2015-11-19T09:32:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8s000kph3ms4l13pwz"},{"title":"init初始化简单实用","date":"2015-09-16T09:50:07.000Z","_content":"\n##sinitWithFrame  和   initWithCoder\n\n**当我们所写的程序里没用用Nib文件(XIB)时,用代码控制视图内容，需要调用initWithFrame去初始化**\n```python\n- (id)initWithFrame:(CGRect)frame\n{\n    if (self =[superinitWithFrame:frame]) {\n        // 初始化代码\n    }\n    return self;\n}\n```\n\n**用于视图加载nib文件，从nib中加载对象实例时，使用 initWithCoder初始化这些实例对象**\n```python\n- (id)initWithCoder:(NSCoder*)coder\n{\n    if (self =[superinitWithcoder:coder]) {\n        // 初始化代码\n    }\n    return self;\n}\n```\n**Assuming you have storyboard, go to storyboard and give your VC an identifier (inspector), then do:**\n\n```python\nUIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"MainStoryboard\" bundle:nil]; UIViewController *vc = [storyboard instantiateViewControllerWithIdentifier:@\"IDENTIFIER\"]; [self.navigationController pushViewController:vc animated:YES];\n```\n**Assuming you have a xib file you want to do:**\n```python\nUIViewController *vc = [[UIViewController alloc] initWithNibName:@\"NIBNAME\" bundle:nil]; [self.navigationController pushViewController:vc animated:YES];\n```\n**Without a xib file:**\n\n```python\nUIViewController *vc = [[UIViewController alloc] init]; [self.navigationController pushViewController:vc animated:YES];\n```\n**从xib中加载UIview**\n```python\n  NSArray *niblets = [[NSBundle mainBundle] loadNibNamed:@\"sample\" owner:self options:NULL];\nfor (id theObject in niblets)\n    {\n        if ([theObject isKindOfClass:[UIViewController class]])\n            [self.navigationController pushViewController:theObject animated:YES];\n    }\n```\n\n\n\n","source":"_posts/init初始化简单实用.markdown","raw":"# init初始化简单实用\ntitle: init初始化简单实用\ntags : [IOS开发SDK]\ndate: 2015-09-16 17:50:07\n---\n\n##sinitWithFrame  和   initWithCoder\n\n**当我们所写的程序里没用用Nib文件(XIB)时,用代码控制视图内容，需要调用initWithFrame去初始化**\n```python\n- (id)initWithFrame:(CGRect)frame\n{\n    if (self =[superinitWithFrame:frame]) {\n        // 初始化代码\n    }\n    return self;\n}\n```\n\n**用于视图加载nib文件，从nib中加载对象实例时，使用 initWithCoder初始化这些实例对象**\n```python\n- (id)initWithCoder:(NSCoder*)coder\n{\n    if (self =[superinitWithcoder:coder]) {\n        // 初始化代码\n    }\n    return self;\n}\n```\n**Assuming you have storyboard, go to storyboard and give your VC an identifier (inspector), then do:**\n\n```python\nUIStoryboard *storyboard = [UIStoryboard storyboardWithName:@\"MainStoryboard\" bundle:nil]; UIViewController *vc = [storyboard instantiateViewControllerWithIdentifier:@\"IDENTIFIER\"]; [self.navigationController pushViewController:vc animated:YES];\n```\n**Assuming you have a xib file you want to do:**\n```python\nUIViewController *vc = [[UIViewController alloc] initWithNibName:@\"NIBNAME\" bundle:nil]; [self.navigationController pushViewController:vc animated:YES];\n```\n**Without a xib file:**\n\n```python\nUIViewController *vc = [[UIViewController alloc] init]; [self.navigationController pushViewController:vc animated:YES];\n```\n**从xib中加载UIview**\n```python\n  NSArray *niblets = [[NSBundle mainBundle] loadNibNamed:@\"sample\" owner:self options:NULL];\nfor (id theObject in niblets)\n    {\n        if ([theObject isKindOfClass:[UIViewController class]])\n            [self.navigationController pushViewController:theObject animated:YES];\n    }\n```\n\n\n\n","slug":"init初始化简单实用","published":1,"updated":"2015-09-16T06:36:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8t000nph3m6vkwaqpu"},{"title":"hexo博客搭建","date":"2015-08-10T09:10:07.000Z","_content":"\n##  git配置\n```bash\ncd ~/.ssh\nmkdir key_backup\ncp id_rsa* key_backup\nrm id_rsa*\nssh-keygen -t rsa -C \"dexsinis@gmail.com\"\n\n(多账号配置 gitlab与github) 新建打开config文件\nHost git.meiriq.com\n    HostName git.meiriq.com\n    IdentityFile ~/.ssh/id_rsa_work\nHost github.com\n    HostName github.com\n    IdentityFile ~/.ssh/id_rsa\n\n(添加远程库)\ngit config --global user.name \"DexSinis\" \ngit config --global user.email \"dexinis343731621@gmail.com\"\n(进入你想上传的文件夹)\ngit init\ntouch README.md\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:DexSinis/DexSinis.github.io.git\ngit push -u origin master\n\n(从远程库克隆)\ngit clone git@github.com:DexSinis/DexSinis.github.io.git\n\n```\n**git基本常用命令** (http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n```bash\ngit checkout -b topic (开始一个分支) == (git branch topic 加 git checkout topic)\ngit branch (查看分支)\ngit checkout master (回到主分支)\ngit merge topic (合并分支)\ngit branch -d topic (删除分支)\n\n\n\ngit flog (查看当前的历史版本)\ngit reflog (查看所有的历史的版本)\n\n\n\ngit reset --hard commit_id (前进或者回退到特定的版本号)\n```\n\n\n##  hexo 配置\n\n\n基本配置(hexo官网) https://hexo.io/zh-cn/docs/ **(必须看懂搭建好才进行下一步)**\n主要修改文件 _config.yml\n```bash\ndeploy:\n  type: git\n  repository: git@github.com:DexSinis/DexSinis.github.io.git\n  branch: master\n```\n\n**主题修改**\n/themes/lascape/_config.yml\n推荐：http://www.zhihu.com/question/24422335\n\n集成多说样式(/themes/lascape/_config.yml中的duoshuo_shortname:)\n/Users/a000/IDE/Blog/themes/landscape-plus/layout/_partial/head.ejs\n```bash\n<head>\n  <meta charset=\"utf-8\">\n    <script type=\"text/javascript\">\n  var duoshuoQuery = {short_name:\"<%= theme.duoshuo_shortname %>\"};\n  (function() {\n    var ds = document.createElement('script');\n    ds.type = 'text/javascript';ds.async = true;\n    ds.src = '//dexsinister.github.io/js/embed.js';\n    ds.charset = 'UTF-8';\n    (document.getElementsByTagName('head')[0]\n    || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n</script>\n```\n**多说样式配置(可省略)**\n进入 (http://duoshuo.com/) 后台管理-->设置-->自定义CSS\n```bash\n/*多说UA开始*/\nspan.ua{\n\tmargin: 0 1px!important;\n\tcolor:#FFFFFF!important;\n\t/*text-transform: Capitalize!important;\n\tfloat: right!important;\n\tline-height: 18px!important;*/\n}\n.ua_other.os_other{\n\tbackground-color: #ccc!important;\n\tcolor: #fff;\n\tborder: 1px solid #BBB!important;\n\tborder-radius: 4px;\n}\n.ua_ie{\n\tbackground-color: #428bca!important;\n\tborder-color: #357ebd!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_firefox{\n\tbackground-color: #f0ad4e!important;\n\tborder-color: #eea236!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_maxthon{\n\tbackground-color: #7373B9!important;\n\tborder-color: #7373B9!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_ucweb{\n\tbackground-color: #FF740F!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_sogou{\n\tbackground-color: #78ACE9!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345explorer{\n\tbackground-color: #2478B8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345chrome{\n\tbackground-color: #F9D024!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_mi{\n\tbackground-color: #FF4A00!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_lbbrowser{\n\tbackground-color: #FC9D2E!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_chrome{\n\tbackground-color: #EE6252!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_qq{\n\tbackground-color: #3D88A8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_apple{\n\tbackground-color: #E95620!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_opera{\n\tbackground-color: #d9534f!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n \n.os_vista,.os_2000,.os_windows,.os_xp,.os_7,.os_8,.os_8_1 {\n\tbackground-color: #39b3d7!important;\n\tborder-color: #46b8da!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n.os_android {\n\tbackground-color: #98C13D!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_ubuntu{\n\tbackground-color: #DD4814!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_linux {\n\tbackground-color: #3A3A3A!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_mac{\n\tbackground-color: #666666!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_unix{\n\tbackground-color: #006600!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_nokia{\n\tbackground-color: #014485!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.sskadmin{\nbackground-color: #00a67c!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n \n}\n/*多说UA结束*/\n```\n\n\n**集成谷歌分析(/themes/lascape/_config.yml中的google_analytics:)**\n```bash\n<!-- Google Analytics -->\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', '<%= theme.google_analytics %>', 'auto');\nga('send', 'pageview');\n</script>\n```\n\n\n##  markdown 编辑器推荐\n\n  Ulysses\n  飞象markdown\n  cmdmarkdown\n  \n  \n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/hexo博客搭建.markdown","raw":"# hexo博客搭建\ntitle: hexo博客搭建\ntags : [MarkDown]\ndate: 2015-08-10 17:10:07\n---\n\n##  git配置\n```bash\ncd ~/.ssh\nmkdir key_backup\ncp id_rsa* key_backup\nrm id_rsa*\nssh-keygen -t rsa -C \"dexsinis@gmail.com\"\n\n(多账号配置 gitlab与github) 新建打开config文件\nHost git.meiriq.com\n    HostName git.meiriq.com\n    IdentityFile ~/.ssh/id_rsa_work\nHost github.com\n    HostName github.com\n    IdentityFile ~/.ssh/id_rsa\n\n(添加远程库)\ngit config --global user.name \"DexSinis\" \ngit config --global user.email \"dexinis343731621@gmail.com\"\n(进入你想上传的文件夹)\ngit init\ntouch README.md\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:DexSinis/DexSinis.github.io.git\ngit push -u origin master\n\n(从远程库克隆)\ngit clone git@github.com:DexSinis/DexSinis.github.io.git\n\n```\n**git基本常用命令** (http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n```bash\ngit checkout -b topic (开始一个分支) == (git branch topic 加 git checkout topic)\ngit branch (查看分支)\ngit checkout master (回到主分支)\ngit merge topic (合并分支)\ngit branch -d topic (删除分支)\n\n\n\ngit flog (查看当前的历史版本)\ngit reflog (查看所有的历史的版本)\n\n\n\ngit reset --hard commit_id (前进或者回退到特定的版本号)\n```\n\n\n##  hexo 配置\n\n\n基本配置(hexo官网) https://hexo.io/zh-cn/docs/ **(必须看懂搭建好才进行下一步)**\n主要修改文件 _config.yml\n```bash\ndeploy:\n  type: git\n  repository: git@github.com:DexSinis/DexSinis.github.io.git\n  branch: master\n```\n\n**主题修改**\n/themes/lascape/_config.yml\n推荐：http://www.zhihu.com/question/24422335\n\n集成多说样式(/themes/lascape/_config.yml中的duoshuo_shortname:)\n/Users/a000/IDE/Blog/themes/landscape-plus/layout/_partial/head.ejs\n```bash\n<head>\n  <meta charset=\"utf-8\">\n    <script type=\"text/javascript\">\n  var duoshuoQuery = {short_name:\"<%= theme.duoshuo_shortname %>\"};\n  (function() {\n    var ds = document.createElement('script');\n    ds.type = 'text/javascript';ds.async = true;\n    ds.src = '//dexsinister.github.io/js/embed.js';\n    ds.charset = 'UTF-8';\n    (document.getElementsByTagName('head')[0]\n    || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n</script>\n```\n**多说样式配置(可省略)**\n进入 (http://duoshuo.com/) 后台管理-->设置-->自定义CSS\n```bash\n/*多说UA开始*/\nspan.ua{\n\tmargin: 0 1px!important;\n\tcolor:#FFFFFF!important;\n\t/*text-transform: Capitalize!important;\n\tfloat: right!important;\n\tline-height: 18px!important;*/\n}\n.ua_other.os_other{\n\tbackground-color: #ccc!important;\n\tcolor: #fff;\n\tborder: 1px solid #BBB!important;\n\tborder-radius: 4px;\n}\n.ua_ie{\n\tbackground-color: #428bca!important;\n\tborder-color: #357ebd!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_firefox{\n\tbackground-color: #f0ad4e!important;\n\tborder-color: #eea236!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_maxthon{\n\tbackground-color: #7373B9!important;\n\tborder-color: #7373B9!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_ucweb{\n\tbackground-color: #FF740F!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_sogou{\n\tbackground-color: #78ACE9!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345explorer{\n\tbackground-color: #2478B8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345chrome{\n\tbackground-color: #F9D024!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_mi{\n\tbackground-color: #FF4A00!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_lbbrowser{\n\tbackground-color: #FC9D2E!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_chrome{\n\tbackground-color: #EE6252!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_qq{\n\tbackground-color: #3D88A8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_apple{\n\tbackground-color: #E95620!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_opera{\n\tbackground-color: #d9534f!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n \n.os_vista,.os_2000,.os_windows,.os_xp,.os_7,.os_8,.os_8_1 {\n\tbackground-color: #39b3d7!important;\n\tborder-color: #46b8da!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n.os_android {\n\tbackground-color: #98C13D!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_ubuntu{\n\tbackground-color: #DD4814!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_linux {\n\tbackground-color: #3A3A3A!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_mac{\n\tbackground-color: #666666!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_unix{\n\tbackground-color: #006600!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_nokia{\n\tbackground-color: #014485!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.sskadmin{\nbackground-color: #00a67c!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n \n}\n/*多说UA结束*/\n```\n\n\n**集成谷歌分析(/themes/lascape/_config.yml中的google_analytics:)**\n```bash\n<!-- Google Analytics -->\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', '<%= theme.google_analytics %>', 'auto');\nga('send', 'pageview');\n</script>\n```\n\n\n##  markdown 编辑器推荐\n\n  Ulysses\n  飞象markdown\n  cmdmarkdown\n  \n  \n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n","slug":"hexo博客搭建","published":1,"updated":"2015-11-19T09:30:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8v000pph3mpi01at7j"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n","slug":"hello-world","published":1,"date":"2015-10-29T03:37:33.000Z","updated":"2015-10-29T03:37:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh8y000rph3m41wpxp8m"},{"title":"git的简单使用和hexo博客搭建","date":"2015-08-10T09:10:07.000Z","_content":"\n##  git配置\n```bash\ncd ~/.ssh\nmkdir key_backup\ncp id_rsa* key_backup\nrm id_rsa*\nssh-keygen -t rsa -C \"dexsinis@gmail.com\"\n\n(多账号配置 gitlab与github) 新建打开config文件\nHost git.meiriq.com\n    HostName git.meiriq.com\n    IdentityFile ~/.ssh/id_rsa_work\nHost github.com\n    HostName github.com\n    IdentityFile ~/.ssh/id_rsa\n\n(添加远程库)\ngit config --global user.name \"DexSinis\" \ngit config --global user.email \"dexinis343731621@gmail.com\"\n(进入你想上传的文件夹)\ngit init\ntouch README.md\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:DexSinis/DexSinis.github.io.git\ngit push -u origin master\n\n(从远程库克隆)\ngit clone git@github.com:DexSinis/DexSinis.github.io.git\n\n```\n**git基本常用命令** (http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n```bash\ngit checkout -b topic (开始一个分支) == (git branch topic 加 git checkout topic)\ngit branch (查看分支)\ngit checkout master (回到主分支)\ngit merge topic (合并分支)\ngit branch -d topic (删除分支)\n\n\n\ngit flog (查看当前的历史版本)\ngit reflog (查看所有的历史的版本)\n\n\n\ngit reset --hard commit_id (前进或者回退到特定的版本号)\n```\n\n\n##  hexo 配置\n\n\n基本配置(hexo官网) https://hexo.io/zh-cn/docs/ **(必须看懂搭建好才进行下一步)**\n主要修改文件 _config.yml\n```bash\ndeploy:\n  type: git\n  repository: git@github.com:DexSinis/DexSinis.github.io.git\n  branch: master\n```\n\n**主题修改**\n/themes/lascape/_config.yml\n推荐：http://www.zhihu.com/question/24422335\n\n集成多说样式(/themes/lascape/_config.yml中的duoshuo_shortname:)\n/Users/a000/IDE/Blog/themes/landscape-plus/layout/_partial/head.ejs\n```bash\n<head>\n  <meta charset=\"utf-8\">\n    <script type=\"text/javascript\">\n  var duoshuoQuery = {short_name:\"<%= theme.duoshuo_shortname %>\"};\n  (function() {\n    var ds = document.createElement('script');\n    ds.type = 'text/javascript';ds.async = true;\n    ds.src = '//dexsinister.github.io/js/embed.js';\n    ds.charset = 'UTF-8';\n    (document.getElementsByTagName('head')[0]\n    || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n</script>\n```\n**多说样式配置(可省略)**\n进入 (http://duoshuo.com/) 后台管理-->设置-->自定义CSS\n```bash\n/*多说UA开始*/\nspan.ua{\n\tmargin: 0 1px!important;\n\tcolor:#FFFFFF!important;\n\t/*text-transform: Capitalize!important;\n\tfloat: right!important;\n\tline-height: 18px!important;*/\n}\n.ua_other.os_other{\n\tbackground-color: #ccc!important;\n\tcolor: #fff;\n\tborder: 1px solid #BBB!important;\n\tborder-radius: 4px;\n}\n.ua_ie{\n\tbackground-color: #428bca!important;\n\tborder-color: #357ebd!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_firefox{\n\tbackground-color: #f0ad4e!important;\n\tborder-color: #eea236!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_maxthon{\n\tbackground-color: #7373B9!important;\n\tborder-color: #7373B9!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_ucweb{\n\tbackground-color: #FF740F!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_sogou{\n\tbackground-color: #78ACE9!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345explorer{\n\tbackground-color: #2478B8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345chrome{\n\tbackground-color: #F9D024!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_mi{\n\tbackground-color: #FF4A00!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_lbbrowser{\n\tbackground-color: #FC9D2E!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_chrome{\n\tbackground-color: #EE6252!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_qq{\n\tbackground-color: #3D88A8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_apple{\n\tbackground-color: #E95620!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_opera{\n\tbackground-color: #d9534f!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n \n.os_vista,.os_2000,.os_windows,.os_xp,.os_7,.os_8,.os_8_1 {\n\tbackground-color: #39b3d7!important;\n\tborder-color: #46b8da!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n.os_android {\n\tbackground-color: #98C13D!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_ubuntu{\n\tbackground-color: #DD4814!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_linux {\n\tbackground-color: #3A3A3A!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_mac{\n\tbackground-color: #666666!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_unix{\n\tbackground-color: #006600!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_nokia{\n\tbackground-color: #014485!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.sskadmin{\nbackground-color: #00a67c!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n \n}\n/*多说UA结束*/\n```\n\n\n**集成谷歌分析(/themes/lascape/_config.yml中的google_analytics:)**\n```bash\n<!-- Google Analytics -->\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', '<%= theme.google_analytics %>', 'auto');\nga('send', 'pageview');\n</script>\n```\n\n\n##  markdown 编辑器推荐\n\n  Ulysses\n  飞象markdown\n  cmdmarkdown\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/git的简单使用和hexo博客搭建.markdown","raw":"# git的简单使用和hexo博客搭建\ntitle: git的简单使用和hexo博客搭建\ntags : [nodejs,git,markdown]\ndate: 2015-08-10 17:10:07\n---\n\n##  git配置\n```bash\ncd ~/.ssh\nmkdir key_backup\ncp id_rsa* key_backup\nrm id_rsa*\nssh-keygen -t rsa -C \"dexsinis@gmail.com\"\n\n(多账号配置 gitlab与github) 新建打开config文件\nHost git.meiriq.com\n    HostName git.meiriq.com\n    IdentityFile ~/.ssh/id_rsa_work\nHost github.com\n    HostName github.com\n    IdentityFile ~/.ssh/id_rsa\n\n(添加远程库)\ngit config --global user.name \"DexSinis\" \ngit config --global user.email \"dexinis343731621@gmail.com\"\n(进入你想上传的文件夹)\ngit init\ntouch README.md\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:DexSinis/DexSinis.github.io.git\ngit push -u origin master\n\n(从远程库克隆)\ngit clone git@github.com:DexSinis/DexSinis.github.io.git\n\n```\n**git基本常用命令** (http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n```bash\ngit checkout -b topic (开始一个分支) == (git branch topic 加 git checkout topic)\ngit branch (查看分支)\ngit checkout master (回到主分支)\ngit merge topic (合并分支)\ngit branch -d topic (删除分支)\n\n\n\ngit flog (查看当前的历史版本)\ngit reflog (查看所有的历史的版本)\n\n\n\ngit reset --hard commit_id (前进或者回退到特定的版本号)\n```\n\n\n##  hexo 配置\n\n\n基本配置(hexo官网) https://hexo.io/zh-cn/docs/ **(必须看懂搭建好才进行下一步)**\n主要修改文件 _config.yml\n```bash\ndeploy:\n  type: git\n  repository: git@github.com:DexSinis/DexSinis.github.io.git\n  branch: master\n```\n\n**主题修改**\n/themes/lascape/_config.yml\n推荐：http://www.zhihu.com/question/24422335\n\n集成多说样式(/themes/lascape/_config.yml中的duoshuo_shortname:)\n/Users/a000/IDE/Blog/themes/landscape-plus/layout/_partial/head.ejs\n```bash\n<head>\n  <meta charset=\"utf-8\">\n    <script type=\"text/javascript\">\n  var duoshuoQuery = {short_name:\"<%= theme.duoshuo_shortname %>\"};\n  (function() {\n    var ds = document.createElement('script');\n    ds.type = 'text/javascript';ds.async = true;\n    ds.src = '//dexsinister.github.io/js/embed.js';\n    ds.charset = 'UTF-8';\n    (document.getElementsByTagName('head')[0]\n    || document.getElementsByTagName('body')[0]).appendChild(ds);\n  })();\n</script>\n```\n**多说样式配置(可省略)**\n进入 (http://duoshuo.com/) 后台管理-->设置-->自定义CSS\n```bash\n/*多说UA开始*/\nspan.ua{\n\tmargin: 0 1px!important;\n\tcolor:#FFFFFF!important;\n\t/*text-transform: Capitalize!important;\n\tfloat: right!important;\n\tline-height: 18px!important;*/\n}\n.ua_other.os_other{\n\tbackground-color: #ccc!important;\n\tcolor: #fff;\n\tborder: 1px solid #BBB!important;\n\tborder-radius: 4px;\n}\n.ua_ie{\n\tbackground-color: #428bca!important;\n\tborder-color: #357ebd!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_firefox{\n\tbackground-color: #f0ad4e!important;\n\tborder-color: #eea236!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_maxthon{\n\tbackground-color: #7373B9!important;\n\tborder-color: #7373B9!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_ucweb{\n\tbackground-color: #FF740F!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_sogou{\n\tbackground-color: #78ACE9!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345explorer{\n\tbackground-color: #2478B8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_2345chrome{\n\tbackground-color: #F9D024!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_mi{\n\tbackground-color: #FF4A00!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_lbbrowser{\n\tbackground-color: #FC9D2E!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_chrome{\n\tbackground-color: #EE6252!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_qq{\n\tbackground-color: #3D88A8!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_apple{\n\tbackground-color: #E95620!important;\n\tborder-color: #4cae4c!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.ua_opera{\n\tbackground-color: #d9534f!important;\n\tborder-color: #d43f3a!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n \n.os_vista,.os_2000,.os_windows,.os_xp,.os_7,.os_8,.os_8_1 {\n\tbackground-color: #39b3d7!important;\n\tborder-color: #46b8da!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n \n.os_android {\n\tbackground-color: #98C13D!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_ubuntu{\n\tbackground-color: #DD4814!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_linux {\n\tbackground-color: #3A3A3A!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_mac{\n\tbackground-color: #666666!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_unix{\n\tbackground-color: #006600!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.os_nokia{\n\tbackground-color: #014485!important;\n\tborder-color: #1F1F1F!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n}\n.sskadmin{\nbackground-color: #00a67c!important;\n\tborder-color: #01B171!important;\n\tborder-radius: 4px;\n\tpadding: 0 5px!important;\n \n}\n/*多说UA结束*/\n```\n\n\n**集成谷歌分析(/themes/lascape/_config.yml中的google_analytics:)**\n```bash\n<!-- Google Analytics -->\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', '<%= theme.google_analytics %>', 'auto');\nga('send', 'pageview');\n</script>\n```\n\n\n##  markdown 编辑器推荐\n\n  Ulysses\n  飞象markdown\n  cmdmarkdown\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n","slug":"git的简单使用和hexo博客搭建","published":1,"updated":"2015-09-10T02:55:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh90000sph3me8lzjdx5"},{"title":"exports 和 module.exports 的区别","date":"2015-11-08T09:30:07.000Z","_content":"\nexports 和 module.exports 的区别\n 发布于 2年前  作者 nswbmw  12877 次浏览\n我理解的exports 和 module.exports 的区别，欢迎大家吐槽~\n\n为了更好的理解 exports 和 module.exports 的关系，我们先来补点 js 基础。示例：\n\napp.js\n\nvar a = {name: 'nswbmw 1'};\nvar b = a;\n\nconsole.log(a);\nconsole.log(b);\n\nb.name = 'nswbmw 2';\nconsole.log(a);\nconsole.log(b);\n\nvar b = {name: 'nswbmw 3'};\nconsole.log(a);\nconsole.log(b);\n运行 app.js 结果为：\n\nD:\\>node app\n{ name: 'nswbmw 1' }\n{ name: 'nswbmw 1' }\n{ name: 'nswbmw 2' }\n{ name: 'nswbmw 2' }\n{ name: 'nswbmw 2' }\n{ name: 'nswbmw 3' }\n\nD:\\>\n解释一下：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一个对象，即 a 和 b 指向同一块内存地址，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当对 b 完全覆盖时，b 就指向了一块新的内存地址（并没有对原先的内存块作修改），a 还是指向原来的内存块，即 a 和 b 不再指向同一块内存，也就是说此时 a 和 b 已毫无关系，所以最后两个输出不一样。\n\n明白了上述例子后，我们进入正题。\n我们只需知道三点即可知道 exports 和 module.exports 的区别了：\n\nexports 是指向的 module.exports 的引用\nmodule.exports 初始值为一个空对象 {}，所以 exports 初始值也是 {}\nrequire() 返回的是 module.exports 而不是 exports\n所以：\n\n我们通过\n\n  var name = 'nswbmw';\n  exports.name = name;\n  exports.sayName = function() {\n    console.log(name);\n  }\n给 exports 赋值其实是给 module.exports 这个空对象添加了两个属性而已，上面的代码相当于：\n\n  var name = 'nswbmw';\n  module.exports.name = name;\n  module.exports.sayName = function() {\n    console.log(name);\n  }\n我们通常这样使用 exports 和 module.exports\n\n一个简单的例子，计算圆的面积：\n\n使用 exports\n\napp.js\n\n  var circle = require('./circle');\n  console.log(circle.area(4));\ncircle.js\n\n  exports.area = function(r) {\n    return r * r * Math.PI;\n  }\n使用 module.exports\n\napp.js\n\n  var area = require('./area');\n  console.log(area(4));\narea.js\n\n  module.exports = function(r) {\n    return r * r * Math.PI;\n  }\n上面两个例子输出是一样的。你也许会问，为什么不这样写呢？\n\napp.js\n\n  var area = require('./area');\n  console.log(area(4));\narea.js\n\n  exports = function(r) {\n    return r * r * Math.PI;\n  }\n运行上面的例子会报错。这是因为，前面的例子中通过给 exports 添加属性，只是对 exports 指向的内存做了修改，而\n\n  exports = function(r) {\n    return r * r * Math.PI;\n  }\n其实是对 exports 进行了覆盖，也就是说 exports 指向了一块新的内存（内容为一个计算圆面积的函数），也就是说 exports 和 module.exports 不再指向同一块内存，也就是说此时 exports 和 module.exports 毫无联系，也就是说 module.exports 指向的那块内存并没有做任何改变，仍然为一个空对象 {} ，也就是说 area.js 导出了一个空对象，所以我们在 app.js 中调用 area(4) 会报 TypeError: object is not a function 的错误。\n\n所以，一句话做个总结：当我们想让模块导出的是一个对象时， exports 和 module.exports 均可使用（但 exports 也不能重新覆盖为一个新的对象），而当我们想导出非对象接口时，就必须也只能覆盖 module.exports 。\n\n我们经常看到这样的用写法：\n\n  exports = module.exports = somethings\n上面的代码等价于\n\n  module.exports = somethings\n  exports = module.exports\n原因也很简单， module.exports = somethings 是对 module.exports 进行了覆盖，此时 module.exports 和 exports 的关系断裂，module.exports 指向了新的内存块，而 exports 还是指向原来的内存块，为了让 module.exports 和 exports 还是指向同一块内存或者说指向同一个 “对象”，所以我们就 exports = module.exports 。\n\n\n\n\n","source":"_posts/exports 和 module.exports 的区别.markdown","raw":"# exports 和 module.exports 的区别\n\ntitle: exports 和 module.exports 的区别\ntags : [Node]\ndate: 2015-11-08 17:30:07\n---\n\nexports 和 module.exports 的区别\n 发布于 2年前  作者 nswbmw  12877 次浏览\n我理解的exports 和 module.exports 的区别，欢迎大家吐槽~\n\n为了更好的理解 exports 和 module.exports 的关系，我们先来补点 js 基础。示例：\n\napp.js\n\nvar a = {name: 'nswbmw 1'};\nvar b = a;\n\nconsole.log(a);\nconsole.log(b);\n\nb.name = 'nswbmw 2';\nconsole.log(a);\nconsole.log(b);\n\nvar b = {name: 'nswbmw 3'};\nconsole.log(a);\nconsole.log(b);\n运行 app.js 结果为：\n\nD:\\>node app\n{ name: 'nswbmw 1' }\n{ name: 'nswbmw 1' }\n{ name: 'nswbmw 2' }\n{ name: 'nswbmw 2' }\n{ name: 'nswbmw 2' }\n{ name: 'nswbmw 3' }\n\nD:\\>\n解释一下：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一个对象，即 a 和 b 指向同一块内存地址，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当对 b 完全覆盖时，b 就指向了一块新的内存地址（并没有对原先的内存块作修改），a 还是指向原来的内存块，即 a 和 b 不再指向同一块内存，也就是说此时 a 和 b 已毫无关系，所以最后两个输出不一样。\n\n明白了上述例子后，我们进入正题。\n我们只需知道三点即可知道 exports 和 module.exports 的区别了：\n\nexports 是指向的 module.exports 的引用\nmodule.exports 初始值为一个空对象 {}，所以 exports 初始值也是 {}\nrequire() 返回的是 module.exports 而不是 exports\n所以：\n\n我们通过\n\n  var name = 'nswbmw';\n  exports.name = name;\n  exports.sayName = function() {\n    console.log(name);\n  }\n给 exports 赋值其实是给 module.exports 这个空对象添加了两个属性而已，上面的代码相当于：\n\n  var name = 'nswbmw';\n  module.exports.name = name;\n  module.exports.sayName = function() {\n    console.log(name);\n  }\n我们通常这样使用 exports 和 module.exports\n\n一个简单的例子，计算圆的面积：\n\n使用 exports\n\napp.js\n\n  var circle = require('./circle');\n  console.log(circle.area(4));\ncircle.js\n\n  exports.area = function(r) {\n    return r * r * Math.PI;\n  }\n使用 module.exports\n\napp.js\n\n  var area = require('./area');\n  console.log(area(4));\narea.js\n\n  module.exports = function(r) {\n    return r * r * Math.PI;\n  }\n上面两个例子输出是一样的。你也许会问，为什么不这样写呢？\n\napp.js\n\n  var area = require('./area');\n  console.log(area(4));\narea.js\n\n  exports = function(r) {\n    return r * r * Math.PI;\n  }\n运行上面的例子会报错。这是因为，前面的例子中通过给 exports 添加属性，只是对 exports 指向的内存做了修改，而\n\n  exports = function(r) {\n    return r * r * Math.PI;\n  }\n其实是对 exports 进行了覆盖，也就是说 exports 指向了一块新的内存（内容为一个计算圆面积的函数），也就是说 exports 和 module.exports 不再指向同一块内存，也就是说此时 exports 和 module.exports 毫无联系，也就是说 module.exports 指向的那块内存并没有做任何改变，仍然为一个空对象 {} ，也就是说 area.js 导出了一个空对象，所以我们在 app.js 中调用 area(4) 会报 TypeError: object is not a function 的错误。\n\n所以，一句话做个总结：当我们想让模块导出的是一个对象时， exports 和 module.exports 均可使用（但 exports 也不能重新覆盖为一个新的对象），而当我们想导出非对象接口时，就必须也只能覆盖 module.exports 。\n\n我们经常看到这样的用写法：\n\n  exports = module.exports = somethings\n上面的代码等价于\n\n  module.exports = somethings\n  exports = module.exports\n原因也很简单， module.exports = somethings 是对 module.exports 进行了覆盖，此时 module.exports 和 exports 的关系断裂，module.exports 指向了新的内存块，而 exports 还是指向原来的内存块，为了让 module.exports 和 exports 还是指向同一块内存或者说指向同一个 “对象”，所以我们就 exports = module.exports 。\n\n\n\n\n","slug":"exports 和 module.exports 的区别","published":1,"updated":"2015-11-19T09:32:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh92000zph3mwz4aafxq"},{"title":"cocoapods","date":"2015-09-12T01:10:07.000Z","_content":"标签（空格分隔）： 未分类\n\n---\n\ncocoapods出现Unable to satisfy the following requirements: required by `Podfile`的解决方法\n\n1.尝试更新本地仓库：pod update --verbose  如果不行\n2.版本号问题\n3.pod repo update —verbose 查看缓存  删除本地缓存，重新setup  rm -fr ~/.cocoapods/repos/master  然后运行 $pod setup\n如果出现下面错误\ngit clone error: RPC failed; result=56, HTTP code = 200\n错误解决git config --global http.postBuffer 524288000（尽量大）\n4.profile锁\n5.pod install --verbose --no-repo-update\n个人觉得:1、2的可能性大\npod的常用命令\nsudo gem install cocoapods\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a http://ruby.taobao.org/\n$ gem sources -l\n$ pod search AFNetworking\n$ vim Podfile 例子：然后在Podfile文件中输入以下文字： platform :ios, '7.0' pod \"AFNetworking\", \"~> 2.0\"\n$ pod install\n$ pod update\n$ pod update --verbose \n\nhttp://www.open-open.com/lib/view/open1442462680602.html\nhttp://www.cnblogs.com/wayne23/p/3912882.html\nhttp://www.jianshu.com/p/6e5c0f78200a\nhttp://blog.csdn.net/meegomeego/article/details/24005567\nhttp://blog.csdn.net/totogo2010/article/details/8198694\n\n\n\n\n\n\n","source":"_posts/cocoapods简单使用.markdown","raw":"# cocoapods简单使用\ntitle: cocoapods\ntags : [IOS开发SDK]\ndate: 2015-09-12 09:10:07\n---\n标签（空格分隔）： 未分类\n\n---\n\ncocoapods出现Unable to satisfy the following requirements: required by `Podfile`的解决方法\n\n1.尝试更新本地仓库：pod update --verbose  如果不行\n2.版本号问题\n3.pod repo update —verbose 查看缓存  删除本地缓存，重新setup  rm -fr ~/.cocoapods/repos/master  然后运行 $pod setup\n如果出现下面错误\ngit clone error: RPC failed; result=56, HTTP code = 200\n错误解决git config --global http.postBuffer 524288000（尽量大）\n4.profile锁\n5.pod install --verbose --no-repo-update\n个人觉得:1、2的可能性大\npod的常用命令\nsudo gem install cocoapods\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a http://ruby.taobao.org/\n$ gem sources -l\n$ pod search AFNetworking\n$ vim Podfile 例子：然后在Podfile文件中输入以下文字： platform :ios, '7.0' pod \"AFNetworking\", \"~> 2.0\"\n$ pod install\n$ pod update\n$ pod update --verbose \n\nhttp://www.open-open.com/lib/view/open1442462680602.html\nhttp://www.cnblogs.com/wayne23/p/3912882.html\nhttp://www.jianshu.com/p/6e5c0f78200a\nhttp://blog.csdn.net/meegomeego/article/details/24005567\nhttp://blog.csdn.net/totogo2010/article/details/8198694\n\n\n\n\n\n\n","slug":"cocoapods简单使用","published":1,"updated":"2015-11-19T09:25:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh940011ph3mqq3ivoeu"},{"title":"UIViewController简单使用","date":"2015-11-30T03:50:07.000Z","_content":"最新版SDWebImage的使用\nUIViewController中loadView, viewDidLoad, viewWillUnload, viewDidUnload, viewWillAppear, viewDidAppear, viewWillLayoutSubviews，viewDidLayoutSubviews，viewWillDisappear, viewDidDisappear方法，按照调用顺序说明如下：\n\n调试日志：\n\n\n\n2013-07-14\n12:15:49.048\nVCTest[13412:907]\ninitWithNibName:bundle  /  initWithCoder\n\n#如果使用的StoryBoard\n\n\n2013-07-14\n12:15:49.056\nVCTest[13412:907]\nloadView\n\n\n2013-07-14\n12:15:49.059\nVCTest[13412:907]\nviewDidLoad\n\n\n2013-07-14\n12:15:49.061\nVCTest[13412:907]\nviewWillAppear\n\n\n2013-07-14\n12:15:49.078\nVCTest[13412:907]\nviewWillLayoutSubviews\n\n\n2013-07-14\n12:15:49.083\nVCTest[13412:907]\nviewDidLayoutSubviews\n\n\n2013-07-14\n12:15:49.445\nVCTest[13412:907]\nviewDidAppear\n\n\n2013-07-14\n12:16:00.624\nVCTest[13412:907]\nviewWillDisappear\n\n\n2013-07-14\n12:16:00.997\nVCTest[13412:907]\nviewDidDisappear\n\n1. initWithNibName:bundle:\n\n初始化UIViewController，执行关键数据初始化操作，注意这里不要做view相关操作，view在loadView方法中才初始化，这时loadView还未调用。如果使用StoryBoard进行视图管理，程序不会直接初始化一个UIViewController，StoryBoard会自动初始化或在segue被触发时自动初始化，因此方法initWithNibName:bundle:不会被调用。如果在代码里面使用instantiateViewControllerWithIdentifier:方法显示初始化一个UIViewController，则initWithCoder方法会被调用。\n\n如果是通过调用initWithNibName:bundle指定nib文件名初始化的话，ViewController会根据此nib来创建View。如果name参数为nil，则ViewController会通过以下两个步骤找到与其关联的nib：\n1）如果ViewController的类名以“Controller”结尾，例如ViewController的类名是MyViewController，则查找是否存在MyView.nib；\n2）找跟ViewController类名一样的文件，例如MyViewController，则查找是否存在MyViewController.nib\n\n2. loadView\n\n当访问UIViewController的view属性时，view如果此时是nil，那么VC会自动调用loadView方法来初始化一个UIView并赋值给view属性。此方法用在初始化关键view，需要注意的是，在view初始化之前，不能先调用view的getter方法，否则将导致死循环（除非先调用了[supper\n loadView];）。\n\n\n\n-(void)loadView{\n\n\n    NSLog(@\"loadView\");\n\n\n    //错误，将导致死循环，因此此时view=nil，VC会再次调用loadView来初始化view\n\n\n    self.view.backgroundColor\n=\n[UIColor\ngreenColor];\n\n\n}\n\n\n \n\n\n-(void)loadView{\n\n\n    NSLog(@\"loadView\");\n\n\n    //正确，先初始化view\n\n\n    self.view\n=\n[[MyView\nalloc]\ninit];\n\n\n    self.view.backgroundColor\n=\n[UIColor\ngreenColor];\n\n\n}\n\n如果没有重载loadView方法，则UIViewController会从nib或StoryBoard中查找默认的loadView，默认的loadView会返回一个空白的UIView对象。\n\n3. viewDidLoad\n\n当VC的view对象载入内存后调用，用于对view进行额外的初始化操作\n\n4. viewWillAppear\n\n在view即将添加到视图层级中(显示给用户)且任意显示动画切换之前调用(这个时候supperView还是nil)。这个方法中完成任何与视图显示相关的任务，例如改变视图方向、状态栏方向、视图显示样式等\n\n5. viewDidAppear\n\n在view被添加到视图层级中，显示动画切换之后调用(这时view已经添加到supperView中)。在这个方法中执行视图显示相关附件任务，如果重载了这个方法，必须在方法中调用[supper\n viewDidAppear];\n\n6. viewWillLayoutSubviews\n\nview即将布局其Subviews。比如view的bounds改变了(例如状态栏从不显示到显示，视图方向变化)，要调整Subviews的位置，在调整之前要做的一些工作就可以在该方法中实现。\n\n7. viewDidLayoutSubviews\n\nview已经布局其Subviews。比如view的bounds改变了(例如状态栏从不显示到显示，视图方向变化)，已经调整Subviews的位置，在调整完成之后要做的一些工作就可以在该方法中实现。\n\n8. viewWillDisappear\n\nview即将从superView中移除且移除动画切换之前，此时还没有调用removeFromSuperview。\n\n9. viewDidDisappear\n\nview从superView中移除，移除动画切换之后调用，此时已调用removeFromSuperview。\n\n10. viewWillUnload\n\n在VC的view对象从内存中释放之前调用，可以在view被释放前做一些资源清理操作。在iOS6.0开始就废弃了，该方法不再会调用\n\n11. viewDidUnload\n\n在VC的view对象从内存中释放之后调用，可以在view被释放后做一些view相关的引用清理操作，此时view为nil。在iOS6.0开始就废弃了，该方法不再会调用\n\n当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反 \n1、viewWillDisappear            视图将被从屏幕上移除之前执行 \n2、viewDidDisappear             视图已经被从屏幕上移除，用户看不到这个视图了 \n3、dealloc                                 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放 \n\n\n\n","source":"_posts/UIViewController简单使用.markdown","raw":"# UIViewController简单使用\ntitle: UIViewController简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-30 11:50:07\n---\n最新版SDWebImage的使用\nUIViewController中loadView, viewDidLoad, viewWillUnload, viewDidUnload, viewWillAppear, viewDidAppear, viewWillLayoutSubviews，viewDidLayoutSubviews，viewWillDisappear, viewDidDisappear方法，按照调用顺序说明如下：\n\n调试日志：\n\n\n\n2013-07-14\n12:15:49.048\nVCTest[13412:907]\ninitWithNibName:bundle  /  initWithCoder\n\n#如果使用的StoryBoard\n\n\n2013-07-14\n12:15:49.056\nVCTest[13412:907]\nloadView\n\n\n2013-07-14\n12:15:49.059\nVCTest[13412:907]\nviewDidLoad\n\n\n2013-07-14\n12:15:49.061\nVCTest[13412:907]\nviewWillAppear\n\n\n2013-07-14\n12:15:49.078\nVCTest[13412:907]\nviewWillLayoutSubviews\n\n\n2013-07-14\n12:15:49.083\nVCTest[13412:907]\nviewDidLayoutSubviews\n\n\n2013-07-14\n12:15:49.445\nVCTest[13412:907]\nviewDidAppear\n\n\n2013-07-14\n12:16:00.624\nVCTest[13412:907]\nviewWillDisappear\n\n\n2013-07-14\n12:16:00.997\nVCTest[13412:907]\nviewDidDisappear\n\n1. initWithNibName:bundle:\n\n初始化UIViewController，执行关键数据初始化操作，注意这里不要做view相关操作，view在loadView方法中才初始化，这时loadView还未调用。如果使用StoryBoard进行视图管理，程序不会直接初始化一个UIViewController，StoryBoard会自动初始化或在segue被触发时自动初始化，因此方法initWithNibName:bundle:不会被调用。如果在代码里面使用instantiateViewControllerWithIdentifier:方法显示初始化一个UIViewController，则initWithCoder方法会被调用。\n\n如果是通过调用initWithNibName:bundle指定nib文件名初始化的话，ViewController会根据此nib来创建View。如果name参数为nil，则ViewController会通过以下两个步骤找到与其关联的nib：\n1）如果ViewController的类名以“Controller”结尾，例如ViewController的类名是MyViewController，则查找是否存在MyView.nib；\n2）找跟ViewController类名一样的文件，例如MyViewController，则查找是否存在MyViewController.nib\n\n2. loadView\n\n当访问UIViewController的view属性时，view如果此时是nil，那么VC会自动调用loadView方法来初始化一个UIView并赋值给view属性。此方法用在初始化关键view，需要注意的是，在view初始化之前，不能先调用view的getter方法，否则将导致死循环（除非先调用了[supper\n loadView];）。\n\n\n\n-(void)loadView{\n\n\n    NSLog(@\"loadView\");\n\n\n    //错误，将导致死循环，因此此时view=nil，VC会再次调用loadView来初始化view\n\n\n    self.view.backgroundColor\n=\n[UIColor\ngreenColor];\n\n\n}\n\n\n \n\n\n-(void)loadView{\n\n\n    NSLog(@\"loadView\");\n\n\n    //正确，先初始化view\n\n\n    self.view\n=\n[[MyView\nalloc]\ninit];\n\n\n    self.view.backgroundColor\n=\n[UIColor\ngreenColor];\n\n\n}\n\n如果没有重载loadView方法，则UIViewController会从nib或StoryBoard中查找默认的loadView，默认的loadView会返回一个空白的UIView对象。\n\n3. viewDidLoad\n\n当VC的view对象载入内存后调用，用于对view进行额外的初始化操作\n\n4. viewWillAppear\n\n在view即将添加到视图层级中(显示给用户)且任意显示动画切换之前调用(这个时候supperView还是nil)。这个方法中完成任何与视图显示相关的任务，例如改变视图方向、状态栏方向、视图显示样式等\n\n5. viewDidAppear\n\n在view被添加到视图层级中，显示动画切换之后调用(这时view已经添加到supperView中)。在这个方法中执行视图显示相关附件任务，如果重载了这个方法，必须在方法中调用[supper\n viewDidAppear];\n\n6. viewWillLayoutSubviews\n\nview即将布局其Subviews。比如view的bounds改变了(例如状态栏从不显示到显示，视图方向变化)，要调整Subviews的位置，在调整之前要做的一些工作就可以在该方法中实现。\n\n7. viewDidLayoutSubviews\n\nview已经布局其Subviews。比如view的bounds改变了(例如状态栏从不显示到显示，视图方向变化)，已经调整Subviews的位置，在调整完成之后要做的一些工作就可以在该方法中实现。\n\n8. viewWillDisappear\n\nview即将从superView中移除且移除动画切换之前，此时还没有调用removeFromSuperview。\n\n9. viewDidDisappear\n\nview从superView中移除，移除动画切换之后调用，此时已调用removeFromSuperview。\n\n10. viewWillUnload\n\n在VC的view对象从内存中释放之前调用，可以在view被释放前做一些资源清理操作。在iOS6.0开始就废弃了，该方法不再会调用\n\n11. viewDidUnload\n\n在VC的view对象从内存中释放之后调用，可以在view被释放后做一些view相关的引用清理操作，此时view为nil。在iOS6.0开始就废弃了，该方法不再会调用\n\n当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反 \n1、viewWillDisappear            视图将被从屏幕上移除之前执行 \n2、viewDidDisappear             视图已经被从屏幕上移除，用户看不到这个视图了 \n3、dealloc                                 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放 \n\n\n\n","slug":"UIViewController简单使用","published":1,"updated":"2015-11-30T02:35:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh950013ph3mmba9ay18"},{"title":"UITextField简单使用","date":"2015-11-15T03:50:07.000Z","_content":"1.UITextField的初始化和设置\n  textField = [[UITextField alloc] initWithFrame:CGRectMake(120.0f, 80.0f, 150.0f, 30.0f)]; \n  [textField setBorderStyle:UITextBorderStyleRoundedRect]; //外框类型 \n \n  textField.placeholder = @\"password\"; //默认显示的字 \n \n  textField.secureTextEntry = YES; //密码 \n \n  textField.autocorrectionType = UITextAutocorrectionTypeNo; \n  textField.autocapitalizationType = UITextAutocapitalizationTypeNone; \n  textField.returnKeyType = UIReturnKeyDone; \n  textField.clearButtonMode = UITextFieldViewModeWhileEditing; //编辑时会出现个修改X \n \n  textField.delegate = self;\n2.要实现的Delegate方法,关闭键盘\n  - (BOOL)textFieldShouldReturn:(UITextField *)textField \n  { \n      [self.textField resignFirstResponder]; \n      return YES; \n  } \n3. 可以在UITextField使用下面方法，按return键返回\n-(IBAction) textFieldDone:(id) sender\n{\n [textFieldName resignFirstResponder]; \n}\n链接TextField控件的\"Did end on exit\"\n最右侧加图片是以下代码,\n    UIImageView *imgv=[[UIImageView alloc] initWithImage:[UIImage imageNamed:@\"right.png\"]];\n    text.rightView=imgv;\n    text.rightViewMode = UITextFieldViewModeAlways;    \n\n如果是在最左侧加图片就换成:\ntext.leftView=imgv;\ntext.leftViewMode = UITextFieldViewModeAlways;    \nUITextField 继承自 UIControl,此类中有一个属性contentVerticalAlignment\n所以想让UITextField里面的text垂直居中可以这样写:\ntext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;\n查看函数的方法：\n按住command键双击进入函数声明\n按住alt键双击进入doc文档\n///////////////////////////////////////////////////////////////\n文本框常用方法:\n如何用程序删除文本框中选中的文本\n[textView delete: nil];\n///////////////////////////////////////////////////////////////\n如何限制文本框只能输入数字:\n建立NSNumberFormatter的子类，增加这个方法，将formatter链接至文本框。\n \n- (BOOL) isPartialStringValid: (NSString **) partialStringPtr\n        proposedSelectedRange: (NSRangePointer) proposedSelRangePtr\n               originalString: (NSString *) origString\n        originalSelectedRange: (NSRange) origSelRange\n             errorDescription: (NSString **) error\n{\n    NSCharacterSet *nonDigits;\n    NSRange newStuff;\n    NSString *newStuffString;\n            \n    nonDigits = [[NSCharacterSet decimalDigitCharacterSet] invertedSet];\n    newStuff = NSMakeRange(origSelRange.location,\n                           proposedSelRangePtr->location\n                           - origSelRange.location);\n    newStuffString = [*partialStringPtr substringWithRange: newStuff];\n            \n    if ([newStuffString rangeOfCharacterFromSet: nonDigits\n                                                                                             options: NSLiteralSearch].location != NSNotFound) {\n        *error = @\"不是数字\";\n        return (NO);\n    } else {\n        *error = nil;\n        return (YES);\n    }\n            \n}\n///////////////////////////////////////////////////////////////\n从文本框获取十六进制数据的代码\nchar singleNumberString[3] = {'\\0','\\0','\\0'};\nuint32_t singleNumber = 0;\nuint32_t i = 0;\n NSMutableData *data = [NSMutableData data];\n //从文本框获取到得数据\n const char *buf = [[_hexToSendTextField text] UTF8String];\n //转换为十六进制\n for(i = 0; i < strlen(buf); i+=2)\n {\n if(((i+1) < len && isxdigit(buf) && (isxdigit(buf[i+1])))\n {\n singleNumberString[0] = buf;\n singleNumberString[1] = buf[i+1];\n sscanf(singleNumberString, \"%x\", &singleNumber);\n [data appendBytes:(void*)(&tmp) length:1];\n }\n else\n {\n break;\n }\n }\n //输出\n NSLog(@\"%@\", data);\n/////////////////////////////////////////////////////////////\n点击 UITextView 输入文字，光标都从最初点开始\n- (void)textViewDidChangeSelection:(UITextView *)textView\n{\n    NSRange range;\n    range.location = 0;\n    range.length = 0;\n    textView.selectedRange = range;\n}\n///////////////////////////////////////////////////////////\n软键盘\n在登录页面要实现用户名和密码，密码要是点点格式，引入当前页面光标要停留在用户名选项，软键盘要弹出界面。如下图：\n弹出键盘：\n[username becomeFirstResponder];\n取消键盘：\n[username resignFirstResponder];\n密码保护：\npassword.secureTextEntry=YES;\n//////////////////////////////////////////////////////////////////\n1.UITextField的初始化和设置\n  textField = [[UITextField alloc] initWithFrame:CGRectMake(120.0f, 80.0f, 150.0f, 30.0f)]; \n  [textField setBorderStyle:UITextBorderStyleRoundedRect]; //外框类型 \n  textField.placeholder = @\"password\"; //默认显示的字 \n  textField.secureTextEntry = YES; //密码 \n  textField.autocorrectionType = UITextAutocorrectionTypeNo; \n  textField.autocapitalizationType = UITextAutocapitalizationTypeNone; \n  textField.returnKeyType = UIReturnKeyDone; \n  textField.clearButtonMode = UITextFieldViewModeWhileEditing; //编辑时会出现个修改X \n  textField.delegate = self;\n2.要实现的Delegate方法,关闭键盘\n  - (BOOL)textFieldShouldReturn:(UITextField *)textField \n  { \n      [self.textField resignFirstResponder]; \n      return YES; \n  } \n3. 可以在UITextField使用下面方法，按return键返回\n-(IBAction) textFieldDone:(id) sender\n{\n [textFieldName resignFirstResponder]; \n}\n链接TextField控件的\"Did end on exit\"\n////////////////////////////////////////////////////////////////////\n限制输入文本的长度\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string\n{\n    if (range.location >= MAX_LENGTH)\n        return NO; // return NO to not change text\n    return YES;\n}\nif (textField.text.length >= 10 && range.length == 0)\n    return NO;\nreturn YES;\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string \n{ \n if ([textField.text length] > MAXLENGTH) \n { \n  textField.text = [textField.text substringToIndex:MAXLENGTH-1]; \n  return NO; \n } \n return YES; \n} \n//////////////////////////////////////////////////////////////////////\n使用UITextFieldDelegate来隐藏键盘 \n在iPhone界面上，时常会需要当用户输入完内容后，隐藏键盘。 当然有很多方法，今天只介绍使用UITextFieldDelegate这个协议实现隐藏键盘。\n其实很简单， 需要三步：\n1. 在你的控制器类中，加入UITextFieldDelegate这个协议\n如：@interface AddItemViewController : UIViewController <UITextFieldDelegate>\n2. 在使用了UITextFieldDelegate协议的控制器类的实现中，加入- (BOOL)textFieldShouldReturn:方法。\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n \n        [textField resignFirstResponder];\n        return YES;\n}\n //设置焦点：\n\n[UITextField becomeFirstResponder];\n\n3. 将xib文件中的TextField控件的delegate变量指向到之前使用UITextFieldDelegate协议的那个控制器类,将 TextField的delegate IBOutlet变量右键链接到前面的控制器类的实例上。或者使用代码方式，指定相关TextField的delegate变量。\n\n- (void)viewDidLoad \n\n{\n\n    [super viewDidLoad];\n\n        itemNameField.delegate = self;\n\n        priceField.delegate = self;\n\n}\n\n\n\n\n","source":"_posts/UITextField简单使用.markdown","raw":"# UITextField简单使用\ntitle: UITextField简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-15 11:50:07\n---\n1.UITextField的初始化和设置\n  textField = [[UITextField alloc] initWithFrame:CGRectMake(120.0f, 80.0f, 150.0f, 30.0f)]; \n  [textField setBorderStyle:UITextBorderStyleRoundedRect]; //外框类型 \n \n  textField.placeholder = @\"password\"; //默认显示的字 \n \n  textField.secureTextEntry = YES; //密码 \n \n  textField.autocorrectionType = UITextAutocorrectionTypeNo; \n  textField.autocapitalizationType = UITextAutocapitalizationTypeNone; \n  textField.returnKeyType = UIReturnKeyDone; \n  textField.clearButtonMode = UITextFieldViewModeWhileEditing; //编辑时会出现个修改X \n \n  textField.delegate = self;\n2.要实现的Delegate方法,关闭键盘\n  - (BOOL)textFieldShouldReturn:(UITextField *)textField \n  { \n      [self.textField resignFirstResponder]; \n      return YES; \n  } \n3. 可以在UITextField使用下面方法，按return键返回\n-(IBAction) textFieldDone:(id) sender\n{\n [textFieldName resignFirstResponder]; \n}\n链接TextField控件的\"Did end on exit\"\n最右侧加图片是以下代码,\n    UIImageView *imgv=[[UIImageView alloc] initWithImage:[UIImage imageNamed:@\"right.png\"]];\n    text.rightView=imgv;\n    text.rightViewMode = UITextFieldViewModeAlways;    \n\n如果是在最左侧加图片就换成:\ntext.leftView=imgv;\ntext.leftViewMode = UITextFieldViewModeAlways;    \nUITextField 继承自 UIControl,此类中有一个属性contentVerticalAlignment\n所以想让UITextField里面的text垂直居中可以这样写:\ntext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;\n查看函数的方法：\n按住command键双击进入函数声明\n按住alt键双击进入doc文档\n///////////////////////////////////////////////////////////////\n文本框常用方法:\n如何用程序删除文本框中选中的文本\n[textView delete: nil];\n///////////////////////////////////////////////////////////////\n如何限制文本框只能输入数字:\n建立NSNumberFormatter的子类，增加这个方法，将formatter链接至文本框。\n \n- (BOOL) isPartialStringValid: (NSString **) partialStringPtr\n        proposedSelectedRange: (NSRangePointer) proposedSelRangePtr\n               originalString: (NSString *) origString\n        originalSelectedRange: (NSRange) origSelRange\n             errorDescription: (NSString **) error\n{\n    NSCharacterSet *nonDigits;\n    NSRange newStuff;\n    NSString *newStuffString;\n            \n    nonDigits = [[NSCharacterSet decimalDigitCharacterSet] invertedSet];\n    newStuff = NSMakeRange(origSelRange.location,\n                           proposedSelRangePtr->location\n                           - origSelRange.location);\n    newStuffString = [*partialStringPtr substringWithRange: newStuff];\n            \n    if ([newStuffString rangeOfCharacterFromSet: nonDigits\n                                                                                             options: NSLiteralSearch].location != NSNotFound) {\n        *error = @\"不是数字\";\n        return (NO);\n    } else {\n        *error = nil;\n        return (YES);\n    }\n            \n}\n///////////////////////////////////////////////////////////////\n从文本框获取十六进制数据的代码\nchar singleNumberString[3] = {'\\0','\\0','\\0'};\nuint32_t singleNumber = 0;\nuint32_t i = 0;\n NSMutableData *data = [NSMutableData data];\n //从文本框获取到得数据\n const char *buf = [[_hexToSendTextField text] UTF8String];\n //转换为十六进制\n for(i = 0; i < strlen(buf); i+=2)\n {\n if(((i+1) < len && isxdigit(buf) && (isxdigit(buf[i+1])))\n {\n singleNumberString[0] = buf;\n singleNumberString[1] = buf[i+1];\n sscanf(singleNumberString, \"%x\", &singleNumber);\n [data appendBytes:(void*)(&tmp) length:1];\n }\n else\n {\n break;\n }\n }\n //输出\n NSLog(@\"%@\", data);\n/////////////////////////////////////////////////////////////\n点击 UITextView 输入文字，光标都从最初点开始\n- (void)textViewDidChangeSelection:(UITextView *)textView\n{\n    NSRange range;\n    range.location = 0;\n    range.length = 0;\n    textView.selectedRange = range;\n}\n///////////////////////////////////////////////////////////\n软键盘\n在登录页面要实现用户名和密码，密码要是点点格式，引入当前页面光标要停留在用户名选项，软键盘要弹出界面。如下图：\n弹出键盘：\n[username becomeFirstResponder];\n取消键盘：\n[username resignFirstResponder];\n密码保护：\npassword.secureTextEntry=YES;\n//////////////////////////////////////////////////////////////////\n1.UITextField的初始化和设置\n  textField = [[UITextField alloc] initWithFrame:CGRectMake(120.0f, 80.0f, 150.0f, 30.0f)]; \n  [textField setBorderStyle:UITextBorderStyleRoundedRect]; //外框类型 \n  textField.placeholder = @\"password\"; //默认显示的字 \n  textField.secureTextEntry = YES; //密码 \n  textField.autocorrectionType = UITextAutocorrectionTypeNo; \n  textField.autocapitalizationType = UITextAutocapitalizationTypeNone; \n  textField.returnKeyType = UIReturnKeyDone; \n  textField.clearButtonMode = UITextFieldViewModeWhileEditing; //编辑时会出现个修改X \n  textField.delegate = self;\n2.要实现的Delegate方法,关闭键盘\n  - (BOOL)textFieldShouldReturn:(UITextField *)textField \n  { \n      [self.textField resignFirstResponder]; \n      return YES; \n  } \n3. 可以在UITextField使用下面方法，按return键返回\n-(IBAction) textFieldDone:(id) sender\n{\n [textFieldName resignFirstResponder]; \n}\n链接TextField控件的\"Did end on exit\"\n////////////////////////////////////////////////////////////////////\n限制输入文本的长度\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string\n{\n    if (range.location >= MAX_LENGTH)\n        return NO; // return NO to not change text\n    return YES;\n}\nif (textField.text.length >= 10 && range.length == 0)\n    return NO;\nreturn YES;\n- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string \n{ \n if ([textField.text length] > MAXLENGTH) \n { \n  textField.text = [textField.text substringToIndex:MAXLENGTH-1]; \n  return NO; \n } \n return YES; \n} \n//////////////////////////////////////////////////////////////////////\n使用UITextFieldDelegate来隐藏键盘 \n在iPhone界面上，时常会需要当用户输入完内容后，隐藏键盘。 当然有很多方法，今天只介绍使用UITextFieldDelegate这个协议实现隐藏键盘。\n其实很简单， 需要三步：\n1. 在你的控制器类中，加入UITextFieldDelegate这个协议\n如：@interface AddItemViewController : UIViewController <UITextFieldDelegate>\n2. 在使用了UITextFieldDelegate协议的控制器类的实现中，加入- (BOOL)textFieldShouldReturn:方法。\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n \n        [textField resignFirstResponder];\n        return YES;\n}\n //设置焦点：\n\n[UITextField becomeFirstResponder];\n\n3. 将xib文件中的TextField控件的delegate变量指向到之前使用UITextFieldDelegate协议的那个控制器类,将 TextField的delegate IBOutlet变量右键链接到前面的控制器类的实例上。或者使用代码方式，指定相关TextField的delegate变量。\n\n- (void)viewDidLoad \n\n{\n\n    [super viewDidLoad];\n\n        itemNameField.delegate = self;\n\n        priceField.delegate = self;\n\n}\n\n\n\n\n","slug":"UITextField简单使用","published":1,"updated":"2015-11-19T09:35:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh980015ph3mnod47cbn"},{"title":"UITableView简单使用","date":"2015-09-08T03:50:07.000Z","_content":"\n标签（空格分隔）： 未分类\n\n---\n\n在此输入正文\n\n\ncell.selectionStyle = UITableViewCellSelectionStyleNone;  \n\ntableView: cellForRowAtIndexPath:方法中有两个获得重用cell的方法\nUITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n和\nUITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath]\n\n请问他们有什么区别？\n当我用 UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath]的时候为什么总报错\nreason: 'unable to dequeue a cell with identifier Cell - must register a nib or a class for the identifier or connect a prototype cell in a storyboard'\n\n------解决方案--------------------------------------------------------\n- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier;\n- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath\nNS_AVAILABLE_IOS(6_0); // newer\n\n\n区别在这儿\n\n------解决方案--------------------------------------------------------\n1 这个方法在SDK5.0是运行不起来的。\n2 如果需要使用这个方法，你必须使用配套的方法来一起用，下面两个配套方法：\n// Beginning in iOS 6, clients can register a nib or class for each cell.\n// If all reuse identifiers are registered, use the newer -dequeueReusableCellWithIdentifier:forIndexPath: to guarantee that a cell instance is returned.\n// Instances returned from the new dequeue method will also be properly sized when they are returned.\n- (void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier NS_AVAILABLE_IOS(5_0);\n- (void)registerClass:(Class)cellClass forCellReuseIdentifier:(NSString *)identifier NS_AVAILABLE_IOS(6_0);\n\n注意看上面的注释\n\n3 比如你已经用NIB做了一个Cell，或者自定义了一个Cell。我们在你创建UITableView的时候，就可以顺带\n\nself.tableView.backgroundColor = xxxx;\n[self.tableView registerClass:[CustomCell class] forCellReuseIdentifier:@\"CustomCell\"];\n\n这样你在- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath这个方法里，你就可以省下这些代码：\n\n    static NSString *CellIdentifier = @\"Cell\";\n    if (cell == nil) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];\n      //设置你的cell\n｝\n而只需要\n\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"Cell\" forIndexPath:indexPath];\n\n\n这样就够了，这下你明白了吗？\n\n\n","source":"_posts/UITableView简单使用.markdown","raw":"# UITableView简单使用\ntitle: UITableView简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-08 11:50:07\n---\n\n标签（空格分隔）： 未分类\n\n---\n\n在此输入正文\n\n\ncell.selectionStyle = UITableViewCellSelectionStyleNone;  \n\ntableView: cellForRowAtIndexPath:方法中有两个获得重用cell的方法\nUITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];\n和\nUITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath]\n\n请问他们有什么区别？\n当我用 UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath]的时候为什么总报错\nreason: 'unable to dequeue a cell with identifier Cell - must register a nib or a class for the identifier or connect a prototype cell in a storyboard'\n\n------解决方案--------------------------------------------------------\n- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier;\n- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath\nNS_AVAILABLE_IOS(6_0); // newer\n\n\n区别在这儿\n\n------解决方案--------------------------------------------------------\n1 这个方法在SDK5.0是运行不起来的。\n2 如果需要使用这个方法，你必须使用配套的方法来一起用，下面两个配套方法：\n// Beginning in iOS 6, clients can register a nib or class for each cell.\n// If all reuse identifiers are registered, use the newer -dequeueReusableCellWithIdentifier:forIndexPath: to guarantee that a cell instance is returned.\n// Instances returned from the new dequeue method will also be properly sized when they are returned.\n- (void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier NS_AVAILABLE_IOS(5_0);\n- (void)registerClass:(Class)cellClass forCellReuseIdentifier:(NSString *)identifier NS_AVAILABLE_IOS(6_0);\n\n注意看上面的注释\n\n3 比如你已经用NIB做了一个Cell，或者自定义了一个Cell。我们在你创建UITableView的时候，就可以顺带\n\nself.tableView.backgroundColor = xxxx;\n[self.tableView registerClass:[CustomCell class] forCellReuseIdentifier:@\"CustomCell\"];\n\n这样你在- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath这个方法里，你就可以省下这些代码：\n\n    static NSString *CellIdentifier = @\"Cell\";\n    if (cell == nil) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];\n      //设置你的cell\n｝\n而只需要\n\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"Cell\" forIndexPath:indexPath];\n\n\n这样就够了，这下你明白了吗？\n\n\n","slug":"UITableView简单使用","published":1,"updated":"2015-09-25T02:08:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9a0017ph3m5ebfgdlb"},{"title":"UINavigationController简单使用","date":"2015-09-15T09:50:07.000Z","_content":"\n隐藏：\n\n[self.navigationController setNavigationBarHidden:NO animated:YES];\n\n显示：\n\n[self.navigationController setNavigationBarHidden:YES animated:YES];\n\n隐藏返回键\n      self.navigationItem.hidesBackButton = YES;\n\n\n\n\n","source":"_posts/UINavigationController简单使用.markdown","raw":"# UINavigationController简单使用\ntitle: UINavigationController简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-15 17:50:07\n---\n\n隐藏：\n\n[self.navigationController setNavigationBarHidden:NO animated:YES];\n\n显示：\n\n[self.navigationController setNavigationBarHidden:YES animated:YES];\n\n隐藏返回键\n      self.navigationItem.hidesBackButton = YES;\n\n\n\n\n","slug":"UINavigationController简单使用","published":1,"updated":"2015-09-15T07:49:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9d0019ph3m2rh21x9k"},{"title":"UIImage简单使用","date":"2015-09-07T03:50:07.000Z","_content":"\n```bash\n//NSData转换为UIImage\nNSData *imageData = [NSData dataWithContentsOfFile: imagePath];\nUIImage *image = [UIImage imageWithData: imageData]**;\n\n//UIImage转换为NSData\n**NSData *imageData = UIImagePNGRepresentation(aimae);\n```\n\n\nIOS中对图片的处理 UIImage\n相信做项目时肯定会有用到 UIImage 这个类，那我们就来看一下这个类中都有什么内容。\n其实这篇文章就是在看文档的时候想记录一下文档中得方法。\nUIImage 继承于NSObject\n下面介绍一下UIImage中的方法\n首先是我们最常用的\n\n通过图片的文件名来获取这个图片\n**+ (UIImage *)imageNamed:(NSString *)name**\n//要注意的是这个方法适用于已经导入到工程中的图片\n\n创建新图片\n\n\n**1、+ (UIImage *)imageWithContentsOfFile:(NSString *)path**\n//通过文件加载指定路径下的文件内容获得新图片\n\n**2、+ (UIImage *)imageWithData:(NSData *)data**\n//通过一个NSData对象来获得图片\n**3、+ (UIImage *)imageWithData:(NSData *)data scale:(CGFloat)scale**\n//同上，只是再加上一个图片大小比例，用来改变图片的大小\n\n**4、+ (UIImage *)imageWithCGImage:(CGImageRef)cgImage**\n//使用Quartz 2D对象创建UIImage\n**5、+ (UIImage *)imageWithCGImage:(CGImageRef)imageRef scale:(CGFloat)scale orientation:(UIImageOrientation)orientation**\n//制定图片的比例和方向，其中方向是个枚举类。\n\n**6、+ (UIImage *)imageWithCIImage:(CIImage *)ciImage**\n//用一个Core Image 对象创建图像\n**7、+ (UIImage *)imageWithCIImage:(CIImage *)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation**\n//再加上比例和图片方向\n\n**8、- (UIImage *)imageWithAlignmentRectInsets:(UIEdgeInsets)alignmentInsets**\n//返回指定矩形区域内的图像\n\n**9、+ (UIImage *)animatedImageNamed:(NSString *)name duration:(NSTimeInterval)duration**\n//创建一个动态图片，动态图片持续的时间为duration\n**10、+ (UIImage *)animatedImageWithImages:(NSArray *)images duration:(NSTimeInterval)duration**\n//用一组图片创建一个动态图片，动态持续时间duration\n\n**11、+ (UIImage *)animatedResizableImageNamed:(NSString *)name capInsets:(UIEdgeInsets)capInsets duration:(NSTimeInterval)duration**\n//创建一个在可变大小的图片上指定矩形区域内的动态图片\n**12、+ (UIImage *)animatedResizableImageNamed:(NSString *)name capInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode duration:(NSTimeInterval)duration**\n//同上，只是多了一个图片变化的方式，具体来说就是平铺或者拉伸\n\n**13、- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets**\n//用制定矩形区域创建图像\n**14、- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode**\n//同上，指定图片变化方式\n\n初始化图片\n\n\n方法的作用在从上面的一些方法中都能找到原型，这里就不一一注释了\n**1、– initWithContentsOfFile: //从文件加载图片\n2、– initWithData: //用NSData对象初始化图片\n3、– initWithData:scale: //用NSData对象,指定的比例，初始化图片\n4、– initWithCGImage:\n5、– initWithCGImage:scale:orientation:\n6、– initWithCIImage:\n7、– initWithCIImage:scale:orientation:**\n\n\n绘画图片\n\n**1、– drawAtPoint:**\n//在指定的点开始绘画图片，这个点就是图片的做上角顶点\n**2、- (void)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha**\n//在指定的点绘制整个图片，并使用自定义图片复合模式，并设置透明度\n\n**3、– drawInRect:**\n//在指定区域内绘制图片，可根据需要缩放图片\n**4、– drawInRect:blendMode:alpha:**\n//参照上面第二条\n**5、– drawAsPatternInRect:**\n//在指定区域内，平铺图片\n\n\nimage的属性\nimageOrientation //图片的方向\nsize //图片的大小size\nscale //图片的比例\nresizingMode //图片变化方式\nCGImage //潜在的Quartz image\nCIImage //潜在的Core Image\nimages //返回一个由图片组成的数组，针对于由一组图片生成的动态图片\nduration //返回动态图片持续的时间（即动态图片播放一遍的时间）\ncapInsets //图片上选定的区域\nalignmentRectInsets //图片平铺的区域\n\n\n\n\n","source":"_posts/UIImage简单使用.markdown","raw":"# UIImage简单使用\ntitle: UIImage简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-07 11:50:07\n---\n\n```bash\n//NSData转换为UIImage\nNSData *imageData = [NSData dataWithContentsOfFile: imagePath];\nUIImage *image = [UIImage imageWithData: imageData]**;\n\n//UIImage转换为NSData\n**NSData *imageData = UIImagePNGRepresentation(aimae);\n```\n\n\nIOS中对图片的处理 UIImage\n相信做项目时肯定会有用到 UIImage 这个类，那我们就来看一下这个类中都有什么内容。\n其实这篇文章就是在看文档的时候想记录一下文档中得方法。\nUIImage 继承于NSObject\n下面介绍一下UIImage中的方法\n首先是我们最常用的\n\n通过图片的文件名来获取这个图片\n**+ (UIImage *)imageNamed:(NSString *)name**\n//要注意的是这个方法适用于已经导入到工程中的图片\n\n创建新图片\n\n\n**1、+ (UIImage *)imageWithContentsOfFile:(NSString *)path**\n//通过文件加载指定路径下的文件内容获得新图片\n\n**2、+ (UIImage *)imageWithData:(NSData *)data**\n//通过一个NSData对象来获得图片\n**3、+ (UIImage *)imageWithData:(NSData *)data scale:(CGFloat)scale**\n//同上，只是再加上一个图片大小比例，用来改变图片的大小\n\n**4、+ (UIImage *)imageWithCGImage:(CGImageRef)cgImage**\n//使用Quartz 2D对象创建UIImage\n**5、+ (UIImage *)imageWithCGImage:(CGImageRef)imageRef scale:(CGFloat)scale orientation:(UIImageOrientation)orientation**\n//制定图片的比例和方向，其中方向是个枚举类。\n\n**6、+ (UIImage *)imageWithCIImage:(CIImage *)ciImage**\n//用一个Core Image 对象创建图像\n**7、+ (UIImage *)imageWithCIImage:(CIImage *)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation**\n//再加上比例和图片方向\n\n**8、- (UIImage *)imageWithAlignmentRectInsets:(UIEdgeInsets)alignmentInsets**\n//返回指定矩形区域内的图像\n\n**9、+ (UIImage *)animatedImageNamed:(NSString *)name duration:(NSTimeInterval)duration**\n//创建一个动态图片，动态图片持续的时间为duration\n**10、+ (UIImage *)animatedImageWithImages:(NSArray *)images duration:(NSTimeInterval)duration**\n//用一组图片创建一个动态图片，动态持续时间duration\n\n**11、+ (UIImage *)animatedResizableImageNamed:(NSString *)name capInsets:(UIEdgeInsets)capInsets duration:(NSTimeInterval)duration**\n//创建一个在可变大小的图片上指定矩形区域内的动态图片\n**12、+ (UIImage *)animatedResizableImageNamed:(NSString *)name capInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode duration:(NSTimeInterval)duration**\n//同上，只是多了一个图片变化的方式，具体来说就是平铺或者拉伸\n\n**13、- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets**\n//用制定矩形区域创建图像\n**14、- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode**\n//同上，指定图片变化方式\n\n初始化图片\n\n\n方法的作用在从上面的一些方法中都能找到原型，这里就不一一注释了\n**1、– initWithContentsOfFile: //从文件加载图片\n2、– initWithData: //用NSData对象初始化图片\n3、– initWithData:scale: //用NSData对象,指定的比例，初始化图片\n4、– initWithCGImage:\n5、– initWithCGImage:scale:orientation:\n6、– initWithCIImage:\n7、– initWithCIImage:scale:orientation:**\n\n\n绘画图片\n\n**1、– drawAtPoint:**\n//在指定的点开始绘画图片，这个点就是图片的做上角顶点\n**2、- (void)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha**\n//在指定的点绘制整个图片，并使用自定义图片复合模式，并设置透明度\n\n**3、– drawInRect:**\n//在指定区域内绘制图片，可根据需要缩放图片\n**4、– drawInRect:blendMode:alpha:**\n//参照上面第二条\n**5、– drawAsPatternInRect:**\n//在指定区域内，平铺图片\n\n\nimage的属性\nimageOrientation //图片的方向\nsize //图片的大小size\nscale //图片的比例\nresizingMode //图片变化方式\nCGImage //潜在的Quartz image\nCIImage //潜在的Core Image\nimages //返回一个由图片组成的数组，针对于由一组图片生成的动态图片\nduration //返回动态图片持续的时间（即动态图片播放一遍的时间）\ncapInsets //图片上选定的区域\nalignmentRectInsets //图片平铺的区域\n\n\n\n\n","slug":"UIImage简单使用","published":1,"updated":"2015-09-09T03:18:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9f001bph3mh10h6z4c"},{"title":"UIFont简单使用","date":"2015-09-24T03:50:07.000Z","_content":"\n\nUIFont* font = [UIFont fontWithName:@\"Arial-ItalicMT\" size:21.0]; \nNSDictionary* textAttributes = @{NSFontAttributeName:font, \nNSForegroundColorAttributeName:[UIColor blackColor]}; \n\n[[UINavigationBar appearance]setTitleTextAttributes:textAttributes]; \n\n\n\n\n","source":"_posts/UIFont简单使用.markdown","raw":"# UIFont简单使用\ntitle: UIFont简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-24 11:50:07\n---\n\n\nUIFont* font = [UIFont fontWithName:@\"Arial-ItalicMT\" size:21.0]; \nNSDictionary* textAttributes = @{NSFontAttributeName:font, \nNSForegroundColorAttributeName:[UIColor blackColor]}; \n\n[[UINavigationBar appearance]setTitleTextAttributes:textAttributes]; \n\n\n\n\n","slug":"UIFont简单使用","published":1,"updated":"2015-09-24T11:10:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9g001dph3murgv9273"},{"title":"UIButton简单使用","date":"2015-09-09T09:50:07.000Z","_content":"```bash\nself.DemoOne = [[UIButton alloc] init];\nself.DemoOne.frame = CGRectMake([UIScreen mainScreen].bounds.size.width/2-50, [UIScreen mainScreen].bounds.size.height/2 -200, 100, 40);\n    [self.DemoOne setTitle:@\"DemoOne\" forState:UIControlStateNormal];\n    [self.view addSubview:self.DemoOne];\n```\n **(错误，不同于UILabel) // self.DemoOne.titleLabel.text = @\"DemoOne\";**\n\n\n\n\n","source":"_posts/UIButton简单使用.markdown","raw":"# UIButton简单使用\ntitle: UIButton简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-09 17:50:07\n---\n```bash\nself.DemoOne = [[UIButton alloc] init];\nself.DemoOne.frame = CGRectMake([UIScreen mainScreen].bounds.size.width/2-50, [UIScreen mainScreen].bounds.size.height/2 -200, 100, 40);\n    [self.DemoOne setTitle:@\"DemoOne\" forState:UIControlStateNormal];\n    [self.view addSubview:self.DemoOne];\n```\n **(错误，不同于UILabel) // self.DemoOne.titleLabel.text = @\"DemoOne\";**\n\n\n\n\n","slug":"UIButton简单使用","published":1,"updated":"2015-09-09T10:28:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9i001fph3mkssxfpgr"},{"title":"Swift实战之FoodPin(一)","date":"2015-09-10T09:50:07.000Z","_content":"经过大半年的object-c的项目的积累，觉得将来swift的发展潜力会更大，所以开始准备写一个简单的软件锻炼一下自己，参考了AppCoda Beginning iOS 8 Programming with Swift这本书之后，开始把他上面的项目做下来，当然中间会插入之前自己的实际经验和自己常用的类库\n\n建立一个名字叫FoodPin的项目，然后建立两个自定义的文件\nAppdelege 不多说，不懂谷歌\n```object-c\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        var tableViewController = RestaurantTableViewController()\n        var nav = UINavigationController(rootViewController: tableViewController)\n        self.window = UIWindow(frame:UIScreen.mainScreen().bounds)\n        self.window!.rootViewController = nav\n        self.window?.makeKeyAndVisible()\n        return true\n    }\n```\n\nRestaurantTableViewController(主页面)  继承之 UITableViewController重写这些方法\n```object-c\n    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return 1\n    }\n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 5\n    }\n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n//        let cell = tableView.dequeueReusableCellWithIdentifier(\"cell\", forIndexPath: indexPath) as! UITableViewCell\n//        let cell = tableView.dequeueReusableCellWithIdentifier(\"cell\",indexPath) as! UITableViewCell\n       var cell = CustomTableViewCell().cellWithTableView(tableView)\n        // Configure the cell...\n        cell.textLabel!.text = \"aa\"\n//            String(format:\"%d\",indexPath.row)\n        cell.backgroundColor = UIColor.redColor();\n//        cell.textLabel!.text = self.items[indexPath.row];\n        return cell\n    }\n```\n\nCustomTableViewCell(自定义的cell) 继承之UITableViewCell 添加方法\n```object-c\n     func cellWithTableView(tableView:UITableView) -> UITableViewCell\n    {\n                var cell = tableView.dequeueReusableCellWithIdentifier(\"sub\") as? UITableViewCell\n                if ((cell) == nil) {\n                 cell = CustomTableViewCell(style: UITableViewCellStyle.Subtitle, reuseIdentifier: \"sub\")\n                        //self.init(style: UITableViewStyle.Plain, reuseIdentifier: \"sub\")\n                }\n                return cell!;\n    }\n```  \n运行一下吧，主要刚刚开始用swift，这种声明和返回值很少有人说明，自己也浪费一点时间才尝试出来，有错请指正\n**func cellWithTableView(tableView:UITableView) -> UITableViewCell**\n\n就先到这里了，浪费两个小时才查到语法，以后熟悉了swift会加快进度的[源码点我](/CodeSource/FoodPin/DayCode/2015.09.10.zip)\n9月10号 －－－－－－－－－－－－－－－－－－－－－－－－－－－\n\n\n\n","source":"_posts/Swift实战之FoodPin(一).markdown","raw":"# Swift实战之FoodPin(一)\ntitle: Swift实战之FoodPin(一)\ntags : [项目,swift]\ndate: 2015-09-10 17:50:07\n---\n经过大半年的object-c的项目的积累，觉得将来swift的发展潜力会更大，所以开始准备写一个简单的软件锻炼一下自己，参考了AppCoda Beginning iOS 8 Programming with Swift这本书之后，开始把他上面的项目做下来，当然中间会插入之前自己的实际经验和自己常用的类库\n\n建立一个名字叫FoodPin的项目，然后建立两个自定义的文件\nAppdelege 不多说，不懂谷歌\n```object-c\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        var tableViewController = RestaurantTableViewController()\n        var nav = UINavigationController(rootViewController: tableViewController)\n        self.window = UIWindow(frame:UIScreen.mainScreen().bounds)\n        self.window!.rootViewController = nav\n        self.window?.makeKeyAndVisible()\n        return true\n    }\n```\n\nRestaurantTableViewController(主页面)  继承之 UITableViewController重写这些方法\n```object-c\n    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return 1\n    }\n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 5\n    }\n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n//        let cell = tableView.dequeueReusableCellWithIdentifier(\"cell\", forIndexPath: indexPath) as! UITableViewCell\n//        let cell = tableView.dequeueReusableCellWithIdentifier(\"cell\",indexPath) as! UITableViewCell\n       var cell = CustomTableViewCell().cellWithTableView(tableView)\n        // Configure the cell...\n        cell.textLabel!.text = \"aa\"\n//            String(format:\"%d\",indexPath.row)\n        cell.backgroundColor = UIColor.redColor();\n//        cell.textLabel!.text = self.items[indexPath.row];\n        return cell\n    }\n```\n\nCustomTableViewCell(自定义的cell) 继承之UITableViewCell 添加方法\n```object-c\n     func cellWithTableView(tableView:UITableView) -> UITableViewCell\n    {\n                var cell = tableView.dequeueReusableCellWithIdentifier(\"sub\") as? UITableViewCell\n                if ((cell) == nil) {\n                 cell = CustomTableViewCell(style: UITableViewCellStyle.Subtitle, reuseIdentifier: \"sub\")\n                        //self.init(style: UITableViewStyle.Plain, reuseIdentifier: \"sub\")\n                }\n                return cell!;\n    }\n```  \n运行一下吧，主要刚刚开始用swift，这种声明和返回值很少有人说明，自己也浪费一点时间才尝试出来，有错请指正\n**func cellWithTableView(tableView:UITableView) -> UITableViewCell**\n\n就先到这里了，浪费两个小时才查到语法，以后熟悉了swift会加快进度的[源码点我](/CodeSource/FoodPin/DayCode/2015.09.10.zip)\n9月10号 －－－－－－－－－－－－－－－－－－－－－－－－－－－\n\n\n\n","slug":"Swift实战之FoodPin(一)","published":1,"updated":"2015-09-10T09:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9j001hph3mobotge3n"},{"title":"StoryBoard简单使用","date":"2015-09-02T03:50:07.000Z","_content":"\n```bash\nKMMovieDetailsViewController* viewController \n= (KMMovieDetailsViewController*)[StoryBoardUtilities viewControllerForStoryboardName:@\"KMMovieDetailsStoryboard\" class:[KMMovieDetailsViewController class]];\n```\n界面配置\n![界面配置](/MyImage/StoryBoard/StoryBoard.png)\n\n### [源代码](/CodeSource/StoryBoard/StoryBoardUtilities.zip) (/CodeSource/StoryBoard/StoryBoardUtilities.zip)\n\nxib加载  建立名字为appxib.xib文件\n```object-c\nNSArray  *apparray= [[NSBundle mainBundle]loadNibNamed:@\"appxib\" owner:nil options:nil];\nUIView *appview=[apparray firstObject];\n```\n\n\n\n\n\n\n\n","source":"_posts/StoryBoard简单使用.markdown","raw":"# StoryBoard简单使用\ntitle: StoryBoard简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-02 11:50:07\n---\n\n```bash\nKMMovieDetailsViewController* viewController \n= (KMMovieDetailsViewController*)[StoryBoardUtilities viewControllerForStoryboardName:@\"KMMovieDetailsStoryboard\" class:[KMMovieDetailsViewController class]];\n```\n界面配置\n![界面配置](/MyImage/StoryBoard/StoryBoard.png)\n\n### [源代码](/CodeSource/StoryBoard/StoryBoardUtilities.zip) (/CodeSource/StoryBoard/StoryBoardUtilities.zip)\n\nxib加载  建立名字为appxib.xib文件\n```object-c\nNSArray  *apparray= [[NSBundle mainBundle]loadNibNamed:@\"appxib\" owner:nil options:nil];\nUIView *appview=[apparray firstObject];\n```\n\n\n\n\n\n\n\n","slug":"StoryBoard简单使用","published":1,"updated":"2015-09-12T03:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9l001mph3ma0ps7g3j"},{"title":"SDWebImage简单使用","date":"2015-11-22T03:50:07.000Z","_content":"最新版SDWebImage的使用\n\n \n我之前写过一篇博客，介绍缓存处理的三种方式，其中最难，最麻烦，最占内存资源的还是图片缓存，最近做的项目有大量的图片处理，还是采用了SDWebImage来处理，但是发现之前封装好的代码报错了。研究发现，是我用了新版的SDWebImage，好多方法都变了。\n\n现在把代码贴出来，供大家参考。尤其是新手，看完这篇博客，图片缓存so easy。最后有demo供大家下载，先学习。\n\n第一步，下载SDWebImage，导入工程。github托管地址https://github.com/rs/SDWebImage\n\n第二步，在需要的地方导入头文件\n\n1\n#import \"UIImageView+WebCache.h\"\n第三步，调用sd_setImageWithURL：方法缓存图片，注意，这就是新版本的新方法，旧方法是setImageWithURL:。下面将几个方法都介绍一下。\n\n1. sd_setImageWithURL：\n\n//图片缓存的基本代码，就是这么简单\n    [self.image1 sd_setImageWithURL:imagePath1];\n2. sd_setImageWithURL:  completed:\n\n//用block 可以在图片加载完成之后做些事情\n    [self.image2 sd_setImageWithURL:imagePath2 completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n         \n        NSLog(@\"这里可以在图片加载完成之后做些事情\");\n         \n    }];\n3. sd_setImageWithURL:  placeholderImage:\n\n//给一张默认图片，先使用默认图片，当图片加载完成后再替换\n    [self.image1 sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@\"default\"]];\n4. sd_setImageWithURL:  placeholderImage:  completed:\n\n//使用默认图片，而且用block 在完成后做一些事情\n    [self.image1 sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@\"default\"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n         \n        NSLog(@\"图片加载完成后做的事情\");\n         \n    }];\n5. sd_setImageWithURL:  placeholderImage:  options:\n\n//options 选择方式\n     \n    [self.image1 sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@\"default\"] options:SDWebImageRetryFailed];\n其他就不一一介绍了，oc是自文档语言，看方法名就知道干什么的了。除了带options选项的方法，其他的方法都是综合存储，也就是内存缓存和磁盘缓存结合的方式，如果你只需要内存缓存，那么在options这里选择SDWebImageCacheMemoryOnly就可以了。\n\n如果不想深入了解，到这里你已经可以用SDWebimage进行图片缓存了，接下来我要解释options的所有选项，以及SDWebImage内部执行流程。\n\n一、options所有选项：\n\n　　//失败后重试\n     SDWebImageRetryFailed = 1 << 0,\n      \n     //UI交互期间开始下载，导致延迟下载比如UIScrollView减速。\n     SDWebImageLowPriority = 1 << 1,\n      \n     //只进行内存缓存\n     SDWebImageCacheMemoryOnly = 1 << 2,\n      \n     //这个标志可以渐进式下载,显示的图像是逐步在下载\n     SDWebImageProgressiveDownload = 1 << 3,\n      \n     //刷新缓存\n     SDWebImageRefreshCached = 1 << 4,\n      \n     //后台下载\n     SDWebImageContinueInBackground = 1 << 5,\n      \n     //NSMutableURLRequest.HTTPShouldHandleCookies = YES;\n      \n     SDWebImageHandleCookies = 1 << 6,\n      \n     //允许使用无效的SSL证书\n     //SDWebImageAllowInvalidSSLCertificates = 1 << 7,\n      \n     //优先下载\n     SDWebImageHighPriority = 1 << 8,\n      \n     //延迟占位符\n     SDWebImageDelayPlaceholder = 1 << 9,\n      \n     //改变动画形象\n     SDWebImageTransformAnimatedImage = 1 << 10,\n二、SDWebImage内部实现过程\n\n入口 setImageWithURL:placeholderImage:options: 会先把 placeholderImage 显示，然后 SDWebImageManager 根据 URL 开始处理图片。\n进入 SDWebImageManager-downloadWithURL:delegate:options:userInfo:，交给 SDImageCache 从缓存查找图片是否已经下载 queryDiskCacheForKey:delegate:userInfo:.\n先从内存图片缓存查找是否有图片，如果内存中已经有图片缓存，SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo: 到 SDWebImageManager。\nSDWebImageManagerDelegate 回调 webImageManager:didFinishWithImage: 到 UIImageView+WebCache 等前端展示图片。\n如果内存缓存中没有，生成 NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存。\n根据 URLKey 在硬盘缓存目录下尝试读取图片文件。这一步是在 NSOperation 进行的操作，所以回主线程进行结果回调 notifyDelegate:。\n如果上一操作从硬盘读取到了图片，将图片添加到内存缓存中（如果空闲内存过小，会先清空内存缓存）。SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:。进而回调展示图片。\n如果从硬盘缓存目录读取不到图片，说明所有缓存都不存在该图片，需要下载图片，回调 imageCache:didNotFindImageForKey:userInfo:。\n共享或重新生成一个下载器 SDWebImageDownloader 开始下载图片。\n图片下载由 NSURLConnection 来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。\nconnection:didReceiveData: 中利用 ImageIO 做了按图片下载进度加载效果。\nconnectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。\n图片解码处理在一个 NSOperationQueue 完成，不会拖慢主线程 UI。如果有需要对下载的图片进行二次处理，最好也在这里完成，效率会好很多。\n在主线程 notifyDelegateOnMainThreadWithInfo: 宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo: 回调给 SDWebImageDownloader。\nimageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。\n通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。\n将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以单独 NSInvocationOperation 完成，避免拖慢主线程。\nSDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片。\nSDWI 也提供了 UIButton+WebCache 和 MKAnnotationView+WebCache，方便使用。\nSDWebImagePrefetcher 可以预先下载图片，方便后续使用。\n从上面流程可以看出，当你调用setImageWithURL:方法的时候，他会自动去给你干这么多事，当你需要在某一具体时刻做事情的时候，你可以覆盖这些方法。比如在下载某个图片的过程中要响应一个事件，就覆盖这个方法：\n\n\n//覆盖方法，指哪打哪，这个方法是下载imagePath2的时候响应\n    SDWebImageManager *manager = [SDWebImageManager sharedManager];\n     \n    [manager downloadImageWithURL:imagePath2 options:SDWebImageRetryFailed progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n         \n        NSLog(@\"显示当前进度\");\n         \n    } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n         \n        NSLog(@\"下载完成\");\n    }];\n对于初级来说，用sd_setImageWithURL:的若干个方法就可以实现很好的图片缓存。\n\n\n\n\n","source":"_posts/SDWebImage简单使用.markdown","raw":"# SDWebImage简单使用\n\ntitle: SDWebImage简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-22 11:50:07\n---\n最新版SDWebImage的使用\n\n \n我之前写过一篇博客，介绍缓存处理的三种方式，其中最难，最麻烦，最占内存资源的还是图片缓存，最近做的项目有大量的图片处理，还是采用了SDWebImage来处理，但是发现之前封装好的代码报错了。研究发现，是我用了新版的SDWebImage，好多方法都变了。\n\n现在把代码贴出来，供大家参考。尤其是新手，看完这篇博客，图片缓存so easy。最后有demo供大家下载，先学习。\n\n第一步，下载SDWebImage，导入工程。github托管地址https://github.com/rs/SDWebImage\n\n第二步，在需要的地方导入头文件\n\n1\n#import \"UIImageView+WebCache.h\"\n第三步，调用sd_setImageWithURL：方法缓存图片，注意，这就是新版本的新方法，旧方法是setImageWithURL:。下面将几个方法都介绍一下。\n\n1. sd_setImageWithURL：\n\n//图片缓存的基本代码，就是这么简单\n    [self.image1 sd_setImageWithURL:imagePath1];\n2. sd_setImageWithURL:  completed:\n\n//用block 可以在图片加载完成之后做些事情\n    [self.image2 sd_setImageWithURL:imagePath2 completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n         \n        NSLog(@\"这里可以在图片加载完成之后做些事情\");\n         \n    }];\n3. sd_setImageWithURL:  placeholderImage:\n\n//给一张默认图片，先使用默认图片，当图片加载完成后再替换\n    [self.image1 sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@\"default\"]];\n4. sd_setImageWithURL:  placeholderImage:  completed:\n\n//使用默认图片，而且用block 在完成后做一些事情\n    [self.image1 sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@\"default\"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n         \n        NSLog(@\"图片加载完成后做的事情\");\n         \n    }];\n5. sd_setImageWithURL:  placeholderImage:  options:\n\n//options 选择方式\n     \n    [self.image1 sd_setImageWithURL:imagePath1 placeholderImage:[UIImage imageNamed:@\"default\"] options:SDWebImageRetryFailed];\n其他就不一一介绍了，oc是自文档语言，看方法名就知道干什么的了。除了带options选项的方法，其他的方法都是综合存储，也就是内存缓存和磁盘缓存结合的方式，如果你只需要内存缓存，那么在options这里选择SDWebImageCacheMemoryOnly就可以了。\n\n如果不想深入了解，到这里你已经可以用SDWebimage进行图片缓存了，接下来我要解释options的所有选项，以及SDWebImage内部执行流程。\n\n一、options所有选项：\n\n　　//失败后重试\n     SDWebImageRetryFailed = 1 << 0,\n      \n     //UI交互期间开始下载，导致延迟下载比如UIScrollView减速。\n     SDWebImageLowPriority = 1 << 1,\n      \n     //只进行内存缓存\n     SDWebImageCacheMemoryOnly = 1 << 2,\n      \n     //这个标志可以渐进式下载,显示的图像是逐步在下载\n     SDWebImageProgressiveDownload = 1 << 3,\n      \n     //刷新缓存\n     SDWebImageRefreshCached = 1 << 4,\n      \n     //后台下载\n     SDWebImageContinueInBackground = 1 << 5,\n      \n     //NSMutableURLRequest.HTTPShouldHandleCookies = YES;\n      \n     SDWebImageHandleCookies = 1 << 6,\n      \n     //允许使用无效的SSL证书\n     //SDWebImageAllowInvalidSSLCertificates = 1 << 7,\n      \n     //优先下载\n     SDWebImageHighPriority = 1 << 8,\n      \n     //延迟占位符\n     SDWebImageDelayPlaceholder = 1 << 9,\n      \n     //改变动画形象\n     SDWebImageTransformAnimatedImage = 1 << 10,\n二、SDWebImage内部实现过程\n\n入口 setImageWithURL:placeholderImage:options: 会先把 placeholderImage 显示，然后 SDWebImageManager 根据 URL 开始处理图片。\n进入 SDWebImageManager-downloadWithURL:delegate:options:userInfo:，交给 SDImageCache 从缓存查找图片是否已经下载 queryDiskCacheForKey:delegate:userInfo:.\n先从内存图片缓存查找是否有图片，如果内存中已经有图片缓存，SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo: 到 SDWebImageManager。\nSDWebImageManagerDelegate 回调 webImageManager:didFinishWithImage: 到 UIImageView+WebCache 等前端展示图片。\n如果内存缓存中没有，生成 NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存。\n根据 URLKey 在硬盘缓存目录下尝试读取图片文件。这一步是在 NSOperation 进行的操作，所以回主线程进行结果回调 notifyDelegate:。\n如果上一操作从硬盘读取到了图片，将图片添加到内存缓存中（如果空闲内存过小，会先清空内存缓存）。SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:。进而回调展示图片。\n如果从硬盘缓存目录读取不到图片，说明所有缓存都不存在该图片，需要下载图片，回调 imageCache:didNotFindImageForKey:userInfo:。\n共享或重新生成一个下载器 SDWebImageDownloader 开始下载图片。\n图片下载由 NSURLConnection 来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。\nconnection:didReceiveData: 中利用 ImageIO 做了按图片下载进度加载效果。\nconnectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。\n图片解码处理在一个 NSOperationQueue 完成，不会拖慢主线程 UI。如果有需要对下载的图片进行二次处理，最好也在这里完成，效率会好很多。\n在主线程 notifyDelegateOnMainThreadWithInfo: 宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo: 回调给 SDWebImageDownloader。\nimageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。\n通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。\n将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以单独 NSInvocationOperation 完成，避免拖慢主线程。\nSDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片。\nSDWI 也提供了 UIButton+WebCache 和 MKAnnotationView+WebCache，方便使用。\nSDWebImagePrefetcher 可以预先下载图片，方便后续使用。\n从上面流程可以看出，当你调用setImageWithURL:方法的时候，他会自动去给你干这么多事，当你需要在某一具体时刻做事情的时候，你可以覆盖这些方法。比如在下载某个图片的过程中要响应一个事件，就覆盖这个方法：\n\n\n//覆盖方法，指哪打哪，这个方法是下载imagePath2的时候响应\n    SDWebImageManager *manager = [SDWebImageManager sharedManager];\n     \n    [manager downloadImageWithURL:imagePath2 options:SDWebImageRetryFailed progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n         \n        NSLog(@\"显示当前进度\");\n         \n    } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n         \n        NSLog(@\"下载完成\");\n    }];\n对于初级来说，用sd_setImageWithURL:的若干个方法就可以实现很好的图片缓存。\n\n\n\n\n","slug":"SDWebImage简单使用","published":1,"updated":"2015-11-24T08:44:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9m001oph3m9tgaeefm"},{"title":"ReactNative简单使用","date":"2015-10-15T03:50:07.000Z","_content":"\n**介绍**\nhttp://www.linuxidc.com/Linux/2015-09/123239.htm\n\n**React**\nhttp://baike.baidu.com/link?url=sgXYXYrN7O5-Wbdfx1kMyqAno2vr7bVobWp7A_stqJ9YZOCrDcfwlnuCcoqg9GSHs7nbfJ2NIpqQGx0O2SZvBsqzP4MkzFVNN7SSMZQLT4BZYM-0jHJ4jmwVsDP8YHQX1Ob0A02bKgi2l8niGT_rYRgQVzXrbm4k4WjJPSvt5GcP8IbvS3ESvPngt7o51n_9a6xAFL2q1zzNNK1q5L-L8ZyWKUWRUj0MQi0iwqxvQyi\n\nhttp://www.ruanyifeng.com/blog/2015/03/react.html\n**JSX**\nhttp://reactjs.cn/react/docs/jsx-in-depth.html\n**flex-css**\nhttp://www.tuicool.com/articles/a6Rjmi2\nhttp://www.cocoachina.com/ios/20150420/11608.html\n\n**React Native For Android 架构初探**\nhttp://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=207782506&idx=1&sn=3ff6b03c0d59fbda406f64739d9272cf&scene=1&srcid=1009Q3qo6mLeT2ydjdzUwLQ7&from=groupmessage&isappinstalled=0#rd\n\n\n**整理了一份React-Native学习指南**\nhttp://www.tuicool.com/articles/zaInUbA\n\n**工具**\nhttp://www.cocoachina.com/ios/20150327/11439.html\nhttps://github.com/facebook/nuclide\n\n**例子说明**\n参考文档\nhttp://wiki.jikexueyuan.com/project/react-native/GettingStarted.html\n\n![工程结构](/MyImage/ReactNative/ReactNativeProjectBase.png)\n\n\n    'use strict';\n    /**\n     * Sample React Native App\n     * https://github.com/facebook/react-native\n     */\n    'use strict';\n\n    var React = require('react-native');\n    var NSUITableViewController = require('./NSUITableViewController'); //引入其他模块\n    var NSUINavigationController = require('./NSUINavigationController');\n    var REQUEST_URL = 'https://raw.githubusercontent.com/facebook/react-native/master/docs/MoviesExample.json';\n    var {\n     AppRegistry,\n     Image,\n     StyleSheet,\n     Text,\n     View,\n     ListView,\n     NavigatorIOS,   //注册导航控件\n     TabBarIOS,      //注册tarbar控件\n    } = React;\n\n    var PropertyFinder = React.createClass({\n    \n    getInitialState: function() {\n    return {\n      dataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n      }),\n      loaded: false,\n    };\n     },   //设置状态\n     \n      componentDidMount: function() {\n        this.fetchData();\n     },   //componentDidMount 是 React 组件里面只会调用一次的函数。\n     \n     fetchData: function() {\n      fetch(REQUEST_URL)\n       .then((response) => response.json())\n          .then((responseData) => {\n          this.setState({\n             dataSource: this.state.dataSource.cloneWithRows(responseData.movies),\n              loaded: true,\n          });\n       })\n          .done();\n     },   //获取数据\n \n      render: function()  {   //渲染函数\n\n        return (\n          <TabBarIOS>\n            <TabBarIOS.Item title=\"React Native\" \n            selected={this.state.selectedTab === 'blueTab'} \n            icon={require('./flux.png')}\n            onPress={() => {\n                               this.setState({\n                               selectedTab: 'blueTab',\n                                       });\n                                }}\n            >\n             <NavigatorIOS\n            style={{flex : 1,backgroundColor: '#000000'}}\n            tintColor='#cccccc'\n            barTintColor='#ccffcc'\n            initialRoute={{\n              title: 'blueTab',\n              component: NSUITableViewController,\n            }}/>\n            </TabBarIOS.Item>\n                 <TabBarIOS.Item title=\"React Native\" \n                  selected={this.state.selectedTab === 'redTab'} \n                  icon={require('./flux.png')}\n                        onPress={() => {\n                               this.setState({\n                               selectedTab: 'redTab',\n                                       });\n                                }}\n                 >\n             <NavigatorIOS\n            style={{flex : 1,backgroundColor: '#000000'}}\n            tintColor='#cccccc'\n            barTintColor='#c00cccc'\n            initialRoute={{\n              title: 'redTab',\n              component: NSUITableViewController,\n            }}/>\n            </TabBarIOS.Item>\n                     <TabBarIOS.Item title=\"React Native\" \n                  selected={this.state.selectedTab === 'greenTab'} \n                  icon={require('./flux.png')}\n                        onPress={() => {\n                               this.setState({\n                               selectedTab: 'greenTab',\n                                       });\n                                }}\n                 >\n             <NavigatorIOS\n            style={{flex : 1,backgroundColor: '#000000'}}\n            tintColor='#cccccc'\n            barTintColor='#ccccff'\n            initialRoute={{\n              title: 'greenTab',\n              component: NSUITableViewController,\n            }}/>\n            </TabBarIOS.Item>\n          </TabBarIOS>\n      \n        );   \n    },\n\n    _renderContent: function(color: string, pageText: string, num?: number) {\n    return (\n      <View style={[styles.tabContent, {backgroundColor: color}]}>\n        <Text style={styles.tabText}>{pageText}</Text>\n        <Text style={styles.tabText}>{num} re-renders of the {pageText}</Text>\n      </View>\n    );\n      },\n      renderLoadingView: function() {\n    return (\n      <View style={styles.container}>\n        <Text>\n          Loading movies...\n        </Text>\n      </View>\n    );\n      },\n\n      renderMovie: function(movie) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{uri: movie.posters.thumbnail}}\n          style={styles.thumbnail}\n        />\n        <View style={styles.rightContainer}>\n          <Text style={styles.title}>{movie.title}</Text>\n          <Text style={styles.year}>{movie.year}</Text>\n        </View>\n      </View>\n    );\n      },\n    });\n\n    var Style = StyleSheet.create({\n      container: {\n      flex: 1,\n      backgroundColor: '#F5FCFF'\n     },\n      navigator: {\n      backgroundColor: '#EFEFEF'\n     }\n    });\n\n    var styles = StyleSheet.create({\n     container: {\n       flex: 1,\n       flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: '#F5FCFF',\n      },\n      rightContainer: {\n        flex: 1,\n      },\n     title: {\n       fontSize: 20,\n       marginBottom: 8,\n       textAlign: 'center',\n     },\n     year: {\n       textAlign: 'center',\n      },\n      welcome: {\n       fontSize: 20,\n       textAlign: 'center',\n       margin: 10,\n     },\n    instructions: {\n       textAlign: 'center',\n        color: '#333333',\n        marginBottom: 5,\n      },\n     thumbnail: {\n       width: 53,\n       height: 81,\n      },\n     listView: {\n       paddingTop: 20,\n       backgroundColor: '#F5FCFF',\n    },\n    });\n\n    AppRegistry.registerComponent('PropertyFinder', () => PropertyFinder);\n\n\n\n\n\n\n\n\n","source":"_posts/ReactNative简单使用.markdown","raw":"# ReactNative简单使用\ntitle: ReactNative简单使用\ntags : [IOS开发SDK]\ndate: 2015-10-15 11:50:07\n---\n\n**介绍**\nhttp://www.linuxidc.com/Linux/2015-09/123239.htm\n\n**React**\nhttp://baike.baidu.com/link?url=sgXYXYrN7O5-Wbdfx1kMyqAno2vr7bVobWp7A_stqJ9YZOCrDcfwlnuCcoqg9GSHs7nbfJ2NIpqQGx0O2SZvBsqzP4MkzFVNN7SSMZQLT4BZYM-0jHJ4jmwVsDP8YHQX1Ob0A02bKgi2l8niGT_rYRgQVzXrbm4k4WjJPSvt5GcP8IbvS3ESvPngt7o51n_9a6xAFL2q1zzNNK1q5L-L8ZyWKUWRUj0MQi0iwqxvQyi\n\nhttp://www.ruanyifeng.com/blog/2015/03/react.html\n**JSX**\nhttp://reactjs.cn/react/docs/jsx-in-depth.html\n**flex-css**\nhttp://www.tuicool.com/articles/a6Rjmi2\nhttp://www.cocoachina.com/ios/20150420/11608.html\n\n**React Native For Android 架构初探**\nhttp://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=207782506&idx=1&sn=3ff6b03c0d59fbda406f64739d9272cf&scene=1&srcid=1009Q3qo6mLeT2ydjdzUwLQ7&from=groupmessage&isappinstalled=0#rd\n\n\n**整理了一份React-Native学习指南**\nhttp://www.tuicool.com/articles/zaInUbA\n\n**工具**\nhttp://www.cocoachina.com/ios/20150327/11439.html\nhttps://github.com/facebook/nuclide\n\n**例子说明**\n参考文档\nhttp://wiki.jikexueyuan.com/project/react-native/GettingStarted.html\n\n![工程结构](/MyImage/ReactNative/ReactNativeProjectBase.png)\n\n\n    'use strict';\n    /**\n     * Sample React Native App\n     * https://github.com/facebook/react-native\n     */\n    'use strict';\n\n    var React = require('react-native');\n    var NSUITableViewController = require('./NSUITableViewController'); //引入其他模块\n    var NSUINavigationController = require('./NSUINavigationController');\n    var REQUEST_URL = 'https://raw.githubusercontent.com/facebook/react-native/master/docs/MoviesExample.json';\n    var {\n     AppRegistry,\n     Image,\n     StyleSheet,\n     Text,\n     View,\n     ListView,\n     NavigatorIOS,   //注册导航控件\n     TabBarIOS,      //注册tarbar控件\n    } = React;\n\n    var PropertyFinder = React.createClass({\n    \n    getInitialState: function() {\n    return {\n      dataSource: new ListView.DataSource({\n        rowHasChanged: (row1, row2) => row1 !== row2,\n      }),\n      loaded: false,\n    };\n     },   //设置状态\n     \n      componentDidMount: function() {\n        this.fetchData();\n     },   //componentDidMount 是 React 组件里面只会调用一次的函数。\n     \n     fetchData: function() {\n      fetch(REQUEST_URL)\n       .then((response) => response.json())\n          .then((responseData) => {\n          this.setState({\n             dataSource: this.state.dataSource.cloneWithRows(responseData.movies),\n              loaded: true,\n          });\n       })\n          .done();\n     },   //获取数据\n \n      render: function()  {   //渲染函数\n\n        return (\n          <TabBarIOS>\n            <TabBarIOS.Item title=\"React Native\" \n            selected={this.state.selectedTab === 'blueTab'} \n            icon={require('./flux.png')}\n            onPress={() => {\n                               this.setState({\n                               selectedTab: 'blueTab',\n                                       });\n                                }}\n            >\n             <NavigatorIOS\n            style={{flex : 1,backgroundColor: '#000000'}}\n            tintColor='#cccccc'\n            barTintColor='#ccffcc'\n            initialRoute={{\n              title: 'blueTab',\n              component: NSUITableViewController,\n            }}/>\n            </TabBarIOS.Item>\n                 <TabBarIOS.Item title=\"React Native\" \n                  selected={this.state.selectedTab === 'redTab'} \n                  icon={require('./flux.png')}\n                        onPress={() => {\n                               this.setState({\n                               selectedTab: 'redTab',\n                                       });\n                                }}\n                 >\n             <NavigatorIOS\n            style={{flex : 1,backgroundColor: '#000000'}}\n            tintColor='#cccccc'\n            barTintColor='#c00cccc'\n            initialRoute={{\n              title: 'redTab',\n              component: NSUITableViewController,\n            }}/>\n            </TabBarIOS.Item>\n                     <TabBarIOS.Item title=\"React Native\" \n                  selected={this.state.selectedTab === 'greenTab'} \n                  icon={require('./flux.png')}\n                        onPress={() => {\n                               this.setState({\n                               selectedTab: 'greenTab',\n                                       });\n                                }}\n                 >\n             <NavigatorIOS\n            style={{flex : 1,backgroundColor: '#000000'}}\n            tintColor='#cccccc'\n            barTintColor='#ccccff'\n            initialRoute={{\n              title: 'greenTab',\n              component: NSUITableViewController,\n            }}/>\n            </TabBarIOS.Item>\n          </TabBarIOS>\n      \n        );   \n    },\n\n    _renderContent: function(color: string, pageText: string, num?: number) {\n    return (\n      <View style={[styles.tabContent, {backgroundColor: color}]}>\n        <Text style={styles.tabText}>{pageText}</Text>\n        <Text style={styles.tabText}>{num} re-renders of the {pageText}</Text>\n      </View>\n    );\n      },\n      renderLoadingView: function() {\n    return (\n      <View style={styles.container}>\n        <Text>\n          Loading movies...\n        </Text>\n      </View>\n    );\n      },\n\n      renderMovie: function(movie) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{uri: movie.posters.thumbnail}}\n          style={styles.thumbnail}\n        />\n        <View style={styles.rightContainer}>\n          <Text style={styles.title}>{movie.title}</Text>\n          <Text style={styles.year}>{movie.year}</Text>\n        </View>\n      </View>\n    );\n      },\n    });\n\n    var Style = StyleSheet.create({\n      container: {\n      flex: 1,\n      backgroundColor: '#F5FCFF'\n     },\n      navigator: {\n      backgroundColor: '#EFEFEF'\n     }\n    });\n\n    var styles = StyleSheet.create({\n     container: {\n       flex: 1,\n       flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: '#F5FCFF',\n      },\n      rightContainer: {\n        flex: 1,\n      },\n     title: {\n       fontSize: 20,\n       marginBottom: 8,\n       textAlign: 'center',\n     },\n     year: {\n       textAlign: 'center',\n      },\n      welcome: {\n       fontSize: 20,\n       textAlign: 'center',\n       margin: 10,\n     },\n    instructions: {\n       textAlign: 'center',\n        color: '#333333',\n        marginBottom: 5,\n      },\n     thumbnail: {\n       width: 53,\n       height: 81,\n      },\n     listView: {\n       paddingTop: 20,\n       backgroundColor: '#F5FCFF',\n    },\n    });\n\n    AppRegistry.registerComponent('PropertyFinder', () => PropertyFinder);\n\n\n\n\n\n\n\n\n","slug":"ReactNative简单使用","published":1,"updated":"2015-10-16T01:08:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9p001qph3m4xaziw90"},{"title":"Object-C与Swift混编","date":"2015-09-15T09:50:07.000Z","_content":"\n![界面配置](/MyImage/Swift/Object-C与Swift混编.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编1.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编2.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编3.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编4.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编5.png)\n\n在此输入正文\n\n\n\n\n","source":"_posts/Object-C与Swift混编.markdown","raw":"# Object-C与Swift混编\ntitle: Object-C与Swift混编\ntags : [IOS-Swift]\ndate: 2015-09-15 17:50:07\n---\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编1.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编2.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编3.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编4.png)\n\n![界面配置](/MyImage/Swift/Object-C与Swift混编5.png)\n\n在此输入正文\n\n\n\n\n","slug":"Object-C与Swift混编","published":1,"updated":"2015-09-15T07:35:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9r001sph3m06ktec2p"},{"title":"Node包管理","date":"2015-09-08T09:10:07.000Z","_content":"\nnode有一个模块叫n（这名字可够短的。。。），是专门用来管理node.js的版本的。\n首先安装n模块：\nnpm install -g n\n第二步：\n升级node.js到最新稳定版\nn stable\n是不是很简单？！\nn后面也可以跟随版本号比如：\nn v0.10.26\n或\nn 0.10.26\n就这么简单，这可怎么办？？！！\n另外分享几个npm的常用命令\n\nnpm -v          #显示版本，检查npm 是否正确安装。\n \nnpm install express   #安装express模块\n \nnpm install -g express  #全局安装express模块\n \nnpm list         #列出已安装模块\n \nnpm show express     #显示模块详情\n \nnpm update        #升级当前目录下的项目的所有模块\n \nnpm update express    #升级当前目录下的项目的指定模块\n \nnpm update -g express  #升级全局安装的express模块\n \nnpm uninstall express  #删除指定的模块\n\n\n\n1.curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n\n2。vi ~/.bash_profile\n　　添加：source /Users/dujie/.nvm/nvm.sh\n\nnvm install 0.10.24\nnvm use 0.10.24\n# 默認使用 0.10.24 版本，否則每次關掉 Terminal 就得重新 nvm use 一次\n$ nvm alias default 0.10.24\n\n# 列出所有安裝的版本\n$ nvm ls\n\n\n# 列出總共有哪些版本可以安裝\n$ nvm ls-remote\n\n\n安装常用的工具\nnpm install -g express \nnpm install -g bower\nnpm install -g fis\n","source":"_posts/Node包管理.markdown","raw":"# Node包管理\n\ntitle: Node包管理\ntags : [Node]\ndate: 2015-09-08 17:10:07\n---\n\nnode有一个模块叫n（这名字可够短的。。。），是专门用来管理node.js的版本的。\n首先安装n模块：\nnpm install -g n\n第二步：\n升级node.js到最新稳定版\nn stable\n是不是很简单？！\nn后面也可以跟随版本号比如：\nn v0.10.26\n或\nn 0.10.26\n就这么简单，这可怎么办？？！！\n另外分享几个npm的常用命令\n\nnpm -v          #显示版本，检查npm 是否正确安装。\n \nnpm install express   #安装express模块\n \nnpm install -g express  #全局安装express模块\n \nnpm list         #列出已安装模块\n \nnpm show express     #显示模块详情\n \nnpm update        #升级当前目录下的项目的所有模块\n \nnpm update express    #升级当前目录下的项目的指定模块\n \nnpm update -g express  #升级全局安装的express模块\n \nnpm uninstall express  #删除指定的模块\n\n\n\n1.curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n\n2。vi ~/.bash_profile\n　　添加：source /Users/dujie/.nvm/nvm.sh\n\nnvm install 0.10.24\nnvm use 0.10.24\n# 默認使用 0.10.24 版本，否則每次關掉 Terminal 就得重新 nvm use 一次\n$ nvm alias default 0.10.24\n\n# 列出所有安裝的版本\n$ nvm ls\n\n\n# 列出總共有哪些版本可以安裝\n$ nvm ls-remote\n\n\n安装常用的工具\nnpm install -g express \nnpm install -g bower\nnpm install -g fis\n","slug":"Node包管理","published":1,"updated":"2015-11-19T09:37:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9v001vph3mch2ehf0v"},{"title":"NSURL简单使用","date":"2015-11-15T03:50:07.000Z","_content":"\nNSURL *url = [NSURL URLWithString:@\"http://www.baidu.com/search?id=1\"];\n    NSLog(@\"scheme:%@\", [url scheme]); //协议 http\n    NSLog(@\"host:%@\", [url host]);     //域名 www.baidu.com\n    NSLog(@\"absoluteString:%@\", [url absoluteString]); //完整的url字符串http://www.baidu.com:8080/search?id=1\n    NSLog(@\"relativePath: %@\", [url relativePath]); //相对路径 search\n    NSLog(@\"port :%@\", [url port]);  // 端口 8080\n    NSLog(@\"path: %@\", [url path]);  // 路径 search\n    NSLog(@\"pathComponents:%@\", [url pathComponents]); // search\n    NSLog(@\"Query:%@\", [url query]);  //参数 id=1\n    \n    \nhttp://ubluesky.com/archives/55\n\n\n\n\n","source":"_posts/NSURL简单使用.markdown","raw":"# NSURL简单使用\ntitle: NSURL简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-15 11:50:07\n---\n\nNSURL *url = [NSURL URLWithString:@\"http://www.baidu.com/search?id=1\"];\n    NSLog(@\"scheme:%@\", [url scheme]); //协议 http\n    NSLog(@\"host:%@\", [url host]);     //域名 www.baidu.com\n    NSLog(@\"absoluteString:%@\", [url absoluteString]); //完整的url字符串http://www.baidu.com:8080/search?id=1\n    NSLog(@\"relativePath: %@\", [url relativePath]); //相对路径 search\n    NSLog(@\"port :%@\", [url port]);  // 端口 8080\n    NSLog(@\"path: %@\", [url path]);  // 路径 search\n    NSLog(@\"pathComponents:%@\", [url pathComponents]); // search\n    NSLog(@\"Query:%@\", [url query]);  //参数 id=1\n    \n    \nhttp://ubluesky.com/archives/55\n\n\n\n\n","slug":"NSURL简单使用","published":1,"updated":"2015-11-19T09:40:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9w001xph3m58ycrgd3"},{"title":"NSNotification简单使用","date":"2015-11-15T03:50:07.000Z","_content":"\n接着上回说的iOS页面传值问题\n\n传送门---------->iOS页面传值之代理传值\n\n接下来我们说说NSNotificationCenter传值方式\n\n在开始之前，我们首先得知道KVO模式\n\nKey-Value Observing (KVO) 键值监听\n\n就是说当你告诉通知中心一个Key 他会根据Value的变化做些事情，或者是获取一些数据\n\n说上千回，不如用上一回。 \n\n \n\n我们在B控制器发送一个监听\n\n[[NSNotificationCenter defaultCenter] postNotificationName:@\"ChangeNameNotification\" object:self userInfo:@{@\"name\":self.textField.text}];\n\n \n\n而在A控制器中设置A本身为一个监听者（好比A这时候正在监听它，可以这么理解，一个KVO可以用多个监视者。这里只有一个控制器A）\n\n具体代码\n\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(ChangeNameNotification:) name:@\"ChangeNameNotification\" object:nil];\n\n再在A控制器中实现ChangeNameNotification：方法\n\n-(void)ChangeNameNotification:(NSNotification*)notification{\n\n \n\n    NSDictionary *nameDictionary = [notification userInfo];\n\n    \n\n    self.textLabel.text = [nameDictionary objectForKey:@\"name\"];\n\n \n\n}\n\n \n\n\n\n\n","source":"_posts/NSNotification简单使用.markdown","raw":"# NSNotification简单使用\n\ntitle: NSNotification简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-15 11:50:07\n---\n\n接着上回说的iOS页面传值问题\n\n传送门---------->iOS页面传值之代理传值\n\n接下来我们说说NSNotificationCenter传值方式\n\n在开始之前，我们首先得知道KVO模式\n\nKey-Value Observing (KVO) 键值监听\n\n就是说当你告诉通知中心一个Key 他会根据Value的变化做些事情，或者是获取一些数据\n\n说上千回，不如用上一回。 \n\n \n\n我们在B控制器发送一个监听\n\n[[NSNotificationCenter defaultCenter] postNotificationName:@\"ChangeNameNotification\" object:self userInfo:@{@\"name\":self.textField.text}];\n\n \n\n而在A控制器中设置A本身为一个监听者（好比A这时候正在监听它，可以这么理解，一个KVO可以用多个监视者。这里只有一个控制器A）\n\n具体代码\n\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(ChangeNameNotification:) name:@\"ChangeNameNotification\" object:nil];\n\n再在A控制器中实现ChangeNameNotification：方法\n\n-(void)ChangeNameNotification:(NSNotification*)notification{\n\n \n\n    NSDictionary *nameDictionary = [notification userInfo];\n\n    \n\n    self.textLabel.text = [nameDictionary objectForKey:@\"name\"];\n\n \n\n}\n\n \n\n\n\n\n","slug":"NSNotification简单使用","published":1,"updated":"2015-11-19T09:34:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnh9y001zph3mpdmve3jk"},{"title":"NSDate简单使用","date":"2015-09-08T03:50:07.000Z","_content":"\n\n// 获取系统当前时间  dasdasd\nNSDate * date = [NSDate date];  \nNSTimeInterval sec = [date timeIntervalSinceNow];  \nNSDate * currentDate = [[NSDate alloc] initWithTimeIntervalSinceNow:sec];  \n  \n//设置时间输出格式：  \nNSDateFormatter * df = [[NSDateFormatter alloc] init ];  \n[df setDateFormat:@\"yyyy年MM月dd日 HH小时mm分ss秒\"];  \nNSString * na = [df stringFromDate:currentDate];  \n  \nNSLog(@\"系统当前时间为：%@\",na);  ","source":"_posts/NSDate简单使用.markdown","raw":"# NSDate简单使用\ntitle: NSDate简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-08 11:50:07\n---\n\n\n// 获取系统当前时间  dasdasd\nNSDate * date = [NSDate date];  \nNSTimeInterval sec = [date timeIntervalSinceNow];  \nNSDate * currentDate = [[NSDate alloc] initWithTimeIntervalSinceNow:sec];  \n  \n//设置时间输出格式：  \nNSDateFormatter * df = [[NSDateFormatter alloc] init ];  \n[df setDateFormat:@\"yyyy年MM月dd日 HH小时mm分ss秒\"];  \nNSString * na = [df stringFromDate:currentDate];  \n  \nNSLog(@\"系统当前时间为：%@\",na);  ","slug":"NSDate简单使用","published":1,"updated":"2015-09-09T03:17:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnha00021ph3mz89d5wk3"},{"title":"NSBundle简单使用","date":"2015-11-20T03:50:07.000Z","_content":"\n在ios开发中为了方便管理资源文件，可以使用bundle的方式来进行管理，比如kkgridview里就是把所需的图片文件全部放在一个bundle来管理的 .\n\n切记目前iOS中只允许使用bundle管理资源文件和国际化信息，不支持代码的打包。\n\n在xcode中只能够创建setting bundle，会默认创建一些配置文件，在xcode中无法直接删除，这也许不是我们需要的。\n\n那么如何使用最简单的方法创建一个bundle呢?\n\n1 创建一个文件夹\n\n2 将该文件夹重命名为a.bundle\n\n3 将a.bundle拖入到xcode中即可\n\n当然这样处理之后，取图片之类的文件，使用的方法就不一样了，以取iphone_52x52.png图片为例：\n        NSString *bundlePath = [[NSBundle mainBundle].resourcePath stringByAppendingPathComponent:@\"My.bundle\"];\n        NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];\n        UIImage *(^getBundleImage)(NSString *) = ^(NSString *n) {\n            return [UIImage imageWithContentsOfFile:[bundle pathForResource:n ofType:@\"png\"]];\n        };\n        UIImage *myImg = getBundleImage(@\"iphone_52x52\");\n \n代码是蛮长一块，为了方便使用，我们可以写一个UIImage的类别，在类别中加入此方法，这样用起来就简单多了：\n- (UIImage *)imagesNamedFromCustomBundle:(NSString *)imgName\n{\n    NSString *bundlePath = [[NSBundle mainBundle].resourcePath stringByAppendingPathComponent:@\"My.bundle\"];\n    NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];\n    NSString *img_path = [bundle pathForResource:imgName ofType:@\"png\"];\n    return [UIImage imageWithContentsOfFile:img_path];\n}\n\n调用方式：\nUIImage * img  = [self imagesNamedFromCustomBundle:@\"iphone_52x52\"];\n\n测试了下，发现一点小问题，为了兼容retina屏，有iphone_52x52.png和iphone_52x52@2x.png，两张图片，\n当我们用UIImage * img = [UIImage imageNamed:@\"iphone_52x52\"];这种方式取图片时，会根据你是不是retina屏\n来返回不同的图片，如果这两张图你只提供了一张，那么也可以正常运行，只是图片会按比例进行拉伸。\n\n在测试上面的imagesNamedFromCustomBundle方法时，提供两张图片和只提供iphone_52x52.png时，两种屏下面都正常，但如果只提供了iphone_52x52@2x.png这张图片，那么无论是普通屏还是retina屏，都会找不到图片。\n\n调试分析了下，是在[bundle pathForResource:imgName ofType:@\"png\"];这里出了问题，返回的path都是nil,把上面的方法改成下面这样：\n- (UIImage *)imagesNamedFromCustomBundle:(NSString *)imgName\n{\n    NSString *bundlePath = [[NSBundle mainBundle].resourcePath stringByAppendingPathComponent:@\"testLocalVirable.bundle\"];\n    NSString *img_path = [bundlePath stringByAppendingPathComponent:imgName];\n    return [UIImage imageWithContentsOfFile:img_path];\n}\n\n调用方式改成：UIImage * img  = [self imagesNamedFromCustomBundle:@\"iphone_52x52.png\"];//把扩展名加上了\n这样在来测试，retina屏正常了，普通屏还是找不到图片。\n分析了半天也没找到解决方法，知识还是有限啊，看来要去请教下大牛才行了；\n现阶段的处理方法就是别偷懒，提供完整的两张图片就ok了。\n\n这里有老外的一篇讲Resource Bundles的文章：http://www.cocoanetics.com/2012/05/resource-bundles/\n粗略过了一遍，有些地方也没看懂，记下来，有空花时间好好看看。\n\nbundle的本质就是一个文件夹。当然在iOS中还可以干很多事情，详细资料请参考：\nhttps://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html#//apple_ref/doc/uid/10000123i-CH100-SW7","source":"_posts/NSBundle简单使用.markdown","raw":"# NSBundle简单使用\n\ntitle: NSBundle简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-20 11:50:07\n---\n\n在ios开发中为了方便管理资源文件，可以使用bundle的方式来进行管理，比如kkgridview里就是把所需的图片文件全部放在一个bundle来管理的 .\n\n切记目前iOS中只允许使用bundle管理资源文件和国际化信息，不支持代码的打包。\n\n在xcode中只能够创建setting bundle，会默认创建一些配置文件，在xcode中无法直接删除，这也许不是我们需要的。\n\n那么如何使用最简单的方法创建一个bundle呢?\n\n1 创建一个文件夹\n\n2 将该文件夹重命名为a.bundle\n\n3 将a.bundle拖入到xcode中即可\n\n当然这样处理之后，取图片之类的文件，使用的方法就不一样了，以取iphone_52x52.png图片为例：\n        NSString *bundlePath = [[NSBundle mainBundle].resourcePath stringByAppendingPathComponent:@\"My.bundle\"];\n        NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];\n        UIImage *(^getBundleImage)(NSString *) = ^(NSString *n) {\n            return [UIImage imageWithContentsOfFile:[bundle pathForResource:n ofType:@\"png\"]];\n        };\n        UIImage *myImg = getBundleImage(@\"iphone_52x52\");\n \n代码是蛮长一块，为了方便使用，我们可以写一个UIImage的类别，在类别中加入此方法，这样用起来就简单多了：\n- (UIImage *)imagesNamedFromCustomBundle:(NSString *)imgName\n{\n    NSString *bundlePath = [[NSBundle mainBundle].resourcePath stringByAppendingPathComponent:@\"My.bundle\"];\n    NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];\n    NSString *img_path = [bundle pathForResource:imgName ofType:@\"png\"];\n    return [UIImage imageWithContentsOfFile:img_path];\n}\n\n调用方式：\nUIImage * img  = [self imagesNamedFromCustomBundle:@\"iphone_52x52\"];\n\n测试了下，发现一点小问题，为了兼容retina屏，有iphone_52x52.png和iphone_52x52@2x.png，两张图片，\n当我们用UIImage * img = [UIImage imageNamed:@\"iphone_52x52\"];这种方式取图片时，会根据你是不是retina屏\n来返回不同的图片，如果这两张图你只提供了一张，那么也可以正常运行，只是图片会按比例进行拉伸。\n\n在测试上面的imagesNamedFromCustomBundle方法时，提供两张图片和只提供iphone_52x52.png时，两种屏下面都正常，但如果只提供了iphone_52x52@2x.png这张图片，那么无论是普通屏还是retina屏，都会找不到图片。\n\n调试分析了下，是在[bundle pathForResource:imgName ofType:@\"png\"];这里出了问题，返回的path都是nil,把上面的方法改成下面这样：\n- (UIImage *)imagesNamedFromCustomBundle:(NSString *)imgName\n{\n    NSString *bundlePath = [[NSBundle mainBundle].resourcePath stringByAppendingPathComponent:@\"testLocalVirable.bundle\"];\n    NSString *img_path = [bundlePath stringByAppendingPathComponent:imgName];\n    return [UIImage imageWithContentsOfFile:img_path];\n}\n\n调用方式改成：UIImage * img  = [self imagesNamedFromCustomBundle:@\"iphone_52x52.png\"];//把扩展名加上了\n这样在来测试，retina屏正常了，普通屏还是找不到图片。\n分析了半天也没找到解决方法，知识还是有限啊，看来要去请教下大牛才行了；\n现阶段的处理方法就是别偷懒，提供完整的两张图片就ok了。\n\n这里有老外的一篇讲Resource Bundles的文章：http://www.cocoanetics.com/2012/05/resource-bundles/\n粗略过了一遍，有些地方也没看懂，记下来，有空花时间好好看看。\n\nbundle的本质就是一个文件夹。当然在iOS中还可以干很多事情，详细资料请参考：\nhttps://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html#//apple_ref/doc/uid/10000123i-CH100-SW7","slug":"NSBundle简单使用","published":1,"updated":"2015-11-23T03:14:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnha10023ph3mwuicdoos"},{"title":"Macbook使用技巧","date":"2015-10-06T01:44:36.000Z","_content":"\n在终端中输入下面一整条命令行，来调整Time Machine备份周期：\n```bash\nsudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 14400\n```\n复制代码\n在这里面，最后的数字是以秒计算的，3600秒就是一个小时，而上面的14400秒就是4个小时。Time Machine默认的备份周期是一个小时，所以你可以根据自己的需要改称其他的时间长度。\n\n所以，想要恢复成默认状态，就可以在终端输入3600秒的命令：\n```bash\nsudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 3600\n```\n复制代码\n\n\n\n\n\n","source":"_posts/Macbook使用技巧.markdown","raw":"# Macbook使用技巧\ntitle: Macbook使用技巧\ndate: 2015-10-06 09:44:36\ntags: [IOS开发经验总结]\n---\n\n在终端中输入下面一整条命令行，来调整Time Machine备份周期：\n```bash\nsudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 14400\n```\n复制代码\n在这里面，最后的数字是以秒计算的，3600秒就是一个小时，而上面的14400秒就是4个小时。Time Machine默认的备份周期是一个小时，所以你可以根据自己的需要改称其他的时间长度。\n\n所以，想要恢复成默认状态，就可以在终端输入3600秒的命令：\n```bash\nsudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 3600\n```\n复制代码\n\n\n\n\n\n","slug":"Macbook使用技巧","published":1,"updated":"2015-10-06T02:30:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnha40025ph3m9w33y1uu"},{"title":"MVC，MVP 和 MVVM 架构","date":"2015-12-05T03:50:07.000Z","_content":"\n1. MVC，MVP 和 MVVM 演变\n http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\n\n2. MVC vs. MVP vs. MVVM\nhttp://www.baidu.com/link?url=mZW_iViouKIXY5HxGAmv-1vnqOQiLg-PwXJsZv1r_SK9C_qLE8Lyeac8uwgUDYAZ&wd=&eqid=a62c54c0000797500000000656610323\n\nhttp://www.cnblogs.com/xxdotnet/archive/2012/03/30/2425539.html\n\n3. 知乎上面的解答\n http://www.zhihu.com/question/20148405\n\n4. 深度剖析\nhttp://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html\n\n5. ReactiveCocoa入门 (下期再说)\nhttp://benbeng.leanote.com/post/ReactiveCocoaTutorial-part1\n\n\n\n\n","source":"_posts/MVC，MVP 和 MVVM 架构.markdown","raw":"# MVC，MVP 和 MVVM 架构\n\ntitle: MVC，MVP 和 MVVM 架构\ntags : [架构]\ndate: 2015-12-5 11:50:07\n---\n\n1. MVC，MVP 和 MVVM 演变\n http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\n\n2. MVC vs. MVP vs. MVVM\nhttp://www.baidu.com/link?url=mZW_iViouKIXY5HxGAmv-1vnqOQiLg-PwXJsZv1r_SK9C_qLE8Lyeac8uwgUDYAZ&wd=&eqid=a62c54c0000797500000000656610323\n\nhttp://www.cnblogs.com/xxdotnet/archive/2012/03/30/2425539.html\n\n3. 知乎上面的解答\n http://www.zhihu.com/question/20148405\n\n4. 深度剖析\nhttp://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html\n\n5. ReactiveCocoa入门 (下期再说)\nhttp://benbeng.leanote.com/post/ReactiveCocoaTutorial-part1\n\n\n\n\n","slug":"MVC，MVP 和 MVVM 架构","published":1,"updated":"2015-12-04T06:57:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnha70028ph3mijp32z91"},{"title":"IOS学习路线","date":"2015-09-09T01:44:36.000Z","_content":"## iOS学习路线\n好不容易从网上找着一张系统学习ios的图片,下面再给大家一个框架图.\n![iOS学习路线](/MyImage/IOS开发经验总结/iOS学习路线.png)\n\n## UIKit框架\n应用程序可以通过三种方式使用UIKit创建界面\n1. 在用户界面工具（interface Buidler）从对象库里 拖拽窗口，视图或者其他的对象使用。\n2. 用代码创建\n3. 通过继承UIView类或间接继承UIView类实现自定义用户界面\n**框架类组织架构图：**\n![框架类组织架构图](/MyImage/IOS开发经验总结/框架类组织架构图.jpg)\n在图中可以看出，responder 类是图中最大分支的根类，UIResponder为处理响应事件和响应链 定义了界面和默认行为。当用户用手指滚动列表或者在虚拟键盘上输入时，UIKit就生成时间传送给UIResponder响应链，直到链中有对象处理这个事件。相应的核心对象，比如：UIApplication  ，UIWindow，UIView都直接或间接的从UIResponder继承。\n\n\n\n\n","source":"_posts/IOS学习路线.markdown","raw":"# IOS学习路线\ntitle: IOS学习路线\ndate: 2015-09-09 09:44:36\ntags: [IOS开发经验总结]\n---\n## iOS学习路线\n好不容易从网上找着一张系统学习ios的图片,下面再给大家一个框架图.\n![iOS学习路线](/MyImage/IOS开发经验总结/iOS学习路线.png)\n\n## UIKit框架\n应用程序可以通过三种方式使用UIKit创建界面\n1. 在用户界面工具（interface Buidler）从对象库里 拖拽窗口，视图或者其他的对象使用。\n2. 用代码创建\n3. 通过继承UIView类或间接继承UIView类实现自定义用户界面\n**框架类组织架构图：**\n![框架类组织架构图](/MyImage/IOS开发经验总结/框架类组织架构图.jpg)\n在图中可以看出，responder 类是图中最大分支的根类，UIResponder为处理响应事件和响应链 定义了界面和默认行为。当用户用手指滚动列表或者在虚拟键盘上输入时，UIKit就生成时间传送给UIResponder响应链，直到链中有对象处理这个事件。相应的核心对象，比如：UIApplication  ，UIWindow，UIView都直接或间接的从UIResponder继承。\n\n\n\n\n","slug":"IOS学习路线","published":1,"updated":"2015-09-09T07:59:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnha9002bph3mtkt6pqvl"},{"title":"IOS学习经验过程总结","date":"2015-08-27T01:44:36.000Z","_content":"我当时刚学iOS开发的时候一样的感觉 总想知道原理 内部怎么回事 感觉在像在雾里\n但是iOS开发就是这样 他是封闭的 本身就是在雾里...\n关于iOS开发的学习 打个比方就像把汽车分解\n最底层的原料有塑料 钢铁\n再用这些底层的东西造出来发动机 座椅\n最后再加上写螺丝 胶水等 把汽车就拼起来了\niOS基本都是英文的资料 也由于封闭 文档写的相当好\n在遇到新框架的时候\n\n弄明白框架的功能\n去文档里搜搜 框架的 Programming Guide 很有用\n要弄明白框架类的继承结构\n写iOS的程序不一定都是用OBJC 很多框架是用C写的\n学习iOS开发基础可以按照下面两个方面学\n\n基础 (原料 钢铁 塑料)\n-------------\n\n**OBJ-C** --- 语法弄明白 @interface @property 这些东西总要知道是干嘛的 怎么用\n基础库 --- NSString NSArray NSDictionary等 这些东西在所有的框架里都会出现\niOS大部分类都是继承自NSObject (我还没见过不是继承自NSObject的..)\n还有一些 像NSCopying的接口(经@李禹龙提醒 应该叫协议) 不是特别用到开始不用了解\n**NSObject** 创建对象的时候用 + (id)alloc 方法 创建后需要init方法初始化 这个init指的是所有前面是init的方法比如UIView的初始化方法是 - (id)initWithFrame:(CGRect)aRect 在Objc里有很多这样关于函数命名的约定 类似于在python中的函数__xxx\n**NSString** 字符串 NSArray 数组 NSDictionary 字典 这些都需要弄很清楚 其他的类都是一个套路\n**NSMutableArray** 这样带Mutable的类代表可变的 继承自相应的不可变类 比如NSMutableArray继承自NSArray 他们都添加了可以改变对象内容的方法比如\n**- (void)addObject:(id)anObject** 添加对象\n**- (void)removeObject:(id)anObject** 删除对象\n  上面只是一个大概的总结 还有很多东西需要学 iOS5的SDK已经支持ARC 可以自动进行release 但是对iOS4的支持还有一个小问题 现在要开发应用 可能还需要按照之前的MRC的方式alloc release retain autorelease 之类的内存管理方法 不过如果你现在开始学 到编出像样的APP iOS5可能已经普及了 可以直接用ARC (另 之前对ARC的了解很粗浅 现在开发程序完全可以直接ARC iOS4不支持的weak是有办法替代的 用unsafe_unretained 如果同时支持iOS5和iOS4 用宏判断下就可以 当然也可以直接用assign)\n还有一点开始学习的时候肯定很疑惑 内存管理是基于函数名称的 比如带alloc copy的函数 用了之后返回的对象一定要release 这个不用疑惑 照做就行了\n文档: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html\n\n高级库(发动机)\n--------\n\n**UIKit** --- UI库 OBJC\n**UIResponder** 父类是NSObject UIKit里最底层的库 可以响应一些触摸事件 设置焦点等功能\n**UIView** 父类是UIResponder 所有View的父类 方法太多了 大部分很有用 这个不赘述了 中文的资料也很多了\n比如: http://www.cnblogs.com/likwo/archive/2011/06/18/2084192.html\n文档: http://developer.apple.com/library/ios/#documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html\n关于UIView的子类 有很多 UIButton UITableView 这个都需要各个击破 看看文档从名字上就很容易理解是做什么的\n**UIViewController** 是管理View 和 Model的类 (@张开 说UIViewController是用来管理view的，管理model 的类自己写，当然，model也可以用UIViewController来管理，不过恐怕成为不好的代码。 的确是这样的 Model的改变最好通过Notification来传播 之前吃过这样的亏 最好不要用delegate模式)\n\n**UIViewController** 管理所有设备发生的事件 比如屏幕旋转 屏幕关闭 或者一些其他的 程序的控制逻辑也应该写在这里\n他的初始化函数是- (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle 后面那个NibName 是Interface Builder 里设计的界面\n\n现在IB已经集成到XCode里了 打开.xib的文件打开的就是IB\nIB和代码交互用的是IBAction IBOutlet 这些标记 这些标记追踪到他们的定义其实对编译器来说什么都不表示 只能IB识别\nIB也没那么高深 XIB文件解开之后就是一堆代码\n之前面过一家小公司 看我当时写的程序里面用到了IB 一脸不屑 说他们都是用代码控制view 意思他们玩的都是高科技 IB都是垃圾 很多人也纠结到底用不用IB 的确 很多时候IB灵活度不行 但是不需要灵活度的时候还不用IB 那不是装X吗 要是没人用苹果还开发IB干嘛 早去掉了 IB在很多时候节省很多工作量\n\n**UINavigationController** \n再说说NavigationController刚接触开发的时候 不明白 View和View之间怎么切换的 最重要的就是**UINavigationController** 他是一层一层推进view的 打开iPhone里的联系人 每点一个联系人屏幕就会像右推到下一个界面 这就是**UINavigationController**在做的事\n**UINavigationController** 维护一个堆栈 \n**- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated** 是像堆栈里压一个UIViewController\n**- (UIViewController *)popViewControllerAnimated:(BOOL)animated** 是从堆栈里弹出来一个UIViewController\n就算你的程序不是像联系人那样 向右推进也可以用UINavigationController 管理你的ViewController的层次 可以自己写View切换的动画 关掉他默认的动画\n文档: http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/ModalViewControllers/ModalViewControllers.html\n\n**UIWindow** 还有个蛋疼的**UIWindow** 都快忘了他了 因为iOS是从Mac os X过来的 很多东西直接拿来用 这个**UIWindow**就是 在iOS里 每个App独占屏幕 所以同时存在的只有一个**UIWindow** 除了在程序加载的时候把我的view 加载到他上 目前我还没用到过其他的\n苹果一直很推崇MVC的程序结构 视图 模型 控制器 简单说就是 视图负责显示内容 模型负责所有数据的保存结构或者一些其他数据操作 控制器是用来协调 视图和模型 举车的发动机系统的例子 视图是仪表盘 模型是发动机 控制器是控制芯片\n\n**Core Data** --- 管理数据 OBJC\n刚学的时候觉得 CD很高深 其实他是最容易用的库之一 他麻烦之处在于多线程问题 还有胶水代码的问题\n建立一个 基于Core Data的工程 你会看到他自动创建3个类的对象\n\n**NSManagedObjectModel**\n管理数据的存储结构文件 扩展名是 xcdatamodeld\n\n**NSPersistentStoreCoordinator**\n用来管理底层数据的存储 用官方的话说\nCore Data is not a relational database or a relational database management system (RDBMS).\n所以你可以用很多方法存储数据 比如最长用的sqlite 当然如果另类也可以用plist文件 或者其他\n**NSManagedObjectContext**\n**NSManagedObjectContext** 把上面两个对象连在一起 把他们变成一个整体\n所有的CD操作都是通过这个类的 这个需要仔细看文档了\n举个不恰当的例子 就像三个人收拾衣服 一个人负责衣服的存放位置(**NSManagedObjectModel**) 一个人负责把衣服分类 冬天穿 夏天穿等(**NSPersistentStoreCoordinator**) 一个人负责协调他们的工作 并且如果有新增加的衣服或者要移除之前的衣服 通知他俩(**NSManagedObjectContext**)\n**NSManagedObject** 这个类是具体的数据对象 用上面的例子说就是衣服\n一般都是继承这个对象 XCode 可以帮你做 具体搜搜 这种文章很多\n**NSFetchRequest**\n用来执行CD请求的 相当与select语句外壳\n**NSEntityDescription**\n用来描述实体的 对应sql里的table\n\n**NSPredicate**\n谓语 类似select语句中的条件\n上面这三个类就可以用来请求数据了 具体看教程吧\n中文介绍:http://c.gzl.name/archives/tag/core-data (访问需要点技术...)\n文档: http://developer.apple.com/library/mac/#documentation/cocoa/conceptual/coredata/cdprogrammingguide.html\n掌握上面的内容 差不多就能写个APP了 最好的学习方法就是边写边学 自己构想一个小的APP 在做的时候遇到问题 去找找资料 我觉得这样学习比较快 也比较扎实\n下面这些库都是有专门功能的库\n\n**Core Animation** --- 制作动画 很强大 很喜欢的框架 可以用少量的代码写出漂亮的动画 C\n\n**Quartz 2D** --- 强大的2D绘图库 C\n\n**OpenGL** --- 不用介绍了 超级强大的3D库 C\n\n**Core Image** --- 听说 iOS5开始支持Core Image 了 还没去看 Mac 上的CI是很强大的\n\n**CFNetwork** --- 从来没用过 我一般都会用ASIHttpRequset 封装好的高层网络库 OBJC实现的 **CFNetwork** 好像是C实现\n\n**Core Location** --- 获取位置的库 东西很少 很简单 OBJC\n\n**AVFoundation** --- 播放视频相关的库 最近正在学习\n这些算是学iOS开发的一些方法 当时要是有人告诉我这些 估计少走不少弯路\n还有提醒各位初学者 刚开始学的时候 会有几个月的低谷期 很容易放弃 如果挺过最开始的几个月 后来就越学越容易了\n\n\n\nIP\n//  \n//  HYBIPHelper.h  \n//  XiaoYaoUser  \n//  \n//  Created by 黄仪标 on 14/12/9.  \n//  Copyright (c) 2014年 xiaoyaor. All rights reserved.  \n//  \n```bash  \n#import <Foundation/Foundation.h>  \n  \n@interface HYBIPHelper : NSObject  \n  \n/*! \n * get device ip address \n */  \n+ (NSString *)deviceIPAdress;  \n  \n@end  \n\n//  \n//  HYBIPHelper.m  \n//  XiaoYaoUser  \n//  \n//  Created by 黄仪标 on 14/12/9.  \n//  Copyright (c) 2014年 xiaoyaor. All rights reserved.  \n//  \n```\n--------------------------------------\n```bash  \n#import \"HYBIPHelper.h\"  \n  \n#include <ifaddrs.h>  \n#include <arpa/inet.h>  \n  \n  \n@implementation HYBIPHelper  \n  \n+ (NSString *)deviceIPAdress {  \n  NSString *address = @\"an error occurred when obtaining ip address\";  \n  struct ifaddrs *interfaces = NULL;  \n  struct ifaddrs *temp_addr = NULL;  \n  int success = 0;  \n    \n  success = getifaddrs(&interfaces);  \n    \n  if (success == 0) { // 0 表示获取成功  \n  \n    temp_addr = interfaces;  \n    while (temp_addr != NULL) {  \n      if( temp_addr->ifa_addr->sa_family == AF_INET) {  \n        // Check if interface is en0 which is the wifi connection on the iPhone  \n        if ([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"]) {  \n          // Get NSString from C String  \n          address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];  \n        }  \n      }  \n        \n      temp_addr = temp_addr->ifa_next;  \n    }  \n  }  \n    \n  freeifaddrs(interfaces);  \n    \n  DDLogVerbose(@\"手机的IP是：%@\", address);  \n  return address;  \n}  \n  \n@end \n```","source":"_posts/IOS学习经验过程总结.markdown","raw":"# IOS学习经验过程总结\ntitle: IOS学习经验过程总结\ndate: 2015-08-27 09:44:36\ntags: [IOS开发经验总结]\n---\n我当时刚学iOS开发的时候一样的感觉 总想知道原理 内部怎么回事 感觉在像在雾里\n但是iOS开发就是这样 他是封闭的 本身就是在雾里...\n关于iOS开发的学习 打个比方就像把汽车分解\n最底层的原料有塑料 钢铁\n再用这些底层的东西造出来发动机 座椅\n最后再加上写螺丝 胶水等 把汽车就拼起来了\niOS基本都是英文的资料 也由于封闭 文档写的相当好\n在遇到新框架的时候\n\n弄明白框架的功能\n去文档里搜搜 框架的 Programming Guide 很有用\n要弄明白框架类的继承结构\n写iOS的程序不一定都是用OBJC 很多框架是用C写的\n学习iOS开发基础可以按照下面两个方面学\n\n基础 (原料 钢铁 塑料)\n-------------\n\n**OBJ-C** --- 语法弄明白 @interface @property 这些东西总要知道是干嘛的 怎么用\n基础库 --- NSString NSArray NSDictionary等 这些东西在所有的框架里都会出现\niOS大部分类都是继承自NSObject (我还没见过不是继承自NSObject的..)\n还有一些 像NSCopying的接口(经@李禹龙提醒 应该叫协议) 不是特别用到开始不用了解\n**NSObject** 创建对象的时候用 + (id)alloc 方法 创建后需要init方法初始化 这个init指的是所有前面是init的方法比如UIView的初始化方法是 - (id)initWithFrame:(CGRect)aRect 在Objc里有很多这样关于函数命名的约定 类似于在python中的函数__xxx\n**NSString** 字符串 NSArray 数组 NSDictionary 字典 这些都需要弄很清楚 其他的类都是一个套路\n**NSMutableArray** 这样带Mutable的类代表可变的 继承自相应的不可变类 比如NSMutableArray继承自NSArray 他们都添加了可以改变对象内容的方法比如\n**- (void)addObject:(id)anObject** 添加对象\n**- (void)removeObject:(id)anObject** 删除对象\n  上面只是一个大概的总结 还有很多东西需要学 iOS5的SDK已经支持ARC 可以自动进行release 但是对iOS4的支持还有一个小问题 现在要开发应用 可能还需要按照之前的MRC的方式alloc release retain autorelease 之类的内存管理方法 不过如果你现在开始学 到编出像样的APP iOS5可能已经普及了 可以直接用ARC (另 之前对ARC的了解很粗浅 现在开发程序完全可以直接ARC iOS4不支持的weak是有办法替代的 用unsafe_unretained 如果同时支持iOS5和iOS4 用宏判断下就可以 当然也可以直接用assign)\n还有一点开始学习的时候肯定很疑惑 内存管理是基于函数名称的 比如带alloc copy的函数 用了之后返回的对象一定要release 这个不用疑惑 照做就行了\n文档: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html\n\n高级库(发动机)\n--------\n\n**UIKit** --- UI库 OBJC\n**UIResponder** 父类是NSObject UIKit里最底层的库 可以响应一些触摸事件 设置焦点等功能\n**UIView** 父类是UIResponder 所有View的父类 方法太多了 大部分很有用 这个不赘述了 中文的资料也很多了\n比如: http://www.cnblogs.com/likwo/archive/2011/06/18/2084192.html\n文档: http://developer.apple.com/library/ios/#documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html\n关于UIView的子类 有很多 UIButton UITableView 这个都需要各个击破 看看文档从名字上就很容易理解是做什么的\n**UIViewController** 是管理View 和 Model的类 (@张开 说UIViewController是用来管理view的，管理model 的类自己写，当然，model也可以用UIViewController来管理，不过恐怕成为不好的代码。 的确是这样的 Model的改变最好通过Notification来传播 之前吃过这样的亏 最好不要用delegate模式)\n\n**UIViewController** 管理所有设备发生的事件 比如屏幕旋转 屏幕关闭 或者一些其他的 程序的控制逻辑也应该写在这里\n他的初始化函数是- (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle 后面那个NibName 是Interface Builder 里设计的界面\n\n现在IB已经集成到XCode里了 打开.xib的文件打开的就是IB\nIB和代码交互用的是IBAction IBOutlet 这些标记 这些标记追踪到他们的定义其实对编译器来说什么都不表示 只能IB识别\nIB也没那么高深 XIB文件解开之后就是一堆代码\n之前面过一家小公司 看我当时写的程序里面用到了IB 一脸不屑 说他们都是用代码控制view 意思他们玩的都是高科技 IB都是垃圾 很多人也纠结到底用不用IB 的确 很多时候IB灵活度不行 但是不需要灵活度的时候还不用IB 那不是装X吗 要是没人用苹果还开发IB干嘛 早去掉了 IB在很多时候节省很多工作量\n\n**UINavigationController** \n再说说NavigationController刚接触开发的时候 不明白 View和View之间怎么切换的 最重要的就是**UINavigationController** 他是一层一层推进view的 打开iPhone里的联系人 每点一个联系人屏幕就会像右推到下一个界面 这就是**UINavigationController**在做的事\n**UINavigationController** 维护一个堆栈 \n**- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated** 是像堆栈里压一个UIViewController\n**- (UIViewController *)popViewControllerAnimated:(BOOL)animated** 是从堆栈里弹出来一个UIViewController\n就算你的程序不是像联系人那样 向右推进也可以用UINavigationController 管理你的ViewController的层次 可以自己写View切换的动画 关掉他默认的动画\n文档: http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/ModalViewControllers/ModalViewControllers.html\n\n**UIWindow** 还有个蛋疼的**UIWindow** 都快忘了他了 因为iOS是从Mac os X过来的 很多东西直接拿来用 这个**UIWindow**就是 在iOS里 每个App独占屏幕 所以同时存在的只有一个**UIWindow** 除了在程序加载的时候把我的view 加载到他上 目前我还没用到过其他的\n苹果一直很推崇MVC的程序结构 视图 模型 控制器 简单说就是 视图负责显示内容 模型负责所有数据的保存结构或者一些其他数据操作 控制器是用来协调 视图和模型 举车的发动机系统的例子 视图是仪表盘 模型是发动机 控制器是控制芯片\n\n**Core Data** --- 管理数据 OBJC\n刚学的时候觉得 CD很高深 其实他是最容易用的库之一 他麻烦之处在于多线程问题 还有胶水代码的问题\n建立一个 基于Core Data的工程 你会看到他自动创建3个类的对象\n\n**NSManagedObjectModel**\n管理数据的存储结构文件 扩展名是 xcdatamodeld\n\n**NSPersistentStoreCoordinator**\n用来管理底层数据的存储 用官方的话说\nCore Data is not a relational database or a relational database management system (RDBMS).\n所以你可以用很多方法存储数据 比如最长用的sqlite 当然如果另类也可以用plist文件 或者其他\n**NSManagedObjectContext**\n**NSManagedObjectContext** 把上面两个对象连在一起 把他们变成一个整体\n所有的CD操作都是通过这个类的 这个需要仔细看文档了\n举个不恰当的例子 就像三个人收拾衣服 一个人负责衣服的存放位置(**NSManagedObjectModel**) 一个人负责把衣服分类 冬天穿 夏天穿等(**NSPersistentStoreCoordinator**) 一个人负责协调他们的工作 并且如果有新增加的衣服或者要移除之前的衣服 通知他俩(**NSManagedObjectContext**)\n**NSManagedObject** 这个类是具体的数据对象 用上面的例子说就是衣服\n一般都是继承这个对象 XCode 可以帮你做 具体搜搜 这种文章很多\n**NSFetchRequest**\n用来执行CD请求的 相当与select语句外壳\n**NSEntityDescription**\n用来描述实体的 对应sql里的table\n\n**NSPredicate**\n谓语 类似select语句中的条件\n上面这三个类就可以用来请求数据了 具体看教程吧\n中文介绍:http://c.gzl.name/archives/tag/core-data (访问需要点技术...)\n文档: http://developer.apple.com/library/mac/#documentation/cocoa/conceptual/coredata/cdprogrammingguide.html\n掌握上面的内容 差不多就能写个APP了 最好的学习方法就是边写边学 自己构想一个小的APP 在做的时候遇到问题 去找找资料 我觉得这样学习比较快 也比较扎实\n下面这些库都是有专门功能的库\n\n**Core Animation** --- 制作动画 很强大 很喜欢的框架 可以用少量的代码写出漂亮的动画 C\n\n**Quartz 2D** --- 强大的2D绘图库 C\n\n**OpenGL** --- 不用介绍了 超级强大的3D库 C\n\n**Core Image** --- 听说 iOS5开始支持Core Image 了 还没去看 Mac 上的CI是很强大的\n\n**CFNetwork** --- 从来没用过 我一般都会用ASIHttpRequset 封装好的高层网络库 OBJC实现的 **CFNetwork** 好像是C实现\n\n**Core Location** --- 获取位置的库 东西很少 很简单 OBJC\n\n**AVFoundation** --- 播放视频相关的库 最近正在学习\n这些算是学iOS开发的一些方法 当时要是有人告诉我这些 估计少走不少弯路\n还有提醒各位初学者 刚开始学的时候 会有几个月的低谷期 很容易放弃 如果挺过最开始的几个月 后来就越学越容易了\n\n\n\nIP\n//  \n//  HYBIPHelper.h  \n//  XiaoYaoUser  \n//  \n//  Created by 黄仪标 on 14/12/9.  \n//  Copyright (c) 2014年 xiaoyaor. All rights reserved.  \n//  \n```bash  \n#import <Foundation/Foundation.h>  \n  \n@interface HYBIPHelper : NSObject  \n  \n/*! \n * get device ip address \n */  \n+ (NSString *)deviceIPAdress;  \n  \n@end  \n\n//  \n//  HYBIPHelper.m  \n//  XiaoYaoUser  \n//  \n//  Created by 黄仪标 on 14/12/9.  \n//  Copyright (c) 2014年 xiaoyaor. All rights reserved.  \n//  \n```\n--------------------------------------\n```bash  \n#import \"HYBIPHelper.h\"  \n  \n#include <ifaddrs.h>  \n#include <arpa/inet.h>  \n  \n  \n@implementation HYBIPHelper  \n  \n+ (NSString *)deviceIPAdress {  \n  NSString *address = @\"an error occurred when obtaining ip address\";  \n  struct ifaddrs *interfaces = NULL;  \n  struct ifaddrs *temp_addr = NULL;  \n  int success = 0;  \n    \n  success = getifaddrs(&interfaces);  \n    \n  if (success == 0) { // 0 表示获取成功  \n  \n    temp_addr = interfaces;  \n    while (temp_addr != NULL) {  \n      if( temp_addr->ifa_addr->sa_family == AF_INET) {  \n        // Check if interface is en0 which is the wifi connection on the iPhone  \n        if ([[NSString stringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"]) {  \n          // Get NSString from C String  \n          address = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)temp_addr->ifa_addr)->sin_addr)];  \n        }  \n      }  \n        \n      temp_addr = temp_addr->ifa_next;  \n    }  \n  }  \n    \n  freeifaddrs(interfaces);  \n    \n  DDLogVerbose(@\"手机的IP是：%@\", address);  \n  return address;  \n}  \n  \n@end \n```","slug":"IOS学习经验过程总结","published":1,"updated":"2015-10-06T09:53:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhab002dph3m3j1dicf6"},{"title":"IOS学习经验总结","date":"2015-08-27T01:44:36.000Z","_content":"我当时刚学iOS开发的时候一样的感觉 总想知道原理 内部怎么回事 感觉在像在雾里\n但是iOS开发就是这样 他是封闭的 本身就是在雾里...\n\n关于iOS开发的学习 打个比方就像把汽车分解\n\n最底层的原料有塑料 钢铁\n再用这些底层的东西造出来发动机 座椅\n最后再加上写螺丝 胶水等 把汽车就拼起来了\niOS基本都是英文的资料 也由于封闭 文档写的相当好\n在遇到新框架的时候\n\n弄明白框架的功能\n去文档里搜搜 框架的 Programming Guide 很有用\n要弄明白框架类的继承结构\n写iOS的程序不一定都是用OBJC 很多框架是用C写的\n学习iOS开发基础可以按照下面两个方面学\n\n基础 (原料 钢铁 塑料)\nOBJ-C --- 语法弄明白 @interface @property 这些东西总要知道是干嘛的 怎么用\n基础库 --- NSString NSArray NSDictionary等 这些东西在所有的框架里都会出现\niOS大部分类都是继承自NSObject (我还没见过不是继承自NSObject的..)\n还有一些 像NSCopying的接口(经@李禹龙提醒 应该叫协议) 不是特别用到开始不用了解\nNSObject 创建对象的时候用 + (id)alloc 方法 创建后需要init方法初始化 这个init指的是所有前面是init的方法比如UIView的初始化方法是 - (id)initWithFrame:(CGRect)aRect 在Objc里有很多这样关于函数命名的约定 类似于在python中的函数__xxx\nNSString 字符串 NSArray 数组 NSDictionary 字典 这些都需要弄很清楚 其他的类都是一个套路\nNSMutableArray 这样带Mutable的类代表可变的 继承自相应的不可变类 比如NSMutableArray继承自NSArray 他们都添加了可以改变对象内容的方法比如\n- (void)addObject:(id)anObject 添加对象\n- (void)removeObject:(id)anObject 删除对象\n上面只是一个大概的总结 还有很多东西需要学 iOS5的SDK已经支持ARC 可以自动进行release 但是对iOS4的支持还有一个小问题 现在要开发应用 可能还需要按照之前的MRC的方式alloc release retain autorelease 之类的内存管理方法 不过如果你现在开始学 到编出像样的APP iOS5可能已经普及了 可以直接用ARC (另 之前对ARC的了解很粗浅 现在开发程序完全可以直接ARC iOS4不支持的weak是有办法替代的 用unsafe_unretained 如果同时支持iOS5和iOS4 用宏判断下就可以 当然也可以直接用assign)\n还有一点开始学习的时候肯定很疑惑 内存管理是基于函数名称的 比如带alloc copy的函数 用了之后返回的对象一定要release 这个不用疑惑 照做就行了\n文档: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html\n高级库(发动机)\nUIKit --- UI库 OBJC\nUIResponder 父类是NSObject UIKit里最底层的库 可以响应一些触摸事件 设置焦点等功能\nUIView 父类是UIResponder 所有View的父类 方法太多了 大部分很有用 这个不赘述了 中文的资料也很多了\n比如: http://www.cnblogs.com/likwo/archive/2011/06/18/2084192.html\n文档: http://developer.apple.com/library/ios/#documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html\n关于UIView的子类 有很多 UIButton UITableView 这个都需要各个击破 看看文档从名字上就很容易理解是做什么的\nUIViewController 是管理View 和 Model的类 (@张开 说UIViewController是用来管理view的，管理model 的类自己写，当然，model也可以用UIViewController来管理，不过恐怕成为不好的代码。 的确是这样的 Model的改变最好通过Notification来传播 之前吃过这样的亏 最好不要用delegate模式)\nUIViewController 管理所有设备发生的事件 比如屏幕旋转 屏幕关闭 或者一些其他的 程序的控制逻辑也应该写在这里\n他的初始化函数是- (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle 后面那个NibName 是Interface Builder 里设计的界面\n现在IB已经集成到XCode里了 打开.xib的文件打开的就是IB\nIB和代码交互用的是IBAction IBOutlet 这些标记 这些标记追踪到他们的定义其实对编译器来说什么都不表示 只能IB识别\nIB也没那么高深 XIB文件解开之后就是一堆代码\n之前面过一家小公司 看我当时写的程序里面用到了IB 一脸不屑 说他们都是用代码控制view 意思他们玩的都是高科技 IB都是垃圾 很多人也纠结到底用不用IB 的确 很多时候IB灵活度不行 但是不需要灵活度的时候还不用IB 那不是装X吗 要是没人用苹果还开发IB干嘛 早去掉了 IB在很多时候节省很多工作量\nUINavigationController 再说说NavigationController \n刚接触开发的时候 不明白 View和View之间怎么切换的 最重要的就是UINavigationController 他是一层一层推进view的 打开iPhone里的联系人 每点一个联系人屏幕就会像右推到下一个界面 这就是UINavigationController在做的事\nUINavigationController 维护一个堆栈 \n- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated 是像堆栈里压一个UIViewController\n- (UIViewController *)popViewControllerAnimated:(BOOL)animated 是从堆栈里弹出来一个UIViewController\n就算你的程序不是像联系人那样 向右推进 也可以用UINavigationController 管理你的ViewController的层次 可以自己写View切换的动画 关掉他默认的动画\n文档: http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/ModalViewControllers/ModalViewControllers.html\nUIWindow 还有个蛋疼的UIWindow 都快忘了他了 因为iOS是从Mac os X过来的 很多东西直接拿来用 这个UIWindow就是 在iOS里 每个App独占屏幕 所以同时存在的只有一个UIWindow 除了在程序加载的时候把我的view 加载到他上 目前我还没用到过其他的\n苹果一直很推崇MVC的程序结构 视图 模型 控制器 简单说就是 视图负责显示内容 模型负责所有数据的保存结构或者一些其他数据操作 控制器是用来协调 视图和模型 举车的发动机系统的例子 视图是仪表盘 模型是发动机 控制器是控制芯片\nCore Data --- 管理数据 OBJC\n刚学的时候觉得 CD很高深 其实他是最容易用的库之一 他麻烦之处在于多线程问题 还有胶水代码的问题\n建立一个 基于Core Data的工程 你会看到他自动创建3个类的对象\nNSManagedObjectModel\n管理数据的存储结构文件 扩展名是 xcdatamodeld\nNSPersistentStoreCoordinator\n用来管理底层数据的存储 用官方的话说\nCore Data is not a relational database or a relational database management system (RDBMS).\n所以你可以用很多方法存储数据 比如最长用的sqlite 当然如果另类也可以用plist文件 或者其他\nNSManagedObjectContext\nNSManagedObjectContext 把上面两个对象连在一起 把他们变成一个整体\n所有的CD操作都是通过这个类的 这个需要仔细看文档了\n举个不恰当的例子 就像三个人收拾衣服 一个人负责衣服的存放位置(NSManagedObjectModel) 一个人负责把衣服分类 冬天穿 夏天穿等(NSPersistentStoreCoordinator) 一个人负责协调他们的工作 并且如果有新增加的衣服或者要移除之前的衣服 通知他俩(NSManagedObjectContext)\nNSManagedObject 这个类是具体的数据对象 用上面的例子说就是衣服\n一般都是继承这个对象 XCode 可以帮你做 具体搜搜 这种文章很多\nNSFetchRequest\n用来执行CD请求的 相当与select语句外壳\nNSEntityDescription\n用来描述实体的 对应sql里的table\nNSPredicate\n谓语 类似select语句中的条件\n上面这三个类就可以用来请求数据了 具体看教程吧\n中文介绍:http://c.gzl.name/archives/tag/core-data (访问需要点技术...)\n文档: http://developer.apple.com/library/mac/#documentation/cocoa/conceptual/coredata/cdprogrammingguide.html\n掌握上面的内容 差不多就能写个APP了 最好的学习方法就是边写边学 自己构想一个小的APP 在做的时候遇到问题 去找找资料 我觉得这样学习比较快 也比较扎实\n下面这些库都是有专门功能的库\n\nCore Animation --- 制作动画 很强大 很喜欢的框架 可以用少量的代码写出漂亮的动画 C\nQuartz 2D --- 强大的2D绘图库 C\nOpenGL --- 不用介绍了 超级强大的3D库 C\nCore Image --- 听说 iOS5开始支持Core Image 了 还没去看 Mac 上的CI是很强大的\nCFNetwork --- 从来没用过 我一般都会用ASIHttpRequset 封装好的高层网络库 OBJC实现的 CFNetwork 好像是C实现\nCore Location --- 获取位置的库 东西很少 很简单 OBJC\nAVFoundation --- 播放视频相关的库 最近正在学习\n这些算是学iOS开发的一些方法 当时要是有人告诉我这些 估计少走不少弯路\n还有提醒各位初学者 刚开始学的时候 会有几个月的低谷期 很容易放弃 如果挺过最开始的几个月 后来就越学越容易了\n","source":"_posts/IOS学习经验总结.md","raw":"title: IOS学习经验总结\ndate: 2015-08-27 09:44:36\ntags: [ios经验,ios开发]\n---\n我当时刚学iOS开发的时候一样的感觉 总想知道原理 内部怎么回事 感觉在像在雾里\n但是iOS开发就是这样 他是封闭的 本身就是在雾里...\n\n关于iOS开发的学习 打个比方就像把汽车分解\n\n最底层的原料有塑料 钢铁\n再用这些底层的东西造出来发动机 座椅\n最后再加上写螺丝 胶水等 把汽车就拼起来了\niOS基本都是英文的资料 也由于封闭 文档写的相当好\n在遇到新框架的时候\n\n弄明白框架的功能\n去文档里搜搜 框架的 Programming Guide 很有用\n要弄明白框架类的继承结构\n写iOS的程序不一定都是用OBJC 很多框架是用C写的\n学习iOS开发基础可以按照下面两个方面学\n\n基础 (原料 钢铁 塑料)\nOBJ-C --- 语法弄明白 @interface @property 这些东西总要知道是干嘛的 怎么用\n基础库 --- NSString NSArray NSDictionary等 这些东西在所有的框架里都会出现\niOS大部分类都是继承自NSObject (我还没见过不是继承自NSObject的..)\n还有一些 像NSCopying的接口(经@李禹龙提醒 应该叫协议) 不是特别用到开始不用了解\nNSObject 创建对象的时候用 + (id)alloc 方法 创建后需要init方法初始化 这个init指的是所有前面是init的方法比如UIView的初始化方法是 - (id)initWithFrame:(CGRect)aRect 在Objc里有很多这样关于函数命名的约定 类似于在python中的函数__xxx\nNSString 字符串 NSArray 数组 NSDictionary 字典 这些都需要弄很清楚 其他的类都是一个套路\nNSMutableArray 这样带Mutable的类代表可变的 继承自相应的不可变类 比如NSMutableArray继承自NSArray 他们都添加了可以改变对象内容的方法比如\n- (void)addObject:(id)anObject 添加对象\n- (void)removeObject:(id)anObject 删除对象\n上面只是一个大概的总结 还有很多东西需要学 iOS5的SDK已经支持ARC 可以自动进行release 但是对iOS4的支持还有一个小问题 现在要开发应用 可能还需要按照之前的MRC的方式alloc release retain autorelease 之类的内存管理方法 不过如果你现在开始学 到编出像样的APP iOS5可能已经普及了 可以直接用ARC (另 之前对ARC的了解很粗浅 现在开发程序完全可以直接ARC iOS4不支持的weak是有办法替代的 用unsafe_unretained 如果同时支持iOS5和iOS4 用宏判断下就可以 当然也可以直接用assign)\n还有一点开始学习的时候肯定很疑惑 内存管理是基于函数名称的 比如带alloc copy的函数 用了之后返回的对象一定要release 这个不用疑惑 照做就行了\n文档: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html\n高级库(发动机)\nUIKit --- UI库 OBJC\nUIResponder 父类是NSObject UIKit里最底层的库 可以响应一些触摸事件 设置焦点等功能\nUIView 父类是UIResponder 所有View的父类 方法太多了 大部分很有用 这个不赘述了 中文的资料也很多了\n比如: http://www.cnblogs.com/likwo/archive/2011/06/18/2084192.html\n文档: http://developer.apple.com/library/ios/#documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html\n关于UIView的子类 有很多 UIButton UITableView 这个都需要各个击破 看看文档从名字上就很容易理解是做什么的\nUIViewController 是管理View 和 Model的类 (@张开 说UIViewController是用来管理view的，管理model 的类自己写，当然，model也可以用UIViewController来管理，不过恐怕成为不好的代码。 的确是这样的 Model的改变最好通过Notification来传播 之前吃过这样的亏 最好不要用delegate模式)\nUIViewController 管理所有设备发生的事件 比如屏幕旋转 屏幕关闭 或者一些其他的 程序的控制逻辑也应该写在这里\n他的初始化函数是- (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle 后面那个NibName 是Interface Builder 里设计的界面\n现在IB已经集成到XCode里了 打开.xib的文件打开的就是IB\nIB和代码交互用的是IBAction IBOutlet 这些标记 这些标记追踪到他们的定义其实对编译器来说什么都不表示 只能IB识别\nIB也没那么高深 XIB文件解开之后就是一堆代码\n之前面过一家小公司 看我当时写的程序里面用到了IB 一脸不屑 说他们都是用代码控制view 意思他们玩的都是高科技 IB都是垃圾 很多人也纠结到底用不用IB 的确 很多时候IB灵活度不行 但是不需要灵活度的时候还不用IB 那不是装X吗 要是没人用苹果还开发IB干嘛 早去掉了 IB在很多时候节省很多工作量\nUINavigationController 再说说NavigationController \n刚接触开发的时候 不明白 View和View之间怎么切换的 最重要的就是UINavigationController 他是一层一层推进view的 打开iPhone里的联系人 每点一个联系人屏幕就会像右推到下一个界面 这就是UINavigationController在做的事\nUINavigationController 维护一个堆栈 \n- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated 是像堆栈里压一个UIViewController\n- (UIViewController *)popViewControllerAnimated:(BOOL)animated 是从堆栈里弹出来一个UIViewController\n就算你的程序不是像联系人那样 向右推进 也可以用UINavigationController 管理你的ViewController的层次 可以自己写View切换的动画 关掉他默认的动画\n文档: http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/ModalViewControllers/ModalViewControllers.html\nUIWindow 还有个蛋疼的UIWindow 都快忘了他了 因为iOS是从Mac os X过来的 很多东西直接拿来用 这个UIWindow就是 在iOS里 每个App独占屏幕 所以同时存在的只有一个UIWindow 除了在程序加载的时候把我的view 加载到他上 目前我还没用到过其他的\n苹果一直很推崇MVC的程序结构 视图 模型 控制器 简单说就是 视图负责显示内容 模型负责所有数据的保存结构或者一些其他数据操作 控制器是用来协调 视图和模型 举车的发动机系统的例子 视图是仪表盘 模型是发动机 控制器是控制芯片\nCore Data --- 管理数据 OBJC\n刚学的时候觉得 CD很高深 其实他是最容易用的库之一 他麻烦之处在于多线程问题 还有胶水代码的问题\n建立一个 基于Core Data的工程 你会看到他自动创建3个类的对象\nNSManagedObjectModel\n管理数据的存储结构文件 扩展名是 xcdatamodeld\nNSPersistentStoreCoordinator\n用来管理底层数据的存储 用官方的话说\nCore Data is not a relational database or a relational database management system (RDBMS).\n所以你可以用很多方法存储数据 比如最长用的sqlite 当然如果另类也可以用plist文件 或者其他\nNSManagedObjectContext\nNSManagedObjectContext 把上面两个对象连在一起 把他们变成一个整体\n所有的CD操作都是通过这个类的 这个需要仔细看文档了\n举个不恰当的例子 就像三个人收拾衣服 一个人负责衣服的存放位置(NSManagedObjectModel) 一个人负责把衣服分类 冬天穿 夏天穿等(NSPersistentStoreCoordinator) 一个人负责协调他们的工作 并且如果有新增加的衣服或者要移除之前的衣服 通知他俩(NSManagedObjectContext)\nNSManagedObject 这个类是具体的数据对象 用上面的例子说就是衣服\n一般都是继承这个对象 XCode 可以帮你做 具体搜搜 这种文章很多\nNSFetchRequest\n用来执行CD请求的 相当与select语句外壳\nNSEntityDescription\n用来描述实体的 对应sql里的table\nNSPredicate\n谓语 类似select语句中的条件\n上面这三个类就可以用来请求数据了 具体看教程吧\n中文介绍:http://c.gzl.name/archives/tag/core-data (访问需要点技术...)\n文档: http://developer.apple.com/library/mac/#documentation/cocoa/conceptual/coredata/cdprogrammingguide.html\n掌握上面的内容 差不多就能写个APP了 最好的学习方法就是边写边学 自己构想一个小的APP 在做的时候遇到问题 去找找资料 我觉得这样学习比较快 也比较扎实\n下面这些库都是有专门功能的库\n\nCore Animation --- 制作动画 很强大 很喜欢的框架 可以用少量的代码写出漂亮的动画 C\nQuartz 2D --- 强大的2D绘图库 C\nOpenGL --- 不用介绍了 超级强大的3D库 C\nCore Image --- 听说 iOS5开始支持Core Image 了 还没去看 Mac 上的CI是很强大的\nCFNetwork --- 从来没用过 我一般都会用ASIHttpRequset 封装好的高层网络库 OBJC实现的 CFNetwork 好像是C实现\nCore Location --- 获取位置的库 东西很少 很简单 OBJC\nAVFoundation --- 播放视频相关的库 最近正在学习\n这些算是学iOS开发的一些方法 当时要是有人告诉我这些 估计少走不少弯路\n还有提醒各位初学者 刚开始学的时候 会有几个月的低谷期 很容易放弃 如果挺过最开始的几个月 后来就越学越容易了\n","slug":"IOS学习经验总结","published":1,"updated":"2015-10-29T03:37:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhac002fph3m083ww44y"},{"title":"IOSFamousBlog","date":"2015-09-05T03:16:15.000Z","_content":"\n# 中文 iOS/Mac 开发博客列表\n\n\n本博客列表会不断更新维护，如果有推荐的博客，请到此处[提交博客信息](https://github.com/tangqiaoboy/iOSBlogCN/issues/1)。\n\n本博客列表涉及的文章内容支持 [定制化Google搜索](https://www.google.com/cse/publicurl?cx=006531766708784105585:e42hjzmqfcu)，特别感谢 [JeOam](https://github.com/JeOam) 提供并帮助更新。\n\n本博客列表也提供同步更新的OPML文件（[下载OPML文件](https://github.com/tangqiaoboy/iOSBlogCN/raw/master/blogcn.opml)），可供导入到例如feedly等第三方定阅工具中，特别感谢 [lcepy](https://github.com/lcepy) 提供自动转换脚本。这里有[导入教程](http://blog.feedly.com/feedlimport/)。\n\n\n博客地址 | RSS地址\n----- | -----\n[OneV's Den](http://onevcat.com) | <http://onevcat.com/atom.xml>\n[破船之家](http://beyondvincent.com) | <http://beyondvincent.com/atom.xml>\n[NSHipster](http://nshipster.cn) | <http://nshipster.cn/feed.xml>\n[Limboy 无网不剩](http://blog.leezhong.com/) | <http://feeds.feedburner.com/lzyy>\n[唐巧的技术博客](http://blog.devtang.com) | <http://blog.devtang.com/atom.xml>\n[Lex Tang](http://lexrus.com/) | <http://lexrus.com/feed.xml>\n[念茜的博客](http://nianxi.net) | <http://nianxi.net/feed.xml>\n[Xcode Dev](http://blog.xcodev.com) | <http://blog.xcodev.com/atom.xml>\n[Ted's Homepage](http://wufawei.com/)| <http://wufawei.com/feed>\n[txx's blog](http://blog.t-xx.me) | <http://blog.t-xx.me/atom.xml>\n[Kevin Blog](http://zhowkev.in) | <http://zhowkev.in/rss>\n[阿毛的蛋疼地](http://www.xiangwangfeng.com) | <http://www.xiangwangfeng.com/atom.xml>\n[亚庆的 Blog](http://billwang1990.github.io) | <http://billwang1990.github.io/atom.xml>\n[Nonomori](http://nonomori.farbox.com) | <http://nonomori.farbox.com/feed>\n[言无不尽](http://tang3w.com) | <http://tang3w.com/atom.xml>\n[Wonderffee's Blog](http://wonderffee.github.io) | <http://wonderffee.github.io/atom.xml>\n[I'm TualatriX](http://imtx.me) | <http://imtx.me/feed/latest/>\n[Cocoabit](http://blog.cocoabit.com) | <http://blog.cocoabit.com/rss/>\n[nixzhu on scriptogr.am](http://nixzhu.me) | <http://nixzhu.me/feed>\n[不会开机的男孩](http://studentdeng.github.io) | <http://studentdeng.github.io/atom.xml>\n[Nico](http://blog.inico.me) | <http://blog.inico.me/atom.xml>\n[阿峰的技术窝窝](http://hufeng825.github.io) | <http://hufeng825.github.io/atom.xml>\n[answer_huang](http://answerhuang.duapp.com) | <http://answerhuang.duapp.com/index.php/feed/>\n[webfrogs](http://blog.nswebfrog.com/) | <http://blog.nswebfrog.com/feed/>\n[代码手工艺人](http://joeyio.com) | <http://joeyio.com/atom.xml>\n[Lancy's Blog](http://gracelancy.com) | <http://gracelancy.com/atom.xml>\n[I'm Allen](http://www.imallen.com) | <http://www.imallen.com/atom.xml>\n[Travis' Blog](http://imi.im/)| <http://imi.im/feed>\n[王中周的技术博客](http://wangzz.github.io/) | <http://wangzz.github.io/atom.xml>\n[会写代码的猪](http://jiajun.org/) | <http://gaosboy.com/feed/atom/>\n[克伟的博客](http://wangkewei.cnblogs.com/) | <http://feed.cnblogs.com/blog/u/23857/rss>\n[摇滚诗人](http://cnblogs.com/biosli) | <http://feed.cnblogs.com/blog/u/35410/rss>\n[Luke's Homepage](http://geeklu.com/) | <http://geeklu.com/feed/>\n[萧宸宇](http://iiiyu.com/) | <http://iiiyu.com/atom.xml>\n[Yuan博客](http://www.heyuan110.com/) | <http://www.heyuan110.com/?feed=rss2>\n[Shining IO](http://shiningio.com/) | <http://shiningio.com/atom.xml>\n[YIFEIYANG--易飞扬的博客](http://www.yifeiyang.net/) | <http://www.yifeiyang.net/feed>\n[KooFrank's Blog](http://koofrank.com/) | <http://koofrank.com/rss>\n[hello it works](http://helloitworks.com) | <http://helloitworks.com/feed>\n[码农人生](http://msching.github.io/) | <http://msching.github.io/atom.xml>\n[玉令天下的Blog](http://yulingtianxia.com) | <http://yulingtianxia.com/atom.xml>\n[不掏蜂窝的熊](http://www.hotobear.com/) | <http://www.hotobear.com/?feed=rss2>\n[猫·仁波切](https://andelf.github.io/) | <https://andelf.github.io/atom.xml>\n[煲仔饭](http://ivoryxiong.org/) | <http://ivoryxiong.org/feed.xml>\n[里脊串的开发随笔](http://adad184.com) | <http://adad184.com/atom.xml>\n[Chun Tips](http://chun.tips/)| <http://chun.tips/atom.xml>\n[Why's blog - 汪海的实验室](http://blog.callmewhy.com/) | <http://blog.callmewhy.com/atom.xml>\n[土土哥的技术Blog](http://tutuge.me/) | <http://tutuge.me/atom.xml>\n[庞海礁的个人空间 ](http://www.olinone.com/) | <http://www.olinone.com/?feed=rss2>\n[Casa Taloyum](http://casatwy.com/) | <http://casatwy.com/feeds/all.atom.xml>\n[Kenshin Cui's Blog](http://www.cnblogs.com/kenshincui/) | <http://www.cnblogs.com/kenshincui/rss>\n[技术哥的博客](http://suenblog.duapp.com/) | <http://suenblog.duapp.com/rss/>\n[老谭笔记](http://www.tanhao.me/) | <http://www.tanhao.me/atom.xml>\n[coderyi](http://www.coderyi.com/)|<http://www.coderyi.com/feed>\n[雷纯锋的技术博客](http://blog.leichunfeng.com) | <http://blog.leichunfeng.com/atom.xml>\n\n\n个人收藏：\n里脊串的开发随笔 http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\n土土哥的技术Blog http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/\n\nhttp://github.ibireme.com/github/list/ios/\n\n","source":"_posts/IOSFamousBlog.markdown","raw":"# IOSFamousBlog\ntitle: IOSFamousBlog\ndate: 2015-09-05 11:16:15\ntags: [IOS网站博客]\n---\n\n# 中文 iOS/Mac 开发博客列表\n\n\n本博客列表会不断更新维护，如果有推荐的博客，请到此处[提交博客信息](https://github.com/tangqiaoboy/iOSBlogCN/issues/1)。\n\n本博客列表涉及的文章内容支持 [定制化Google搜索](https://www.google.com/cse/publicurl?cx=006531766708784105585:e42hjzmqfcu)，特别感谢 [JeOam](https://github.com/JeOam) 提供并帮助更新。\n\n本博客列表也提供同步更新的OPML文件（[下载OPML文件](https://github.com/tangqiaoboy/iOSBlogCN/raw/master/blogcn.opml)），可供导入到例如feedly等第三方定阅工具中，特别感谢 [lcepy](https://github.com/lcepy) 提供自动转换脚本。这里有[导入教程](http://blog.feedly.com/feedlimport/)。\n\n\n博客地址 | RSS地址\n----- | -----\n[OneV's Den](http://onevcat.com) | <http://onevcat.com/atom.xml>\n[破船之家](http://beyondvincent.com) | <http://beyondvincent.com/atom.xml>\n[NSHipster](http://nshipster.cn) | <http://nshipster.cn/feed.xml>\n[Limboy 无网不剩](http://blog.leezhong.com/) | <http://feeds.feedburner.com/lzyy>\n[唐巧的技术博客](http://blog.devtang.com) | <http://blog.devtang.com/atom.xml>\n[Lex Tang](http://lexrus.com/) | <http://lexrus.com/feed.xml>\n[念茜的博客](http://nianxi.net) | <http://nianxi.net/feed.xml>\n[Xcode Dev](http://blog.xcodev.com) | <http://blog.xcodev.com/atom.xml>\n[Ted's Homepage](http://wufawei.com/)| <http://wufawei.com/feed>\n[txx's blog](http://blog.t-xx.me) | <http://blog.t-xx.me/atom.xml>\n[Kevin Blog](http://zhowkev.in) | <http://zhowkev.in/rss>\n[阿毛的蛋疼地](http://www.xiangwangfeng.com) | <http://www.xiangwangfeng.com/atom.xml>\n[亚庆的 Blog](http://billwang1990.github.io) | <http://billwang1990.github.io/atom.xml>\n[Nonomori](http://nonomori.farbox.com) | <http://nonomori.farbox.com/feed>\n[言无不尽](http://tang3w.com) | <http://tang3w.com/atom.xml>\n[Wonderffee's Blog](http://wonderffee.github.io) | <http://wonderffee.github.io/atom.xml>\n[I'm TualatriX](http://imtx.me) | <http://imtx.me/feed/latest/>\n[Cocoabit](http://blog.cocoabit.com) | <http://blog.cocoabit.com/rss/>\n[nixzhu on scriptogr.am](http://nixzhu.me) | <http://nixzhu.me/feed>\n[不会开机的男孩](http://studentdeng.github.io) | <http://studentdeng.github.io/atom.xml>\n[Nico](http://blog.inico.me) | <http://blog.inico.me/atom.xml>\n[阿峰的技术窝窝](http://hufeng825.github.io) | <http://hufeng825.github.io/atom.xml>\n[answer_huang](http://answerhuang.duapp.com) | <http://answerhuang.duapp.com/index.php/feed/>\n[webfrogs](http://blog.nswebfrog.com/) | <http://blog.nswebfrog.com/feed/>\n[代码手工艺人](http://joeyio.com) | <http://joeyio.com/atom.xml>\n[Lancy's Blog](http://gracelancy.com) | <http://gracelancy.com/atom.xml>\n[I'm Allen](http://www.imallen.com) | <http://www.imallen.com/atom.xml>\n[Travis' Blog](http://imi.im/)| <http://imi.im/feed>\n[王中周的技术博客](http://wangzz.github.io/) | <http://wangzz.github.io/atom.xml>\n[会写代码的猪](http://jiajun.org/) | <http://gaosboy.com/feed/atom/>\n[克伟的博客](http://wangkewei.cnblogs.com/) | <http://feed.cnblogs.com/blog/u/23857/rss>\n[摇滚诗人](http://cnblogs.com/biosli) | <http://feed.cnblogs.com/blog/u/35410/rss>\n[Luke's Homepage](http://geeklu.com/) | <http://geeklu.com/feed/>\n[萧宸宇](http://iiiyu.com/) | <http://iiiyu.com/atom.xml>\n[Yuan博客](http://www.heyuan110.com/) | <http://www.heyuan110.com/?feed=rss2>\n[Shining IO](http://shiningio.com/) | <http://shiningio.com/atom.xml>\n[YIFEIYANG--易飞扬的博客](http://www.yifeiyang.net/) | <http://www.yifeiyang.net/feed>\n[KooFrank's Blog](http://koofrank.com/) | <http://koofrank.com/rss>\n[hello it works](http://helloitworks.com) | <http://helloitworks.com/feed>\n[码农人生](http://msching.github.io/) | <http://msching.github.io/atom.xml>\n[玉令天下的Blog](http://yulingtianxia.com) | <http://yulingtianxia.com/atom.xml>\n[不掏蜂窝的熊](http://www.hotobear.com/) | <http://www.hotobear.com/?feed=rss2>\n[猫·仁波切](https://andelf.github.io/) | <https://andelf.github.io/atom.xml>\n[煲仔饭](http://ivoryxiong.org/) | <http://ivoryxiong.org/feed.xml>\n[里脊串的开发随笔](http://adad184.com) | <http://adad184.com/atom.xml>\n[Chun Tips](http://chun.tips/)| <http://chun.tips/atom.xml>\n[Why's blog - 汪海的实验室](http://blog.callmewhy.com/) | <http://blog.callmewhy.com/atom.xml>\n[土土哥的技术Blog](http://tutuge.me/) | <http://tutuge.me/atom.xml>\n[庞海礁的个人空间 ](http://www.olinone.com/) | <http://www.olinone.com/?feed=rss2>\n[Casa Taloyum](http://casatwy.com/) | <http://casatwy.com/feeds/all.atom.xml>\n[Kenshin Cui's Blog](http://www.cnblogs.com/kenshincui/) | <http://www.cnblogs.com/kenshincui/rss>\n[技术哥的博客](http://suenblog.duapp.com/) | <http://suenblog.duapp.com/rss/>\n[老谭笔记](http://www.tanhao.me/) | <http://www.tanhao.me/atom.xml>\n[coderyi](http://www.coderyi.com/)|<http://www.coderyi.com/feed>\n[雷纯锋的技术博客](http://blog.leichunfeng.com) | <http://blog.leichunfeng.com/atom.xml>\n\n\n个人收藏：\n里脊串的开发随笔 http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\n土土哥的技术Blog http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/\n\nhttp://github.ibireme.com/github/list/ios/\n\n","slug":"IOSFamousBlog","published":1,"updated":"2015-10-10T01:50:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhae002kph3mnjsfeihs"},{"title":"Git的简单使用","date":"2015-12-07T09:10:07.000Z","_content":"\n##  git配置\n```bash\ncd ~/.ssh\nmkdir key_backup\ncp id_rsa* key_backup\nrm id_rsa*\nssh-keygen -t rsa -C \"dexsinis343731621@gmail.com\"\n\n(多账号配置 gitlab与github) 新建打开config文件\nHost git.meiriq.com\n    HostName git.meiriq.com\n    IdentityFile ~/.ssh/id_rsa_work\nHost github.com\n    HostName github.com\n    IdentityFile ~/.ssh/id_rsa\n\n(添加远程库)\ngit config --global user.name \"DexSinis\" \ngit config --global user.email \"dexinis343731621@gmail.com\"\n(进入你想上传的文件夹)\ngit init\ntouch README.md\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:DexSinis/DexSinis.github.io.git\ngit push -u origin master\n\n(从远程库克隆)\ngit clone git@github.com:DexSinis/DexSinis.github.io.git\n\n```\n**git基本常用命令** (http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n```bash\ngit checkout -b topic (开始一个分支) == (git branch topic 加 git checkout topic)\ngit branch (查看分支)\ngit checkout master (回到主分支)\ngit merge topic (合并分支)\ngit branch -d topic (删除分支)\n\n\n\ngit flog (查看当前的历史版本)\ngit reflog (查看所有的历史的版本)\n\n\n\ngit reset --hard commit_id (前进或者回退到特定的版本号)\n```\n\n界面配置\n![界面配置](/MyImage/Git/git.jpg)\n\n\n1.使用强制push的方法：\n\n$ git push -u origin master -f \n\n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n\n2.push前先将远程repository修改pull下来\n\n$ git pull origin master\n\n$ git push -u origin master\n\n3.若不想merge远程和本地修改，可以先创建新的分支：\n\n$ git branch [name]\n\n然后push\n\n$ git push -u origin [name]\n\n\n修改上传大小限制\ngit config http.postBuffer 524288000\n\ngit add 后撤销\ngit reset HEAD a.text\n\ngit checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\ngit stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改\n","source":"_posts/Git的简单使用.markdown","raw":"# Git的简单使用\n\ntitle: Git的简单使用\ntags : [Git]\ndate: 2015-12-7 17:10:07\n---\n\n##  git配置\n```bash\ncd ~/.ssh\nmkdir key_backup\ncp id_rsa* key_backup\nrm id_rsa*\nssh-keygen -t rsa -C \"dexsinis343731621@gmail.com\"\n\n(多账号配置 gitlab与github) 新建打开config文件\nHost git.meiriq.com\n    HostName git.meiriq.com\n    IdentityFile ~/.ssh/id_rsa_work\nHost github.com\n    HostName github.com\n    IdentityFile ~/.ssh/id_rsa\n\n(添加远程库)\ngit config --global user.name \"DexSinis\" \ngit config --global user.email \"dexinis343731621@gmail.com\"\n(进入你想上传的文件夹)\ngit init\ntouch README.md\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin git@github.com:DexSinis/DexSinis.github.io.git\ngit push -u origin master\n\n(从远程库克隆)\ngit clone git@github.com:DexSinis/DexSinis.github.io.git\n\n```\n**git基本常用命令** (http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n```bash\ngit checkout -b topic (开始一个分支) == (git branch topic 加 git checkout topic)\ngit branch (查看分支)\ngit checkout master (回到主分支)\ngit merge topic (合并分支)\ngit branch -d topic (删除分支)\n\n\n\ngit flog (查看当前的历史版本)\ngit reflog (查看所有的历史的版本)\n\n\n\ngit reset --hard commit_id (前进或者回退到特定的版本号)\n```\n\n界面配置\n![界面配置](/MyImage/Git/git.jpg)\n\n\n1.使用强制push的方法：\n\n$ git push -u origin master -f \n\n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n\n2.push前先将远程repository修改pull下来\n\n$ git pull origin master\n\n$ git push -u origin master\n\n3.若不想merge远程和本地修改，可以先创建新的分支：\n\n$ git branch [name]\n\n然后push\n\n$ git push -u origin [name]\n\n\n修改上传大小限制\ngit config http.postBuffer 524288000\n\ngit add 后撤销\ngit reset HEAD a.text\n\ngit checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\ngit stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改\n","slug":"Git的简单使用","published":1,"updated":"2016-01-04T05:08:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhag002nph3mqo29e0z5"},{"title":"hexo博客搭建","date":"2015-07-15T09:10:07.000Z","_content":"\ngithub项目\n支付宝高仿版: https://github.com/gsdios/GSD_ZHIFUBAO  \n\n\n\n\n","source":"_posts/GitHub项目.markdown","raw":"# GitHub项目\n\ntitle: hexo博客搭建\ntags : [Git,GitHub]\ndate: 2015-07-15 17:10:07\n---\n\ngithub项目\n支付宝高仿版: https://github.com/gsdios/GSD_ZHIFUBAO  \n\n\n\n\n","slug":"GitHub项目","published":1,"updated":"2015-11-19T09:27:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhah002qph3m17ujya1f"},{"title":"GCD简单使用","date":"2015-11-15T03:50:07.000Z","_content":"\n\nGrand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。\n\ndispatch queue分成以下三种：\n\n1）运行在主线程的Main queue，通过dispatch_get_main_queue获取。\n\n复制代码\n/*!\n* @function dispatch_get_main_queue\n*\n* @abstract\n* Returns the default queue that is bound to the main thread.\n*\n* @discussion\n* In order to invoke blocks submitted to the main queue, the application must\n* call dispatch_main(), NSApplicationMain(), or use a CFRunLoop on the main\n* thread.\n*\n* @result\n* Returns the main queue. This queue is created automatically on behalf of\n* the main thread before main() is called.\n*/\n__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)\nDISPATCH_EXPORT struct dispatch_queue_s _dispatch_main_q;\n#define dispatch_get_main_queue() \\\nDISPATCH_GLOBAL_OBJECT(dispatch_queue_t, _dispatch_main_q)\n复制代码\n可以看出，dispatch_get_main_queue也是一种dispatch_queue_t。\n\n2）并行队列global dispatch queue，通过dispatch_get_global_queue获取，由系统创建三个不同优先级的dispatch queue。并行队列的执行顺序与其加入队列的顺序相同。\n\n3）串行队列serial queues一般用于按顺序同步访问，可创建任意数量的串行队列，各个串行队列之间是并发的。\n\n当想要任务按照某一个特定的顺序执行时，串行队列是很有用的。串行队列在同一个时间只执行一个任务。我们可以使用串行队列代替锁去保护共享的数据。和锁不同，一个串行队列可以保证任务在一个可预知的顺序下执行。\n\nserial queues通过dispatch_queue_create创建，可以使用函数dispatch_retain和dispatch_release去增加或者减少引用计数。\n\nGCD的用法：\n\n复制代码\n //  后台执行：\n dispatch_async(dispatch_get_global_queue(0, 0), ^{\n      // something\n });\n\n // 主线程执行：\n dispatch_async(dispatch_get_main_queue(), ^{\n      // something\n });\n\n // 一次性执行：\n static dispatch_once_t onceToken;\n dispatch_once(&onceToken, ^{\n     // code to be executed once\n });\n\n // 延迟2秒执行：\n double delayInSeconds = 2.0;\n dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);\n dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n });\n\n // 自定义dispatch_queue_t\n dispatch_queue_t urls_queue = dispatch_queue_create(\"blog.devtang.com\", NULL);\n dispatch_async(urls_queue, ^{  \n　 　// your code \n });\n dispatch_release(urls_queue);\n\n // 合并汇总结果\n dispatch_group_t group = dispatch_group_create();\n dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{\n      // 并行执行的线程一\n });\n dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{\n      // 并行执行的线程二\n });\n dispatch_group_notify(group, dispatch_get_global_queue(0,0), ^{\n      // 汇总结果\n });\n复制代码\n一个应用GCD的例子：\n\n复制代码\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSURL * url = [NSURL URLWithString:@\"http://www.baidu.com\"];\n        NSError * error;\n        NSString * data = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&error];\n        if (data != nil) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                NSLog(@\"call back, the data is: %@\", data);\n            });\n        } else {\n            NSLog(@\"error when download:%@\", error);\n        }\n    });\n复制代码\nGCD的另一个用处是可以让程序在后台较长久的运行。\n\n在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。\n\n让程序在后台长久运行的示例代码如下：\n\n复制代码\n// AppDelegate.h文件\n@property (assign, nonatomic) UIBackgroundTaskIdentifier backgroundUpdateTask;\n\n// AppDelegate.m文件\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    [self beingBackgroundUpdateTask];\n    // 在这里加上你需要长久运行的代码\n    [self endBackgroundUpdateTask];\n}\n\n- (void)beingBackgroundUpdateTask\n{\n    self.backgroundUpdateTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{\n        [self endBackgroundUpdateTask];\n    }];\n}\n\n- (void)endBackgroundUpdateTask\n{\n    [[UIApplication sharedApplication] endBackgroundTask: self.backgroundUpdateTask];\n    self.backgroundUpdateTask = UIBackgroundTaskInvalid;\n}\n复制代码\n \n\n\n\n\n","source":"_posts/GCD简单使用.markdown","raw":"# GCD简单使用\ntitle: GCD简单使用\ntags : [IOS开发SDK]\ndate: 2015-11-15 11:50:07\n---\n\n\nGrand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。\n\ndispatch queue分成以下三种：\n\n1）运行在主线程的Main queue，通过dispatch_get_main_queue获取。\n\n复制代码\n/*!\n* @function dispatch_get_main_queue\n*\n* @abstract\n* Returns the default queue that is bound to the main thread.\n*\n* @discussion\n* In order to invoke blocks submitted to the main queue, the application must\n* call dispatch_main(), NSApplicationMain(), or use a CFRunLoop on the main\n* thread.\n*\n* @result\n* Returns the main queue. This queue is created automatically on behalf of\n* the main thread before main() is called.\n*/\n__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)\nDISPATCH_EXPORT struct dispatch_queue_s _dispatch_main_q;\n#define dispatch_get_main_queue() \\\nDISPATCH_GLOBAL_OBJECT(dispatch_queue_t, _dispatch_main_q)\n复制代码\n可以看出，dispatch_get_main_queue也是一种dispatch_queue_t。\n\n2）并行队列global dispatch queue，通过dispatch_get_global_queue获取，由系统创建三个不同优先级的dispatch queue。并行队列的执行顺序与其加入队列的顺序相同。\n\n3）串行队列serial queues一般用于按顺序同步访问，可创建任意数量的串行队列，各个串行队列之间是并发的。\n\n当想要任务按照某一个特定的顺序执行时，串行队列是很有用的。串行队列在同一个时间只执行一个任务。我们可以使用串行队列代替锁去保护共享的数据。和锁不同，一个串行队列可以保证任务在一个可预知的顺序下执行。\n\nserial queues通过dispatch_queue_create创建，可以使用函数dispatch_retain和dispatch_release去增加或者减少引用计数。\n\nGCD的用法：\n\n复制代码\n //  后台执行：\n dispatch_async(dispatch_get_global_queue(0, 0), ^{\n      // something\n });\n\n // 主线程执行：\n dispatch_async(dispatch_get_main_queue(), ^{\n      // something\n });\n\n // 一次性执行：\n static dispatch_once_t onceToken;\n dispatch_once(&onceToken, ^{\n     // code to be executed once\n });\n\n // 延迟2秒执行：\n double delayInSeconds = 2.0;\n dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);\n dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n });\n\n // 自定义dispatch_queue_t\n dispatch_queue_t urls_queue = dispatch_queue_create(\"blog.devtang.com\", NULL);\n dispatch_async(urls_queue, ^{  \n　 　// your code \n });\n dispatch_release(urls_queue);\n\n // 合并汇总结果\n dispatch_group_t group = dispatch_group_create();\n dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{\n      // 并行执行的线程一\n });\n dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{\n      // 并行执行的线程二\n });\n dispatch_group_notify(group, dispatch_get_global_queue(0,0), ^{\n      // 汇总结果\n });\n复制代码\n一个应用GCD的例子：\n\n复制代码\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSURL * url = [NSURL URLWithString:@\"http://www.baidu.com\"];\n        NSError * error;\n        NSString * data = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&error];\n        if (data != nil) {\n            dispatch_async(dispatch_get_main_queue(), ^{\n                NSLog(@\"call back, the data is: %@\", data);\n            });\n        } else {\n            NSLog(@\"error when download:%@\", error);\n        }\n    });\n复制代码\nGCD的另一个用处是可以让程序在后台较长久的运行。\n\n在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。\n\n让程序在后台长久运行的示例代码如下：\n\n复制代码\n// AppDelegate.h文件\n@property (assign, nonatomic) UIBackgroundTaskIdentifier backgroundUpdateTask;\n\n// AppDelegate.m文件\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    [self beingBackgroundUpdateTask];\n    // 在这里加上你需要长久运行的代码\n    [self endBackgroundUpdateTask];\n}\n\n- (void)beingBackgroundUpdateTask\n{\n    self.backgroundUpdateTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{\n        [self endBackgroundUpdateTask];\n    }];\n}\n\n- (void)endBackgroundUpdateTask\n{\n    [[UIApplication sharedApplication] endBackgroundTask: self.backgroundUpdateTask];\n    self.backgroundUpdateTask = UIBackgroundTaskInvalid;\n}\n复制代码\n \n\n\n\n\n","slug":"GCD简单使用","published":1,"updated":"2015-11-19T09:34:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhaj002uph3m8b28ez7t"},{"title":"AsyncSocket简单使用","date":"2015-09-06T03:50:07.000Z","_content":"\n有一段时间没有认真总结和写博客了\n\n前段时间找工作、进入工作阶段。比较少静下来认真总结，现在静下心来总结一下最近的一些心得\n\n前言\nAsyncSocket介绍\nAsyncSocket详解\nAsyncSocket示例\n一、前言\n\n公司的项目用到了Socket编程，之前在学习的过程当中，用到的更多的还是http请求的方式。但是既然用到了就必须学习一下，所以就在网上找一些例子，然后想自己写一个demo。可是发现很多写iOS Socket的博客并没有很详细的说明，也可能是大神们觉得其他东西都浅显易懂。\n\n自己专研了一下，将自己的一些理解总结出来，一方面整理自己的学习思路，另一方面，为一些和我有同样困惑的小伙伴们，稍做指引。\n\n 二、AsyncSocket介绍\n\n1⃣️iOS中Socket编程的方式有哪些？\n\n－BSD Socket\n\nBSD Socket 是UNIX系统中通用的网络接口，它不仅支持各种不同的网络类型，而且也是一种内部进程之间的通信机制。而iOS系统其实本质就是UNIX，所以可以用，但是比较复杂。\n\n－CFSocket\n\nCFSocket是苹果提供给我们的使用Socket的方式，但是用起来还是会不太顺手。当然想使用的话，可以细细研究一下。\n\n－AsyncSocket\n\n这次博客的主讲内容，也是我们在开发项目中经常会用到的。\n\n2⃣️为什么选择AsyncSocket？\n\niphone的CFNetwork编程比较艰深。使用AsyncSocket开源库来开发相对较简单，帮助我们封装了很多东西。\n\n三、AsyncSocket详解\n\n 1⃣️说明\n\n在我们开发当中，我们主要的任务是开发客户端。所以详解里主要将客户端的整个连接建立过程，以及在说明时候回调哪些函数。在后面的示例代码中，也会给出服务器端的简单开发。\n\n2 过程详解\n\n1.建立连接\n\n- (int)connectServer:(NSString *)hostIP port:(int)hostPort\n\n2.连接成功后，会回调的函数\n\n- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\n\n3.发送数据\n\n- (void)writeData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag;\n\n4.接受数据\n\n-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n\n5.断开连接\n\n- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\n\n- (void)onSocketDidDisconnect:(AsyncSocket *)sock\n\n主要就是上述的几个方法，只是说在真正开发当中，很可能我们在收发数据的时候，我们收发的数据并不仅仅是一个字符串包装成NSData即可，我们很可能会发送结构体等类型，这个时候我们就需要和服务器端的人员协作来开发：定义怎样的结构体。\n\n四、AsyncSocket示例\n\n客户端代码\n```bash \n#import \"ViewController.h\"\n\n#define SRV_CONNECTED 0\n#define SRV_CONNECT_SUC 1\n#define SRV_CONNECT_FAIL 2\n#define HOST_IP @\"192.168.83.40\"\n#define HOST_PORT 8008\n\n@interface ViewController ()\n{\n    NSString *_content;\n}\n-(int) connectServer: (NSString *) hostIP port:(int) hostPort;\n-(void)showMessage:(NSString *) msg;\n@end\n\n@implementation ViewController\n\n@synthesize clientSocket,tbInputMsg,lblOutputMsg;\n\n#pragma mark - view lifecycle\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n    [self connectServer:HOST_IP port:HOST_PORT];\n}\n- (void)viewDidUnload\n{\n    [super viewDidUnload];\n    [clientSocket release], clientSocket = nil;\n    [tbInputMsg release], tbInputMsg = nil;\n    [lblOutputMsg release], lblOutputMsg = nil;\n}\n\n- (int)connectServer:(NSString *)hostIP port:(int)hostPort\n{\n    if (clientSocket == nil)\n    {\n        // 在需要联接地方使用connectToHost联接服务器\n        clientSocket = [[AsyncSocket alloc] initWithDelegate:self];\n        NSError *err = nil;\n        if (![clientSocket connectToHost:hostIP onPort:hostPort error:&err])\n        {\n            NSLog(@\"Error %d:%@\", err.code, [err localizedDescription]);\n            \n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[@\"Connection failed to host\" stringByAppendingString:hostIP] message:[NSString stringWithFormat:@\"%d:%@\",err.code,err.localizedDescription] delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil];\n            [alert show];\n            [alert release];\n            return SRV_CONNECT_FAIL;\n        } else {\n            NSLog(@\"Connected!\");\n            return SRV_CONNECT_SUC;\n        }\n    }\n    else {\n        return SRV_CONNECTED;\n    }\n}\n\n#pragma mark - IBAction\n// 发送数据\n- (IBAction) sendMsg:(id)sender\n{\n    NSString *inputMsgStr = tbInputMsg.text;\n    NSString * content = [inputMsgStr stringByAppendingString:@\"\\r\\n\"];\n    NSLog(@\"%@\",content);\n    NSData *data = [content dataUsingEncoding:NSUTF8StringEncoding];\n    // NSData *data = [content dataUsingEncoding:NSISOLatin1StringEncoding];\n    [clientSocket writeData:data withTimeout:-1 tag:0];\n}\n// 连接/重新连接\n- (IBAction) reconnect:(id)sender\n{\n    int stat = [self connectServer:HOST_IP port:HOST_PORT];\n    switch (stat) {\n        case SRV_CONNECT_SUC:\n            [self showMessage:@\"connect success\"];\n            break;\n        case SRV_CONNECTED:\n            [self showMessage:@\"It's connected,don't agian\"];\n            break;\n        default:\n            break;\n    }\n}\n- (void)showMessage:(NSString *)msg\n{\n    UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@\"Alert!\"\n                                                    message:msg\n                                                   delegate:nil\n                                          cancelButtonTitle:@\"OK\"\n                                          otherButtonTitles:nil];\n    [alert show];\n    [alert release];\n}\n- (IBAction)textFieldDoneEditing:(id)sender\n{\n    [tbInputMsg resignFirstResponder];\n}\n- (IBAction)backgroundTouch:(id)sender\n{\n    [tbInputMsg resignFirstResponder];\n}\n\n#pragma mark socket delegate\n- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\n{\n    [clientSocket readDataWithTimeout:-1 tag:0];\n}\n\n- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\n{\n    NSLog(@\"Error\");\n}\n\n- (void)onSocketDidDisconnect:(AsyncSocket *)sock\n{\n    NSString *msg = @\"Sorry this connect is failure\";\n    [self showMessage:msg];\n    [msg release];\n    clientSocket = nil;\n}\n\n- (void)onSocketDidSecure:(AsyncSocket *)sock\n{\n}\n\n// 接收到数据（可以通过tag区分）\n-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n{\n    NSString* aStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    _content = lblOutputMsg.text;\n    NSLog(@\"Hava received datas is :%@\",aStr);\n    NSString *newStr = [NSString stringWithFormat:@\"\\n%@\", aStr];\n    lblOutputMsg.text = [_content stringByAppendingString:newStr];\n    [aStr release];\n    [clientSocket readDataWithTimeout:-1 tag:0];\n}\n\n@end\n```\n服务器端代码\n\n```bash\n#import \"SocketView.h\"\n#import \"AsyncSocket.h\"\n\n#define WELCOME_MSG  0\n#define ECHO_MSG     1\n\n#define FORMAT(format, ...) [NSString stringWithFormat:(format), ##__VA_ARGS__]\n\n@interface SocketView (PrivateAPI)\n- (void)logError:(NSString *)msg;\n- (void)logInfo:(NSString *)msg;\n- (void)logMessage:(NSString *)msg;\n@end\n\n@implementation SocketView\n\n// 初始化\n- (void)awakeFromNib\n{\n    listenSocket = [[AsyncSocket alloc] initWithDelegate:self];\n    [listenSocket setRunLoopModes:[NSArray arrayWithObject:NSRunLoopCommonModes]];\n    \n    connectedSockets = [[NSMutableArray alloc] initWithCapacity:1];\n    isRunning = NO;\n    \n    [logView setString:@\"\"];\n    // [portField setString:@\"8080\"];\n}\n\n- (IBAction)startStop:(id)sender\n{\n    if(!isRunning)\n    {\n        int port = [portField intValue];\n        \n        if(port < 0 || port > 65535)\n        {\n            port = 0; // 会随即取端口\n        }\n        \n        NSError *error = nil;\n        if(![listenSocket acceptOnPort:port error:&error])\n        {\n            [self logError:FORMAT(@\"Error starting server: %@\", error)];\n            return;\n        }\n        \n        [self logInfo:FORMAT(@\"Echo server started on port %hu\", [listenSocket localPort])];\n        isRunning = YES;\n        \n        [portField setEnabled:NO];\n        [startStopButton setTitle:@\"Stop\"];\n    }\n    else\n    {\n        // Stop accepting connections\n        [listenSocket disconnect];\n        \n        // Stop any client connections\n        int i;\n        for(i = 0; i < [connectedSockets count]; i++)\n        {\n            // Call disconnect on the socket,\n            // which will invoke the onSocketDidDisconnect: method,\n            // which will remove the socket from the list.\n            [[connectedSockets objectAtIndex:i] disconnect];\n        }\n        \n        [self logInfo:@\"Stopped Echo server\"];\n        isRunning = false;\n        \n        [portField setEnabled:YES];\n        [startStopButton setTitle:@\"Start\"];\n    }\n}\n\n- (void)scrollToBottom\n{\n    NSScrollView *scrollView = [logView enclosingScrollView];\n    NSPoint newScrollOrigin;\n    \n    if ([[scrollView documentView] isFlipped])\n        newScrollOrigin = NSMakePoint(0.0, NSMaxY([[scrollView documentView] frame]));\n    else\n        newScrollOrigin = NSMakePoint(0.0, 0.0);\n    \n    [[scrollView documentView] scrollPoint:newScrollOrigin];\n}\n\n- (void)logError:(NSString *)msg\n{\n    NSString *paragraph = [NSString stringWithFormat:@\"%@\\n\", msg];\n    \n    NSMutableDictionary *attributes = [NSMutableDictionary dictionaryWithCapacity:1];\n    [attributes setObject:[NSColor redColor] forKey:NSForegroundColorAttributeName];\n    \n    NSAttributedString *as = [[NSAttributedString alloc] initWithString:paragraph attributes:attributes];\n    [as autorelease];\n    \n    [[logView textStorage] appendAttributedString:as];\n    [self scrollToBottom];\n}\n\n- (void)logInfo:(NSString *)msg\n{\n    NSString *paragraph = [NSString stringWithFormat:@\"%@\\n\", msg];\n    \n    NSMutableDictionary *attributes = [NSMutableDictionary dictionaryWithCapacity:1];\n    [attributes setObject:[NSColor purpleColor] forKey:NSForegroundColorAttributeName];\n    \n    NSAttributedString *as = [[NSAttributedString alloc] initWithString:paragraph attributes:attributes];\n    [as autorelease];\n    \n    [[logView textStorage] appendAttributedString:as];\n    [self scrollToBottom];\n}\n\n- (void)logMessage:(NSString *)msg\n{\n    NSString *paragraph = [NSString stringWithFormat:@\"%@\\n\", msg];\n    \n    NSMutableDictionary *attributes = [NSMutableDictionary dictionaryWithCapacity:1];\n    [attributes setObject:[NSColor blackColor] forKey:NSForegroundColorAttributeName];\n    \n    NSAttributedString *as = [[NSAttributedString alloc] initWithString:paragraph attributes:attributes];\n    [as autorelease];\n    \n    [[logView textStorage] appendAttributedString:as];\n    [self scrollToBottom];\n}\n\n- (void)onSocket:(AsyncSocket *)sock didAcceptNewSocket:(AsyncSocket *)newSocket\n{\n    [connectedSockets addObject:newSocket];\n}\n\n// 客户连接成功！\n- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\n{\n    [self logInfo:FORMAT(@\"Accepted client %@:%hu\", host, port)];\n    \n    NSString *welcomeMsg = @\"恭喜您,已经通过scoket连接上服务器!\";\n    NSData *welcomeData = [welcomeMsg dataUsingEncoding:NSUTF8StringEncoding];\n    \n    [sock writeData:welcomeData withTimeout:-1 tag:WELCOME_MSG];\n    \n    // We could call readDataToData:withTimeout:tag: here - that would be perfectly fine.\n    // If we did this, we want to add a check in onSocket:didWriteDataWithTag: and only\n    // queue another read if tag != WELCOME_MSG.\n}\n\n- (void)onSocket:(AsyncSocket *)sock didWriteDataWithTag:(long)tag\n{\n   [sock readDataToData:[AsyncSocket CRLFData] withTimeout:-1 tag:0];\n}\n// 接收到数据\n- (void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n{\n    NSData *strData = [data subdataWithRange:NSMakeRange(0, [data length] - 2)];\n    NSString *recvMsg = [[[NSString alloc] initWithData:strData encoding:NSUTF8StringEncoding] autorelease];\n    if(recvMsg)\n    {\n        [self logMessage:recvMsg];\n    }\n    else\n    {\n        [self logError:@\"Error converting received data into UTF-8 String\"];\n    }\n    NSString *backStr = nil;\n    for (AsyncSocket *socket in connectedSockets) {\n        if ([sock isEqualTo:socket]) {\n            backStr = [NSString stringWithFormat:@\"我说: %@\",recvMsg];\n        } else {\n            backStr = [NSString stringWithFormat:@\"他说: %@\",recvMsg];\n        }\n    }\n    \n    // 回发数据\n    NSData* backData = [backStr dataUsingEncoding:NSUTF8StringEncoding];\n    [sock writeData:backData withTimeout:-1 tag:ECHO_MSG];\n}\n\n- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\n{\n    [self logInfo:FORMAT(@\"Client Disconnected: %@:%hu\", [sock connectedHost], [sock connectedPort])];\n}\n\n- (void)onSocketDidDisconnect:(AsyncSocket *)sock\n{\n    [connectedSockets removeObject:sock];\n}\n\n@end\n```\n\n界面搭建\n![界面搭建](/MyImage/AsyncSocket/AsyncSocket.jpg)\n\n### [源代码](/CodeSource/AsyncSocket/AsyncSocket.zip) (/CodeSource/AsyncSocket/AsyncSocket.zip)","source":"_posts/AsyncSocket简单使用.markdown","raw":"# AsyncSocket简单使用\ntitle: AsyncSocket简单使用\ntags : [IOS开发SDK]\ndate: 2015-09-06 11:50:07\n---\n\n有一段时间没有认真总结和写博客了\n\n前段时间找工作、进入工作阶段。比较少静下来认真总结，现在静下心来总结一下最近的一些心得\n\n前言\nAsyncSocket介绍\nAsyncSocket详解\nAsyncSocket示例\n一、前言\n\n公司的项目用到了Socket编程，之前在学习的过程当中，用到的更多的还是http请求的方式。但是既然用到了就必须学习一下，所以就在网上找一些例子，然后想自己写一个demo。可是发现很多写iOS Socket的博客并没有很详细的说明，也可能是大神们觉得其他东西都浅显易懂。\n\n自己专研了一下，将自己的一些理解总结出来，一方面整理自己的学习思路，另一方面，为一些和我有同样困惑的小伙伴们，稍做指引。\n\n 二、AsyncSocket介绍\n\n1⃣️iOS中Socket编程的方式有哪些？\n\n－BSD Socket\n\nBSD Socket 是UNIX系统中通用的网络接口，它不仅支持各种不同的网络类型，而且也是一种内部进程之间的通信机制。而iOS系统其实本质就是UNIX，所以可以用，但是比较复杂。\n\n－CFSocket\n\nCFSocket是苹果提供给我们的使用Socket的方式，但是用起来还是会不太顺手。当然想使用的话，可以细细研究一下。\n\n－AsyncSocket\n\n这次博客的主讲内容，也是我们在开发项目中经常会用到的。\n\n2⃣️为什么选择AsyncSocket？\n\niphone的CFNetwork编程比较艰深。使用AsyncSocket开源库来开发相对较简单，帮助我们封装了很多东西。\n\n三、AsyncSocket详解\n\n 1⃣️说明\n\n在我们开发当中，我们主要的任务是开发客户端。所以详解里主要将客户端的整个连接建立过程，以及在说明时候回调哪些函数。在后面的示例代码中，也会给出服务器端的简单开发。\n\n2 过程详解\n\n1.建立连接\n\n- (int)connectServer:(NSString *)hostIP port:(int)hostPort\n\n2.连接成功后，会回调的函数\n\n- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\n\n3.发送数据\n\n- (void)writeData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag;\n\n4.接受数据\n\n-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n\n5.断开连接\n\n- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\n\n- (void)onSocketDidDisconnect:(AsyncSocket *)sock\n\n主要就是上述的几个方法，只是说在真正开发当中，很可能我们在收发数据的时候，我们收发的数据并不仅仅是一个字符串包装成NSData即可，我们很可能会发送结构体等类型，这个时候我们就需要和服务器端的人员协作来开发：定义怎样的结构体。\n\n四、AsyncSocket示例\n\n客户端代码\n```bash \n#import \"ViewController.h\"\n\n#define SRV_CONNECTED 0\n#define SRV_CONNECT_SUC 1\n#define SRV_CONNECT_FAIL 2\n#define HOST_IP @\"192.168.83.40\"\n#define HOST_PORT 8008\n\n@interface ViewController ()\n{\n    NSString *_content;\n}\n-(int) connectServer: (NSString *) hostIP port:(int) hostPort;\n-(void)showMessage:(NSString *) msg;\n@end\n\n@implementation ViewController\n\n@synthesize clientSocket,tbInputMsg,lblOutputMsg;\n\n#pragma mark - view lifecycle\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n    [self connectServer:HOST_IP port:HOST_PORT];\n}\n- (void)viewDidUnload\n{\n    [super viewDidUnload];\n    [clientSocket release], clientSocket = nil;\n    [tbInputMsg release], tbInputMsg = nil;\n    [lblOutputMsg release], lblOutputMsg = nil;\n}\n\n- (int)connectServer:(NSString *)hostIP port:(int)hostPort\n{\n    if (clientSocket == nil)\n    {\n        // 在需要联接地方使用connectToHost联接服务器\n        clientSocket = [[AsyncSocket alloc] initWithDelegate:self];\n        NSError *err = nil;\n        if (![clientSocket connectToHost:hostIP onPort:hostPort error:&err])\n        {\n            NSLog(@\"Error %d:%@\", err.code, [err localizedDescription]);\n            \n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[@\"Connection failed to host\" stringByAppendingString:hostIP] message:[NSString stringWithFormat:@\"%d:%@\",err.code,err.localizedDescription] delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil];\n            [alert show];\n            [alert release];\n            return SRV_CONNECT_FAIL;\n        } else {\n            NSLog(@\"Connected!\");\n            return SRV_CONNECT_SUC;\n        }\n    }\n    else {\n        return SRV_CONNECTED;\n    }\n}\n\n#pragma mark - IBAction\n// 发送数据\n- (IBAction) sendMsg:(id)sender\n{\n    NSString *inputMsgStr = tbInputMsg.text;\n    NSString * content = [inputMsgStr stringByAppendingString:@\"\\r\\n\"];\n    NSLog(@\"%@\",content);\n    NSData *data = [content dataUsingEncoding:NSUTF8StringEncoding];\n    // NSData *data = [content dataUsingEncoding:NSISOLatin1StringEncoding];\n    [clientSocket writeData:data withTimeout:-1 tag:0];\n}\n// 连接/重新连接\n- (IBAction) reconnect:(id)sender\n{\n    int stat = [self connectServer:HOST_IP port:HOST_PORT];\n    switch (stat) {\n        case SRV_CONNECT_SUC:\n            [self showMessage:@\"connect success\"];\n            break;\n        case SRV_CONNECTED:\n            [self showMessage:@\"It's connected,don't agian\"];\n            break;\n        default:\n            break;\n    }\n}\n- (void)showMessage:(NSString *)msg\n{\n    UIAlertView * alert = [[UIAlertView alloc]initWithTitle:@\"Alert!\"\n                                                    message:msg\n                                                   delegate:nil\n                                          cancelButtonTitle:@\"OK\"\n                                          otherButtonTitles:nil];\n    [alert show];\n    [alert release];\n}\n- (IBAction)textFieldDoneEditing:(id)sender\n{\n    [tbInputMsg resignFirstResponder];\n}\n- (IBAction)backgroundTouch:(id)sender\n{\n    [tbInputMsg resignFirstResponder];\n}\n\n#pragma mark socket delegate\n- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\n{\n    [clientSocket readDataWithTimeout:-1 tag:0];\n}\n\n- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\n{\n    NSLog(@\"Error\");\n}\n\n- (void)onSocketDidDisconnect:(AsyncSocket *)sock\n{\n    NSString *msg = @\"Sorry this connect is failure\";\n    [self showMessage:msg];\n    [msg release];\n    clientSocket = nil;\n}\n\n- (void)onSocketDidSecure:(AsyncSocket *)sock\n{\n}\n\n// 接收到数据（可以通过tag区分）\n-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n{\n    NSString* aStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    _content = lblOutputMsg.text;\n    NSLog(@\"Hava received datas is :%@\",aStr);\n    NSString *newStr = [NSString stringWithFormat:@\"\\n%@\", aStr];\n    lblOutputMsg.text = [_content stringByAppendingString:newStr];\n    [aStr release];\n    [clientSocket readDataWithTimeout:-1 tag:0];\n}\n\n@end\n```\n服务器端代码\n\n```bash\n#import \"SocketView.h\"\n#import \"AsyncSocket.h\"\n\n#define WELCOME_MSG  0\n#define ECHO_MSG     1\n\n#define FORMAT(format, ...) [NSString stringWithFormat:(format), ##__VA_ARGS__]\n\n@interface SocketView (PrivateAPI)\n- (void)logError:(NSString *)msg;\n- (void)logInfo:(NSString *)msg;\n- (void)logMessage:(NSString *)msg;\n@end\n\n@implementation SocketView\n\n// 初始化\n- (void)awakeFromNib\n{\n    listenSocket = [[AsyncSocket alloc] initWithDelegate:self];\n    [listenSocket setRunLoopModes:[NSArray arrayWithObject:NSRunLoopCommonModes]];\n    \n    connectedSockets = [[NSMutableArray alloc] initWithCapacity:1];\n    isRunning = NO;\n    \n    [logView setString:@\"\"];\n    // [portField setString:@\"8080\"];\n}\n\n- (IBAction)startStop:(id)sender\n{\n    if(!isRunning)\n    {\n        int port = [portField intValue];\n        \n        if(port < 0 || port > 65535)\n        {\n            port = 0; // 会随即取端口\n        }\n        \n        NSError *error = nil;\n        if(![listenSocket acceptOnPort:port error:&error])\n        {\n            [self logError:FORMAT(@\"Error starting server: %@\", error)];\n            return;\n        }\n        \n        [self logInfo:FORMAT(@\"Echo server started on port %hu\", [listenSocket localPort])];\n        isRunning = YES;\n        \n        [portField setEnabled:NO];\n        [startStopButton setTitle:@\"Stop\"];\n    }\n    else\n    {\n        // Stop accepting connections\n        [listenSocket disconnect];\n        \n        // Stop any client connections\n        int i;\n        for(i = 0; i < [connectedSockets count]; i++)\n        {\n            // Call disconnect on the socket,\n            // which will invoke the onSocketDidDisconnect: method,\n            // which will remove the socket from the list.\n            [[connectedSockets objectAtIndex:i] disconnect];\n        }\n        \n        [self logInfo:@\"Stopped Echo server\"];\n        isRunning = false;\n        \n        [portField setEnabled:YES];\n        [startStopButton setTitle:@\"Start\"];\n    }\n}\n\n- (void)scrollToBottom\n{\n    NSScrollView *scrollView = [logView enclosingScrollView];\n    NSPoint newScrollOrigin;\n    \n    if ([[scrollView documentView] isFlipped])\n        newScrollOrigin = NSMakePoint(0.0, NSMaxY([[scrollView documentView] frame]));\n    else\n        newScrollOrigin = NSMakePoint(0.0, 0.0);\n    \n    [[scrollView documentView] scrollPoint:newScrollOrigin];\n}\n\n- (void)logError:(NSString *)msg\n{\n    NSString *paragraph = [NSString stringWithFormat:@\"%@\\n\", msg];\n    \n    NSMutableDictionary *attributes = [NSMutableDictionary dictionaryWithCapacity:1];\n    [attributes setObject:[NSColor redColor] forKey:NSForegroundColorAttributeName];\n    \n    NSAttributedString *as = [[NSAttributedString alloc] initWithString:paragraph attributes:attributes];\n    [as autorelease];\n    \n    [[logView textStorage] appendAttributedString:as];\n    [self scrollToBottom];\n}\n\n- (void)logInfo:(NSString *)msg\n{\n    NSString *paragraph = [NSString stringWithFormat:@\"%@\\n\", msg];\n    \n    NSMutableDictionary *attributes = [NSMutableDictionary dictionaryWithCapacity:1];\n    [attributes setObject:[NSColor purpleColor] forKey:NSForegroundColorAttributeName];\n    \n    NSAttributedString *as = [[NSAttributedString alloc] initWithString:paragraph attributes:attributes];\n    [as autorelease];\n    \n    [[logView textStorage] appendAttributedString:as];\n    [self scrollToBottom];\n}\n\n- (void)logMessage:(NSString *)msg\n{\n    NSString *paragraph = [NSString stringWithFormat:@\"%@\\n\", msg];\n    \n    NSMutableDictionary *attributes = [NSMutableDictionary dictionaryWithCapacity:1];\n    [attributes setObject:[NSColor blackColor] forKey:NSForegroundColorAttributeName];\n    \n    NSAttributedString *as = [[NSAttributedString alloc] initWithString:paragraph attributes:attributes];\n    [as autorelease];\n    \n    [[logView textStorage] appendAttributedString:as];\n    [self scrollToBottom];\n}\n\n- (void)onSocket:(AsyncSocket *)sock didAcceptNewSocket:(AsyncSocket *)newSocket\n{\n    [connectedSockets addObject:newSocket];\n}\n\n// 客户连接成功！\n- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\n{\n    [self logInfo:FORMAT(@\"Accepted client %@:%hu\", host, port)];\n    \n    NSString *welcomeMsg = @\"恭喜您,已经通过scoket连接上服务器!\";\n    NSData *welcomeData = [welcomeMsg dataUsingEncoding:NSUTF8StringEncoding];\n    \n    [sock writeData:welcomeData withTimeout:-1 tag:WELCOME_MSG];\n    \n    // We could call readDataToData:withTimeout:tag: here - that would be perfectly fine.\n    // If we did this, we want to add a check in onSocket:didWriteDataWithTag: and only\n    // queue another read if tag != WELCOME_MSG.\n}\n\n- (void)onSocket:(AsyncSocket *)sock didWriteDataWithTag:(long)tag\n{\n   [sock readDataToData:[AsyncSocket CRLFData] withTimeout:-1 tag:0];\n}\n// 接收到数据\n- (void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n{\n    NSData *strData = [data subdataWithRange:NSMakeRange(0, [data length] - 2)];\n    NSString *recvMsg = [[[NSString alloc] initWithData:strData encoding:NSUTF8StringEncoding] autorelease];\n    if(recvMsg)\n    {\n        [self logMessage:recvMsg];\n    }\n    else\n    {\n        [self logError:@\"Error converting received data into UTF-8 String\"];\n    }\n    NSString *backStr = nil;\n    for (AsyncSocket *socket in connectedSockets) {\n        if ([sock isEqualTo:socket]) {\n            backStr = [NSString stringWithFormat:@\"我说: %@\",recvMsg];\n        } else {\n            backStr = [NSString stringWithFormat:@\"他说: %@\",recvMsg];\n        }\n    }\n    \n    // 回发数据\n    NSData* backData = [backStr dataUsingEncoding:NSUTF8StringEncoding];\n    [sock writeData:backData withTimeout:-1 tag:ECHO_MSG];\n}\n\n- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\n{\n    [self logInfo:FORMAT(@\"Client Disconnected: %@:%hu\", [sock connectedHost], [sock connectedPort])];\n}\n\n- (void)onSocketDidDisconnect:(AsyncSocket *)sock\n{\n    [connectedSockets removeObject:sock];\n}\n\n@end\n```\n\n界面搭建\n![界面搭建](/MyImage/AsyncSocket/AsyncSocket.jpg)\n\n### [源代码](/CodeSource/AsyncSocket/AsyncSocket.zip) (/CodeSource/AsyncSocket/AsyncSocket.zip)","slug":"AsyncSocket简单使用","published":1,"updated":"2015-09-09T03:18:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhal002wph3myj5bq6qs"},{"title":"AFNetworking简单使用","date":"2015-10-09T03:50:07.000Z","_content":"**AFNetworking是一个轻量级的iOS网络通信类库。它建立在NSURLConnection和NSOperation等类库的基础上，让很多网络通信功能的实现变得十分简单。它支持HTTP请求和基于REST的网络服务（包括GET、POST、 PUT、DELETE等）。支持ARC。\nGithub地址：https://github.com/AFNetworking/AFNetworking**\n\n    //\n    //  MJViewController.m\n    //  03.AFN演练\n    //\n    //  Created by apple on 14-4-30.\n    //  Copyright (c) 2014年 itcast. All rights reserved.\n    //\n\n    #import \"MJViewController.h\"\n    #import \"AFNetworking.h\"\n    @interface MJViewController ()\n    @end\n\n    @implementation MJViewController\n    /**\n    要使用常规的AFN网络访问\n \n     1. AFHTTPRequestOperationManager *manager =             [AFHTTPRequestOperationManager manager];\n \n    所有的网络请求,均有manager发起\n \n     2. 需要注意的是,默认提交请求的数据是二进制的,返回格式是JSON\n \n    1> 如果提交数据是JSON的,需要将请求格式设置为AFJSONRequestSerializer\n    2> 如果返回格式不是JSON的,\n \n     3. 请求格式\n \n     AFHTTPRequestSerializer            二进制格式\n     AFJSONRequestSerializer            JSON\n     AFPropertyListRequestSerializer    PList(是一种特殊的XML,解析起来相对容易)\n \n     4. 返回格式\n \n     AFHTTPResponseSerializer           二进制格式\n     AFJSONResponseSerializer           JSON\n     AFXMLParserResponseSerializer          XML,只能返回XMLParser,还需要自己通过代理方法解析\n     AFXMLDocumentResponseSerializer (Mac OS X)\n     AFPropertyListResponseSerializer   PList\n     AFImageResponseSerializer          Image\n     AFCompoundResponseSerializer       组合\n     */\n\n    - (void)viewDidLoad\n    {\n    [super viewDidLoad];\n    \n    [self reach];\n    }\n\n    #pragma mark - 演练\n    #pragma mark - 检测网络连接\n    - (void)reach\n    {\n        /**\n     AFNetworkReachabilityStatusUnknown          = -1,  // 未知\n     AFNetworkReachabilityStatusNotReachable     = 0,   // 无连接\n     AFNetworkReachabilityStatusReachableViaWWAN = 1,   // 3G 花钱\n     AFNetworkReachabilityStatusReachableViaWiFi = 2,   // 局域网络,不花钱\n     */\n    // 如果要检测网络状态的变化,必须用检测管理器的单例的startMonitoring\n    [[AFNetworkReachabilityManager sharedManager] startMonitoring];\n    \n    // 检测网络连接的单例,网络变化时的回调方法\n    [[AFNetworkReachabilityManager sharedManager]     setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {\n        NSLog(@\"%d\", status);\n    }];\n    }\n\n    #pragma mark - Session 下载\n    - (void)sessionDownload\n    {\n    NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];\n    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:config];\n    \n    NSString *urlString = @\"http://localhost/itcast/videos/01.C语言-语法预览.mp4\";\n    urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    \n    NSURL *url = [NSURL URLWithString:urlString];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    \n    NSURLSessionDownloadTask *task = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {\n        // 指定下载文件保存的路径\n    //        NSLog(@\"%@ %@\", targetPath, response.suggestedFilename);\n        // 将下载文件保存在缓存路径中\n        NSString *cacheDir = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];\n        NSString *path = [cacheDir stringByAppendingPathComponent:response.suggestedFilename];\n        \n        // URLWithString返回的是网络的URL,如果使用本地URL,需要注意\n        NSURL *fileURL1 = [NSURL URLWithString:path];\n        NSURL *fileURL = [NSURL fileURLWithPath:path];\n        \n        NSLog(@\"== %@ |||| %@\", fileURL1, fileURL);\n        \n        return fileURL;\n    } completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {\n        NSLog(@\"%@ %@\", filePath, error);\n    }];\n    \n    [task resume];\n    }\n\n    #pragma mark - POST JSON\n    - (void)postJSON\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    NSDictionary *dict = @{@\"name\": @\"zhangsan\"};\n    NSDictionary *dict1 = @{@\"name\": @\"wangwu\"};\n    NSArray *array = @[dict, dict1];\n    // 设置请求格式\n    manager.requestSerializer = [AFJSONRequestSerializer serializer];\n    // 设置返回格式\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    [manager POST:@\"http://localhost/postjson.php\" parameters:array success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSString *result = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n        \n        NSLog(@\"%@\", result);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        \n    }];\n    \n    }\n\n    #pragma mark - 随机文件名上传\n    - (void)postUpload1\n    {\n    // 本地上传给服务器时,没有确定的URL,不好用MD5的方式处理\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    [manager POST:@\"http://localhost/demo/upload.php\" parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n        \n        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@\"头像1.png\" withExtension:nil];\n        \n        // 要上传保存在服务器中的名称\n        // 使用时间来作为文件名 2014-04-30 14:20:57.png\n        // 让不同的用户信息,保存在不同目录中\n        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n        // 设置日期格式\n        formatter.dateFormat = @\"yyyy-MM-dd HH:mm:ss\";\n        NSString *fileName = [formatter stringFromDate:[NSDate date]];\n        \n        [formData appendPartWithFileURL:fileURL name:@\"uploadFile\" fileName:fileName mimeType:@\"image/png\" error:NULL];\n        \n    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"OK\");\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"error\");\n    }];\n    }\n\n    #pragma mark - POST上传\n    - (void)postUpload\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    // AFHTTPResponseSerializer就是正常的HTTP请求响应结果:NSData\n    // 当请求的返回数据不是JSON,XML,PList,UIImage之外,使用AFHTTPResponseSerializer\n    // 例如返回一个html,text...\n    //\n    // 实际上就是AFN没有对响应数据做任何处理的情况\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // formData是遵守了AFMultipartFormData的对象\n    [manager POST:@\"http://localhost/demo/upload.php\" parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n        \n        // 将本地的文件上传至服务器\n        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@\"头像1.png\" withExtension:nil];\n        \n        [formData appendPartWithFileURL:fileURL name:@\"uploadFile\" error:NULL];\n    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSString *result = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n        \n        NSLog(@\"完成 %@\", result);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"错误 %@\", error.localizedDescription);\n    }];\n    }\n\n    #pragma mark - JSON\n    - (void)XMLData\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 返回的数据格式是XML\n    manager.responseSerializer = [AFXMLParserResponseSerializer serializer];\n    \n    NSDictionary *dict = @{@\"format\": @\"xml\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager GET:@\"http://localhost/videos.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        \n        // 如果结果是XML,同样需要使用6个代理方法解析,或者使用第三方库\n        // 第三方库第三方框架,效率低,内存泄漏\n        NSLog(@\"%@\", responseObject);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    #pragma mark - JSON\n    - (void)JSONData\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 原本需要拼接get访问URL ? & =\n    NSDictionary *dict = @{@\"format\": @\"json\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager GET:@\"http://localhost/videos.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"%@\", responseObject);\n        // 提问:NSURLConnection异步方法回调,是在子线程\n        // 得到回调之后,通常更新UI,是在主线程\n        NSLog(@\"%@\", [NSThread currentThread]);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    #pragma mark - POST登录\n    - (void)postLogin\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 原本需要拼接get访问URL ? & =\n    NSDictionary *dict = @{@\"username\": @\"wangwu\", @\"password\" : @\"wang\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager POST:@\"http://localhost/login.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"%@\", responseObject);\n        // 提问:NSURLConnection异步方法回调,是在子线程\n        // 得到回调之后,通常更新UI,是在主线程\n        NSLog(@\"%@\", [NSThread currentThread]);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    #pragma mark - GET登录\n    - (void)getLogin\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 原本需要拼接get访问URL ? & =\n    NSDictionary *dict = @{@\"username\": @\"wangwu\", @\"password\" : @\"wang\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager GET:@\"http://localhost/login.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"%@\", responseObject);\n        // 提问:NSURLConnection异步方法回调,是在子线程\n        // 得到回调之后,通常更新UI,是在主线程\n        NSLog(@\"%@\", [NSThread currentThread]);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    @end\n    \n    \n    \n    \n    \n    －－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n        镔哥哥做项目，一般的数据请求不管他多复杂，只要自己写好了请求，那么调用永远是那么的简单，那么我介绍一下\n    \n    一：需要用到第三方框架AFNetworking，直接写在工程pch头文件里就行因为经常用到它，这在网上随便下载就行，最好用cocopod来下载，这样什么都有了，cocopod是什么，我就不说，博客上面有介绍。\n    \n    开始啦：\n    \n    1：自定义网络请求 DataRequestManager类专门管理网络用的\n    \n    朋友们以下代码就可以直接复制来用了\n    \n    .h文件\n    \n    //  DataRequestManager.h\n    \n    //  TestKeyBoard\n    \n    //  Created by mac on 14-10-21.\n    \n    //  Copyright (c) 2014 年 mac. All rights reserved.\n    \n    #import <Foundation/Foundation.h>\n    \n    @protocol DataRequestManagerDelegate< NSObject >\n    \n    // 通过代理传值到需要的地方\n    \n    - ( void )passValue:( id )value;\n    \n    @optional\n    \n    - ( void )passGetValue:( id )getValue;\n    \n    @end\n    \n    @interface DataRequestManager : NSObject\n    \n    {\n    \n    AFHTTPRequestOperationManager *manager; // 创建请求（ iOS 6-7 ）\n    \n    AFURLSessionManager *sessionManager;    // 创建请求（ iOS7 专用）\n    \n    AFHTTPRequestOperation *operation;      // 创建请求管理（用于上传和下载）\n    \n    }\n    \n    @property ( nonatomic , assign ) id < DataRequestManagerDelegate > delegate;\n    \n    //GET 请求调用方法\n    \n    - ( void )methodGetWithURL:( NSString *)urlString;\n    \n    //POST 请求调用方法\n    \n    - ( void )methodPostWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters;\n    \n    // 上传图片\n    \n    - ( void )methodUploadWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters image:( UIImage *)image;\n    \n    @end\n    \n    .m文件\n    \n    //  DataRequestManager.m\n    \n    //  TestKeyBoard\n    \n    //\n    \n    //  Created by mac on 14-10-21.\n    \n    //  Copyright (c) 2014 年 mac. All rights reserved.\n    \n    //\n    \n    #import \"DataRequestManager.h\"\n    \n    #import \"AFNetworking.h\"\n    \n    @implementation DataRequestManager\n    \n    //GET 请求\n    \n    - ( void )methodGetWithURL:( NSString *)urlString\n    \n    {\n    \n    // 致空请求\n    \n    if ( manager ) {\n    \n    manager = nil ;\n    \n    }\n    \n    // 创建请求\n    \n    manager = [ AFHTTPRequestOperationManager manager ];\n    \n    // 设置请求的解析器为 AFHTTPResponseSerializer （用于直接解析数据 NSData ），默认为 AFJSONResponseSerializer （用于解析 JSON ）\n    \n    //    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // 发送 GET 请求\n    \n    [ manager GET :urlString parameters : nil success :^( AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功（当解析器为 AFJSONResponseSerializer 时）\n    \n    NSLog ( @\"getSuccess: %@\" , responseObject);\n    \n    [ self . delegate passGetValue :responseObject];\n    \n    // 请求成功（当解析器为 AFHTTPResponseSerializer 时）\n    \n    //        NSString *JSONString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    \n    //        NSLog(@\"success:%@\", JSONString);\n    \n    } failure :^( AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    }];\n    \n    }\n    \n    #pragma mark - POST Request (iOS 6-7)\n    \n    //POST 请求\n    \n    - ( void )methodPostWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters\n    \n    {\n    \n    // 致空请求\n    \n    if ( manager ) {\n    \n    manager = nil ;\n    \n    }\n    \n    // 添加参数\n    \n    // 创建请求\n    \n    manager = [ AFHTTPRequestOperationManager manager ];\n    \n    // 设置请求的解析器为 AFHTTPResponseSerializer （用于直接解析数据 NSData ），默认为 AFJSONResponseSerializer （用于解析 JSON ）\n    \n    //    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // 发送 POST 请求\n    \n    [ manager POST :urlString parameters :parameters success :^( AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功（当解析器为 AFJSONResponseSerializer 时）\n    \n    //        NSLog(@\"Success: %@\", responseObject);\n    \n    [ self . delegate passValue :responseObject];\n    \n    // 请求成功（当解析器为 AFHTTPResponseSerializer 时）\n    \n    //        NSString *JSONString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    \n    //        NSLog(@\"success:%@\", JSONString);\n    \n    } failure :^( AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    }];\n    \n    }\n    \n    #pragma mark - Upload Request (iOS 6-7)\n    \n    // 上传（以表单方式上传，以图片为例）\n    \n    - ( void )methodUploadWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters image:( UIImage *)image\n    \n    {\n    \n    // 致空请求\n    \n    if ( manager ) {\n    \n    manager = nil ;\n    \n    }\n    \n    // 添加参数\n    \n    // 创建请求\n    \n    manager = [ AFHTTPRequestOperationManager manager ];\n    \n    // 设置请求的解析器为 AFHTTPResponseSerializer （用于直接解析数据 NSData ），默认为 AFJSONResponseSerializer （用于解析 JSON ）\n    \n    //    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // 发送 POST 请求，添加需要发送的文件，此处为图片\n    \n    [ manager POST :urlString parameters :parameters constructingBodyWithBlock :^( id < AFMultipartFormData > formData) {\n    \n    // 添加图片，并对其进行压缩（ 0.0 为最大压缩率， 1.0 为最小压缩率）\n    \n    NSData *imageData = UIImageJPEGRepresentation (image, 1.0 );\n    \n    NSDateFormatter *formatter = [[ NSDateFormatter alloc ] init ];\n    \n    // 设置时间格式\n    \n    formatter. dateFormat = @\"yyyyMMddHHmmss\" ;\n    \n    NSString *str = [formatter stringFromDate :[ NSDate date ]];\n    \n    NSString *fileName = [ NSString stringWithFormat : @\"%@.png\" , str];\n    \n    // 添加要上传的文件，此处为图片\n    \n    [formData appendPartWithFileData :imageData\n    \n    name : @\"uploadFile\"\n    \n    fileName :fileName\n    \n    mimeType : @\"image/jpeg\" ];\n    \n    } success :^( AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功（当解析器为 AFJSONResponseSerializer 时）\n    \n    NSLog ( @\"Success: %@\" , responseObject);\n    \n    [ self . delegate passValue :responseObject];\n    \n    // 请求成功（当解析器为 AFHTTPResponseSerializer 时）\n    \n    //        NSString *JSONString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    \n    //        NSLog(@\"success:%@\", JSONString);\n    \n    } failure :^( AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    }];\n    \n    }\n    \n    #pragma mark - Download Request (iOS 6-7)\n    \n    // 下载\n    \n    - ( void )methodDownload\n    \n    {\n    \n    /*\n    \n    // 下载进度条\n    \n    UIProgressView  *downProgressView = [[UIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleDefault];\n    \n    downProgressView.center = CGPointMake(self.view.center.x, 220);\n    \n    downProgressView.progress = 0;\n    \n    downProgressView.progressTintColor = [UIColor blueColor];\n    \n    downProgressView.trackTintColor = [UIColor grayColor];\n    \n    [self.view addSubview:downProgressView];\n    \n    // 设置存放文件的位置（此 Demo 把文件保存在 iPhone 沙盒中的 Documents 文件夹中。关于如何获取文件路径，请自行搜索相关资料）\n    \n    // 方法一\n    \n    //    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    \n    //    NSString *cachesDirectory = [paths objectAtIndex:0];\n    \n    //    NSString *filePath = [cachesDirectory stringByAppendingPathComponent:@\" 文件名 \"];\n    \n    // 方法二\n    \n    NSString *filePath = [NSString stringWithFormat:@\"%@/Documents/ 文件名（注意后缀名） \", NSHomeDirectory()];\n    \n    // 打印文件保存的路径\n    \n    NSLog(@\"%@\",filePath);\n    \n    // 创建请求管理\n    \n    operation = [[AFHTTPRequestOperation alloc] initWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@\" 下载地址 \"]]];\n    \n    // 添加下载请求（获取服务器的输出流）\n    \n    operation.outputStream = [NSOutputStream outputStreamToFileAtPath:filePath append:NO];\n    \n    // 设置下载进度条\n    \n    [operation setDownloadProgressBlock:^(NSUInteger bytesRead, long long totalBytesRead, long long totalBytesExpectedToRead) {\n    \n    // 显示下载进度\n    \n    CGFloat progress = ((float)totalBytesRead) / totalBytesExpectedToRead;\n    \n    [downProgressView setProgress:progress animated:YES];\n    \n    }];\n    \n    // 请求管理判断请求结果\n    \n    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功\n    \n    NSLog(@\"Finish and Download to: %@\", filePath);\n    \n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog(@\"Error: %@\",error);\n    \n    }];\n    \n    */\n    \n    }\n    \n    #pragma mark - Download Management (iOS 6-7)\n    \n    // 开始下载（断点续传）\n    \n    - ( void )downloadStart\n    \n    {\n    \n    [ self methodDownload ];\n    \n    [ operation start ];\n    \n    }\n    \n    // 暂停下载（断点续传）\n    \n    - ( void )downloadPause\n    \n    {\n    \n    [ operation pause ];\n    \n    }\n    \n    // 继续下载（断点续传）\n    \n    - ( void )downloadResume\n    \n    {\n    \n    [ operation resume ];\n    \n    }\n    \n    #pragma mark - Upload Request (iOS 7 only)\n    \n    // 上传（ iOS7 专用）\n    \n    - ( void )methodUploadFor7\n    \n    {\n    \n    // 致空请求\n    \n    if ( sessionManager ) {\n    \n    sessionManager = nil ;\n    \n    }\n    \n    // 创建请求（ iOS7 专用）\n    \n    sessionManager = [[ AFURLSessionManager alloc ] initWithSessionConfiguration :[ NSURLSessionConfiguration defaultSessionConfiguration ]];\n    \n    // 添加请求接口\n    \n    NSURLRequest *request = [ NSURLRequest requestWithURL :[ NSURL URLWithString : @\" 上传地址 \" ]];\n    \n    // 添加上传的文件\n    \n    NSURL *filePath = [ NSURL fileURLWithPath : @\" 本地文件地址 \" ];\n    \n    // 发送上传请求\n    \n    NSURLSessionUploadTask *uploadTask = [ sessionManager uploadTaskWithRequest :request fromFile :filePath progress : nil completionHandler :^( NSURLResponse *response, id responseObject, NSError *error) {\n    \n    if (error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    } else {\n    \n    // 请求成功\n    \n    NSLog ( @\"Success: %@ %@\" , response, responseObject);\n    \n    }\n    \n    }];\n    \n    // 开始上传\n    \n    [uploadTask resume ];\n    \n    }\n    \n    #pragma mark - Download Request (iOS 7 only)\n    \n    // 下载（ iOS7 专用）\n    \n    - ( void )methodDownloadFor7\n    \n    {\n    \n    // 致空请求\n    \n    if ( sessionManager ) {\n    \n    sessionManager = nil ;\n    \n    }\n    \n    // 创建请求（ iOS7 专用）\n    \n    sessionManager = [[ AFURLSessionManager alloc ] initWithSessionConfiguration :[ NSURLSessionConfiguration defaultSessionConfiguration ]];\n    \n    // 添加请求接口\n    \n    NSURLRequest *request = [ NSURLRequest requestWithURL :[ NSURL URLWithString : @\" 下载地址 \" ]];\n    \n    // 发送下载请求\n    \n    NSURLSessionDownloadTask *downloadTask = [ sessionManager downloadTaskWithRequest :request progress : nil destination :^ NSURL *( NSURL *targetPath, NSURLResponse *response) {\n    \n    // 设置存放文件的位置（此 Demo 把文件保存在 iPhone 沙盒中的 Documents 文件夹中。关于如何获取文件路径，请自行搜索相关资料）\n    \n    NSURL *filePath = [ NSURL fileURLWithPath :[ NSSearchPathForDirectoriesInDomains ( NSDocumentDirectory , NSUserDomainMask , YES ) firstObject ]];\n    \n    return [filePath URLByAppendingPathComponent :[response suggestedFilename ]];\n    \n    } completionHandler :^( NSURLResponse *response, NSURL *filePath, NSError *error) {\n    \n    // 下载完成\n    \n    NSLog ( @\"Finish and Download to: %@\" , filePath);\n    \n    }];\n    \n    // 开始下载\n    \n    [downloadTask resume ];\n    \n    }\n    \n    @end\n    \n    工程完美，自己复制可用\n\n\n\n\n\n","source":"_posts/AFNetworking简单使用.markdown","raw":"# AFNetworking简单使用\ntitle: AFNetworking简单使用\ntags : [IOS开发SDK]\ndate: 2015-10-09 11:50:07\n---\n**AFNetworking是一个轻量级的iOS网络通信类库。它建立在NSURLConnection和NSOperation等类库的基础上，让很多网络通信功能的实现变得十分简单。它支持HTTP请求和基于REST的网络服务（包括GET、POST、 PUT、DELETE等）。支持ARC。\nGithub地址：https://github.com/AFNetworking/AFNetworking**\n\n    //\n    //  MJViewController.m\n    //  03.AFN演练\n    //\n    //  Created by apple on 14-4-30.\n    //  Copyright (c) 2014年 itcast. All rights reserved.\n    //\n\n    #import \"MJViewController.h\"\n    #import \"AFNetworking.h\"\n    @interface MJViewController ()\n    @end\n\n    @implementation MJViewController\n    /**\n    要使用常规的AFN网络访问\n \n     1. AFHTTPRequestOperationManager *manager =             [AFHTTPRequestOperationManager manager];\n \n    所有的网络请求,均有manager发起\n \n     2. 需要注意的是,默认提交请求的数据是二进制的,返回格式是JSON\n \n    1> 如果提交数据是JSON的,需要将请求格式设置为AFJSONRequestSerializer\n    2> 如果返回格式不是JSON的,\n \n     3. 请求格式\n \n     AFHTTPRequestSerializer            二进制格式\n     AFJSONRequestSerializer            JSON\n     AFPropertyListRequestSerializer    PList(是一种特殊的XML,解析起来相对容易)\n \n     4. 返回格式\n \n     AFHTTPResponseSerializer           二进制格式\n     AFJSONResponseSerializer           JSON\n     AFXMLParserResponseSerializer          XML,只能返回XMLParser,还需要自己通过代理方法解析\n     AFXMLDocumentResponseSerializer (Mac OS X)\n     AFPropertyListResponseSerializer   PList\n     AFImageResponseSerializer          Image\n     AFCompoundResponseSerializer       组合\n     */\n\n    - (void)viewDidLoad\n    {\n    [super viewDidLoad];\n    \n    [self reach];\n    }\n\n    #pragma mark - 演练\n    #pragma mark - 检测网络连接\n    - (void)reach\n    {\n        /**\n     AFNetworkReachabilityStatusUnknown          = -1,  // 未知\n     AFNetworkReachabilityStatusNotReachable     = 0,   // 无连接\n     AFNetworkReachabilityStatusReachableViaWWAN = 1,   // 3G 花钱\n     AFNetworkReachabilityStatusReachableViaWiFi = 2,   // 局域网络,不花钱\n     */\n    // 如果要检测网络状态的变化,必须用检测管理器的单例的startMonitoring\n    [[AFNetworkReachabilityManager sharedManager] startMonitoring];\n    \n    // 检测网络连接的单例,网络变化时的回调方法\n    [[AFNetworkReachabilityManager sharedManager]     setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {\n        NSLog(@\"%d\", status);\n    }];\n    }\n\n    #pragma mark - Session 下载\n    - (void)sessionDownload\n    {\n    NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];\n    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:config];\n    \n    NSString *urlString = @\"http://localhost/itcast/videos/01.C语言-语法预览.mp4\";\n    urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    \n    NSURL *url = [NSURL URLWithString:urlString];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    \n    NSURLSessionDownloadTask *task = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {\n        // 指定下载文件保存的路径\n    //        NSLog(@\"%@ %@\", targetPath, response.suggestedFilename);\n        // 将下载文件保存在缓存路径中\n        NSString *cacheDir = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];\n        NSString *path = [cacheDir stringByAppendingPathComponent:response.suggestedFilename];\n        \n        // URLWithString返回的是网络的URL,如果使用本地URL,需要注意\n        NSURL *fileURL1 = [NSURL URLWithString:path];\n        NSURL *fileURL = [NSURL fileURLWithPath:path];\n        \n        NSLog(@\"== %@ |||| %@\", fileURL1, fileURL);\n        \n        return fileURL;\n    } completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {\n        NSLog(@\"%@ %@\", filePath, error);\n    }];\n    \n    [task resume];\n    }\n\n    #pragma mark - POST JSON\n    - (void)postJSON\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    NSDictionary *dict = @{@\"name\": @\"zhangsan\"};\n    NSDictionary *dict1 = @{@\"name\": @\"wangwu\"};\n    NSArray *array = @[dict, dict1];\n    // 设置请求格式\n    manager.requestSerializer = [AFJSONRequestSerializer serializer];\n    // 设置返回格式\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    [manager POST:@\"http://localhost/postjson.php\" parameters:array success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSString *result = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n        \n        NSLog(@\"%@\", result);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        \n    }];\n    \n    }\n\n    #pragma mark - 随机文件名上传\n    - (void)postUpload1\n    {\n    // 本地上传给服务器时,没有确定的URL,不好用MD5的方式处理\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    [manager POST:@\"http://localhost/demo/upload.php\" parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n        \n        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@\"头像1.png\" withExtension:nil];\n        \n        // 要上传保存在服务器中的名称\n        // 使用时间来作为文件名 2014-04-30 14:20:57.png\n        // 让不同的用户信息,保存在不同目录中\n        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n        // 设置日期格式\n        formatter.dateFormat = @\"yyyy-MM-dd HH:mm:ss\";\n        NSString *fileName = [formatter stringFromDate:[NSDate date]];\n        \n        [formData appendPartWithFileURL:fileURL name:@\"uploadFile\" fileName:fileName mimeType:@\"image/png\" error:NULL];\n        \n    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"OK\");\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"error\");\n    }];\n    }\n\n    #pragma mark - POST上传\n    - (void)postUpload\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    // AFHTTPResponseSerializer就是正常的HTTP请求响应结果:NSData\n    // 当请求的返回数据不是JSON,XML,PList,UIImage之外,使用AFHTTPResponseSerializer\n    // 例如返回一个html,text...\n    //\n    // 实际上就是AFN没有对响应数据做任何处理的情况\n    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // formData是遵守了AFMultipartFormData的对象\n    [manager POST:@\"http://localhost/demo/upload.php\" parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {\n        \n        // 将本地的文件上传至服务器\n        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@\"头像1.png\" withExtension:nil];\n        \n        [formData appendPartWithFileURL:fileURL name:@\"uploadFile\" error:NULL];\n    } success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSString *result = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n        \n        NSLog(@\"完成 %@\", result);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"错误 %@\", error.localizedDescription);\n    }];\n    }\n\n    #pragma mark - JSON\n    - (void)XMLData\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 返回的数据格式是XML\n    manager.responseSerializer = [AFXMLParserResponseSerializer serializer];\n    \n    NSDictionary *dict = @{@\"format\": @\"xml\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager GET:@\"http://localhost/videos.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        \n        // 如果结果是XML,同样需要使用6个代理方法解析,或者使用第三方库\n        // 第三方库第三方框架,效率低,内存泄漏\n        NSLog(@\"%@\", responseObject);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    #pragma mark - JSON\n    - (void)JSONData\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 原本需要拼接get访问URL ? & =\n    NSDictionary *dict = @{@\"format\": @\"json\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager GET:@\"http://localhost/videos.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"%@\", responseObject);\n        // 提问:NSURLConnection异步方法回调,是在子线程\n        // 得到回调之后,通常更新UI,是在主线程\n        NSLog(@\"%@\", [NSThread currentThread]);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    #pragma mark - POST登录\n    - (void)postLogin\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 原本需要拼接get访问URL ? & =\n    NSDictionary *dict = @{@\"username\": @\"wangwu\", @\"password\" : @\"wang\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager POST:@\"http://localhost/login.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"%@\", responseObject);\n        // 提问:NSURLConnection异步方法回调,是在子线程\n        // 得到回调之后,通常更新UI,是在主线程\n        NSLog(@\"%@\", [NSThread currentThread]);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    #pragma mark - GET登录\n    - (void)getLogin\n    {\n    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];\n    \n    // 原本需要拼接get访问URL ? & =\n    NSDictionary *dict = @{@\"username\": @\"wangwu\", @\"password\" : @\"wang\"};\n    \n    // 网络访问是异步的,回调是主线程的,因此程序员不用管在主线程更新UI的事情\n    [manager GET:@\"http://localhost/login.php\" parameters:dict success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        NSLog(@\"%@\", responseObject);\n        // 提问:NSURLConnection异步方法回调,是在子线程\n        // 得到回调之后,通常更新UI,是在主线程\n        NSLog(@\"%@\", [NSThread currentThread]);\n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n        NSLog(@\"%@\", error);\n    }];\n    }\n\n    @end\n    \n    \n    \n    \n    \n    －－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n        镔哥哥做项目，一般的数据请求不管他多复杂，只要自己写好了请求，那么调用永远是那么的简单，那么我介绍一下\n    \n    一：需要用到第三方框架AFNetworking，直接写在工程pch头文件里就行因为经常用到它，这在网上随便下载就行，最好用cocopod来下载，这样什么都有了，cocopod是什么，我就不说，博客上面有介绍。\n    \n    开始啦：\n    \n    1：自定义网络请求 DataRequestManager类专门管理网络用的\n    \n    朋友们以下代码就可以直接复制来用了\n    \n    .h文件\n    \n    //  DataRequestManager.h\n    \n    //  TestKeyBoard\n    \n    //  Created by mac on 14-10-21.\n    \n    //  Copyright (c) 2014 年 mac. All rights reserved.\n    \n    #import <Foundation/Foundation.h>\n    \n    @protocol DataRequestManagerDelegate< NSObject >\n    \n    // 通过代理传值到需要的地方\n    \n    - ( void )passValue:( id )value;\n    \n    @optional\n    \n    - ( void )passGetValue:( id )getValue;\n    \n    @end\n    \n    @interface DataRequestManager : NSObject\n    \n    {\n    \n    AFHTTPRequestOperationManager *manager; // 创建请求（ iOS 6-7 ）\n    \n    AFURLSessionManager *sessionManager;    // 创建请求（ iOS7 专用）\n    \n    AFHTTPRequestOperation *operation;      // 创建请求管理（用于上传和下载）\n    \n    }\n    \n    @property ( nonatomic , assign ) id < DataRequestManagerDelegate > delegate;\n    \n    //GET 请求调用方法\n    \n    - ( void )methodGetWithURL:( NSString *)urlString;\n    \n    //POST 请求调用方法\n    \n    - ( void )methodPostWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters;\n    \n    // 上传图片\n    \n    - ( void )methodUploadWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters image:( UIImage *)image;\n    \n    @end\n    \n    .m文件\n    \n    //  DataRequestManager.m\n    \n    //  TestKeyBoard\n    \n    //\n    \n    //  Created by mac on 14-10-21.\n    \n    //  Copyright (c) 2014 年 mac. All rights reserved.\n    \n    //\n    \n    #import \"DataRequestManager.h\"\n    \n    #import \"AFNetworking.h\"\n    \n    @implementation DataRequestManager\n    \n    //GET 请求\n    \n    - ( void )methodGetWithURL:( NSString *)urlString\n    \n    {\n    \n    // 致空请求\n    \n    if ( manager ) {\n    \n    manager = nil ;\n    \n    }\n    \n    // 创建请求\n    \n    manager = [ AFHTTPRequestOperationManager manager ];\n    \n    // 设置请求的解析器为 AFHTTPResponseSerializer （用于直接解析数据 NSData ），默认为 AFJSONResponseSerializer （用于解析 JSON ）\n    \n    //    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // 发送 GET 请求\n    \n    [ manager GET :urlString parameters : nil success :^( AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功（当解析器为 AFJSONResponseSerializer 时）\n    \n    NSLog ( @\"getSuccess: %@\" , responseObject);\n    \n    [ self . delegate passGetValue :responseObject];\n    \n    // 请求成功（当解析器为 AFHTTPResponseSerializer 时）\n    \n    //        NSString *JSONString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    \n    //        NSLog(@\"success:%@\", JSONString);\n    \n    } failure :^( AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    }];\n    \n    }\n    \n    #pragma mark - POST Request (iOS 6-7)\n    \n    //POST 请求\n    \n    - ( void )methodPostWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters\n    \n    {\n    \n    // 致空请求\n    \n    if ( manager ) {\n    \n    manager = nil ;\n    \n    }\n    \n    // 添加参数\n    \n    // 创建请求\n    \n    manager = [ AFHTTPRequestOperationManager manager ];\n    \n    // 设置请求的解析器为 AFHTTPResponseSerializer （用于直接解析数据 NSData ），默认为 AFJSONResponseSerializer （用于解析 JSON ）\n    \n    //    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // 发送 POST 请求\n    \n    [ manager POST :urlString parameters :parameters success :^( AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功（当解析器为 AFJSONResponseSerializer 时）\n    \n    //        NSLog(@\"Success: %@\", responseObject);\n    \n    [ self . delegate passValue :responseObject];\n    \n    // 请求成功（当解析器为 AFHTTPResponseSerializer 时）\n    \n    //        NSString *JSONString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    \n    //        NSLog(@\"success:%@\", JSONString);\n    \n    } failure :^( AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    }];\n    \n    }\n    \n    #pragma mark - Upload Request (iOS 6-7)\n    \n    // 上传（以表单方式上传，以图片为例）\n    \n    - ( void )methodUploadWithURL:( NSString *)urlString parameters:( NSDictionary *)parameters image:( UIImage *)image\n    \n    {\n    \n    // 致空请求\n    \n    if ( manager ) {\n    \n    manager = nil ;\n    \n    }\n    \n    // 添加参数\n    \n    // 创建请求\n    \n    manager = [ AFHTTPRequestOperationManager manager ];\n    \n    // 设置请求的解析器为 AFHTTPResponseSerializer （用于直接解析数据 NSData ），默认为 AFJSONResponseSerializer （用于解析 JSON ）\n    \n    //    manager.responseSerializer = [AFHTTPResponseSerializer serializer];\n    \n    // 发送 POST 请求，添加需要发送的文件，此处为图片\n    \n    [ manager POST :urlString parameters :parameters constructingBodyWithBlock :^( id < AFMultipartFormData > formData) {\n    \n    // 添加图片，并对其进行压缩（ 0.0 为最大压缩率， 1.0 为最小压缩率）\n    \n    NSData *imageData = UIImageJPEGRepresentation (image, 1.0 );\n    \n    NSDateFormatter *formatter = [[ NSDateFormatter alloc ] init ];\n    \n    // 设置时间格式\n    \n    formatter. dateFormat = @\"yyyyMMddHHmmss\" ;\n    \n    NSString *str = [formatter stringFromDate :[ NSDate date ]];\n    \n    NSString *fileName = [ NSString stringWithFormat : @\"%@.png\" , str];\n    \n    // 添加要上传的文件，此处为图片\n    \n    [formData appendPartWithFileData :imageData\n    \n    name : @\"uploadFile\"\n    \n    fileName :fileName\n    \n    mimeType : @\"image/jpeg\" ];\n    \n    } success :^( AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功（当解析器为 AFJSONResponseSerializer 时）\n    \n    NSLog ( @\"Success: %@\" , responseObject);\n    \n    [ self . delegate passValue :responseObject];\n    \n    // 请求成功（当解析器为 AFHTTPResponseSerializer 时）\n    \n    //        NSString *JSONString = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];\n    \n    //        NSLog(@\"success:%@\", JSONString);\n    \n    } failure :^( AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    }];\n    \n    }\n    \n    #pragma mark - Download Request (iOS 6-7)\n    \n    // 下载\n    \n    - ( void )methodDownload\n    \n    {\n    \n    /*\n    \n    // 下载进度条\n    \n    UIProgressView  *downProgressView = [[UIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleDefault];\n    \n    downProgressView.center = CGPointMake(self.view.center.x, 220);\n    \n    downProgressView.progress = 0;\n    \n    downProgressView.progressTintColor = [UIColor blueColor];\n    \n    downProgressView.trackTintColor = [UIColor grayColor];\n    \n    [self.view addSubview:downProgressView];\n    \n    // 设置存放文件的位置（此 Demo 把文件保存在 iPhone 沙盒中的 Documents 文件夹中。关于如何获取文件路径，请自行搜索相关资料）\n    \n    // 方法一\n    \n    //    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    \n    //    NSString *cachesDirectory = [paths objectAtIndex:0];\n    \n    //    NSString *filePath = [cachesDirectory stringByAppendingPathComponent:@\" 文件名 \"];\n    \n    // 方法二\n    \n    NSString *filePath = [NSString stringWithFormat:@\"%@/Documents/ 文件名（注意后缀名） \", NSHomeDirectory()];\n    \n    // 打印文件保存的路径\n    \n    NSLog(@\"%@\",filePath);\n    \n    // 创建请求管理\n    \n    operation = [[AFHTTPRequestOperation alloc] initWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@\" 下载地址 \"]]];\n    \n    // 添加下载请求（获取服务器的输出流）\n    \n    operation.outputStream = [NSOutputStream outputStreamToFileAtPath:filePath append:NO];\n    \n    // 设置下载进度条\n    \n    [operation setDownloadProgressBlock:^(NSUInteger bytesRead, long long totalBytesRead, long long totalBytesExpectedToRead) {\n    \n    // 显示下载进度\n    \n    CGFloat progress = ((float)totalBytesRead) / totalBytesExpectedToRead;\n    \n    [downProgressView setProgress:progress animated:YES];\n    \n    }];\n    \n    // 请求管理判断请求结果\n    \n    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {\n    \n    // 请求成功\n    \n    NSLog(@\"Finish and Download to: %@\", filePath);\n    \n    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {\n    \n    // 请求失败\n    \n    NSLog(@\"Error: %@\",error);\n    \n    }];\n    \n    */\n    \n    }\n    \n    #pragma mark - Download Management (iOS 6-7)\n    \n    // 开始下载（断点续传）\n    \n    - ( void )downloadStart\n    \n    {\n    \n    [ self methodDownload ];\n    \n    [ operation start ];\n    \n    }\n    \n    // 暂停下载（断点续传）\n    \n    - ( void )downloadPause\n    \n    {\n    \n    [ operation pause ];\n    \n    }\n    \n    // 继续下载（断点续传）\n    \n    - ( void )downloadResume\n    \n    {\n    \n    [ operation resume ];\n    \n    }\n    \n    #pragma mark - Upload Request (iOS 7 only)\n    \n    // 上传（ iOS7 专用）\n    \n    - ( void )methodUploadFor7\n    \n    {\n    \n    // 致空请求\n    \n    if ( sessionManager ) {\n    \n    sessionManager = nil ;\n    \n    }\n    \n    // 创建请求（ iOS7 专用）\n    \n    sessionManager = [[ AFURLSessionManager alloc ] initWithSessionConfiguration :[ NSURLSessionConfiguration defaultSessionConfiguration ]];\n    \n    // 添加请求接口\n    \n    NSURLRequest *request = [ NSURLRequest requestWithURL :[ NSURL URLWithString : @\" 上传地址 \" ]];\n    \n    // 添加上传的文件\n    \n    NSURL *filePath = [ NSURL fileURLWithPath : @\" 本地文件地址 \" ];\n    \n    // 发送上传请求\n    \n    NSURLSessionUploadTask *uploadTask = [ sessionManager uploadTaskWithRequest :request fromFile :filePath progress : nil completionHandler :^( NSURLResponse *response, id responseObject, NSError *error) {\n    \n    if (error) {\n    \n    // 请求失败\n    \n    NSLog ( @\"Error: %@\" , error);\n    \n    } else {\n    \n    // 请求成功\n    \n    NSLog ( @\"Success: %@ %@\" , response, responseObject);\n    \n    }\n    \n    }];\n    \n    // 开始上传\n    \n    [uploadTask resume ];\n    \n    }\n    \n    #pragma mark - Download Request (iOS 7 only)\n    \n    // 下载（ iOS7 专用）\n    \n    - ( void )methodDownloadFor7\n    \n    {\n    \n    // 致空请求\n    \n    if ( sessionManager ) {\n    \n    sessionManager = nil ;\n    \n    }\n    \n    // 创建请求（ iOS7 专用）\n    \n    sessionManager = [[ AFURLSessionManager alloc ] initWithSessionConfiguration :[ NSURLSessionConfiguration defaultSessionConfiguration ]];\n    \n    // 添加请求接口\n    \n    NSURLRequest *request = [ NSURLRequest requestWithURL :[ NSURL URLWithString : @\" 下载地址 \" ]];\n    \n    // 发送下载请求\n    \n    NSURLSessionDownloadTask *downloadTask = [ sessionManager downloadTaskWithRequest :request progress : nil destination :^ NSURL *( NSURL *targetPath, NSURLResponse *response) {\n    \n    // 设置存放文件的位置（此 Demo 把文件保存在 iPhone 沙盒中的 Documents 文件夹中。关于如何获取文件路径，请自行搜索相关资料）\n    \n    NSURL *filePath = [ NSURL fileURLWithPath :[ NSSearchPathForDirectoriesInDomains ( NSDocumentDirectory , NSUserDomainMask , YES ) firstObject ]];\n    \n    return [filePath URLByAppendingPathComponent :[response suggestedFilename ]];\n    \n    } completionHandler :^( NSURLResponse *response, NSURL *filePath, NSError *error) {\n    \n    // 下载完成\n    \n    NSLog ( @\"Finish and Download to: %@\" , filePath);\n    \n    }];\n    \n    // 开始下载\n    \n    [downloadTask resume ];\n    \n    }\n    \n    @end\n    \n    工程完美，自己复制可用\n\n\n\n\n\n","slug":"AFNetworking简单使用","published":1,"updated":"2015-10-09T02:37:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cij9jnhan002yph3m9zlruz2s"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cij9jnh880000ph3myp4hplf4","tag_id":"cij9jnh8e0001ph3m0nzlwt0l","_id":"cij9jnh8f0002ph3m7en4n0ig"},{"post_id":"cij9jnh8g0003ph3mbcfv595f","tag_id":"cij9jnh8h0004ph3mandefs0k","_id":"cij9jnh8h0005ph3m8jjng5vf"},{"post_id":"cij9jnh8i0006ph3m2sff5uhg","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh8j0008ph3m2oczgx71"},{"post_id":"cij9jnh8j0009ph3myua5muh5","tag_id":"cij9jnh8k000aph3mc7quxf4x","_id":"cij9jnh8k000bph3m5csucztq"},{"post_id":"cij9jnh8l000cph3m6mryukxp","tag_id":"cij9jnh8m000dph3mb1l7fuj6","_id":"cij9jnh8m000eph3m6hbw7pva"},{"post_id":"cij9jnh8n000fph3mpcczt4rn","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh8o000gph3mf2oeydny"},{"post_id":"cij9jnh8o000hph3mitxbih3l","tag_id":"cij9jnh8h0004ph3mandefs0k","_id":"cij9jnh8p000iph3mudyda4mb"},{"post_id":"cij9jnh8s000kph3ms4l13pwz","tag_id":"cij9jnh8s000lph3m0wm3p0a4","_id":"cij9jnh8t000mph3mnt22fwte"},{"post_id":"cij9jnh8t000nph3m6vkwaqpu","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh8v000oph3my135il0z"},{"post_id":"cij9jnh8v000pph3mpi01at7j","tag_id":"cij9jnh8h0004ph3mandefs0k","_id":"cij9jnh8w000qph3mr2vxh2ux"},{"post_id":"cij9jnh90000sph3me8lzjdx5","tag_id":"cij9jnh91000tph3mi1ykduhd","_id":"cij9jnh92000wph3mrrmctr58"},{"post_id":"cij9jnh90000sph3me8lzjdx5","tag_id":"cij9jnh91000uph3mzi1qath0","_id":"cij9jnh92000xph3mv9m7ttcp"},{"post_id":"cij9jnh90000sph3me8lzjdx5","tag_id":"cij9jnh91000vph3mel37ymj0","_id":"cij9jnh92000yph3mphx8aa8r"},{"post_id":"cij9jnh92000zph3mwz4aafxq","tag_id":"cij9jnh8s000lph3m0wm3p0a4","_id":"cij9jnh930010ph3m7fo1rvnq"},{"post_id":"cij9jnh940011ph3mqq3ivoeu","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh950012ph3mlaz5c8bb"},{"post_id":"cij9jnh950013ph3mmba9ay18","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh960014ph3mutkzkcs2"},{"post_id":"cij9jnh980015ph3mnod47cbn","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh990016ph3mdppvlncb"},{"post_id":"cij9jnh9a0017ph3m5ebfgdlb","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9b0018ph3mcjwfssxz"},{"post_id":"cij9jnh9d0019ph3m2rh21x9k","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9e001aph3mh6huji0f"},{"post_id":"cij9jnh9f001bph3mh10h6z4c","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9f001cph3mjwa3r4p2"},{"post_id":"cij9jnh9g001dph3murgv9273","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9h001eph3m9trsm9xy"},{"post_id":"cij9jnh9i001fph3mkssxfpgr","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9i001gph3mtp315wy5"},{"post_id":"cij9jnh9j001hph3mobotge3n","tag_id":"cij9jnh9j001iph3mn9nihjnt","_id":"cij9jnh9k001kph3mwoa3hmjx"},{"post_id":"cij9jnh9j001hph3mobotge3n","tag_id":"cij9jnh9k001jph3mnncx5gfh","_id":"cij9jnh9k001lph3m65f4bzns"},{"post_id":"cij9jnh9l001mph3ma0ps7g3j","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9l001nph3mtnkax0rn"},{"post_id":"cij9jnh9m001oph3m9tgaeefm","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9o001pph3mijq7efa0"},{"post_id":"cij9jnh9p001qph3m4xaziw90","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9q001rph3mh5qt7t6y"},{"post_id":"cij9jnh9r001sph3m06ktec2p","tag_id":"cij9jnh9t001tph3mfe8vs91p","_id":"cij9jnh9u001uph3m21hyjop8"},{"post_id":"cij9jnh9v001vph3mch2ehf0v","tag_id":"cij9jnh8s000lph3m0wm3p0a4","_id":"cij9jnh9v001wph3m73oh3v8m"},{"post_id":"cij9jnh9w001xph3m58ycrgd3","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9x001yph3m272m4g02"},{"post_id":"cij9jnh9y001zph3mpdmve3jk","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnh9z0020ph3m1mmajups"},{"post_id":"cij9jnha00021ph3mz89d5wk3","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnha10022ph3m7rhdzf7z"},{"post_id":"cij9jnha10023ph3mwuicdoos","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnha20024ph3mhnc0r6tf"},{"post_id":"cij9jnha40025ph3m9w33y1uu","tag_id":"cij9jnha60026ph3m8m27sxb3","_id":"cij9jnha60027ph3mklj98st7"},{"post_id":"cij9jnha70028ph3mijp32z91","tag_id":"cij9jnha80029ph3m3fy56a7k","_id":"cij9jnha8002aph3mswcyck1j"},{"post_id":"cij9jnha9002bph3mtkt6pqvl","tag_id":"cij9jnha60026ph3m8m27sxb3","_id":"cij9jnhaa002cph3mwt6jljga"},{"post_id":"cij9jnhab002dph3m3j1dicf6","tag_id":"cij9jnha60026ph3m8m27sxb3","_id":"cij9jnhab002eph3mssj3cdad"},{"post_id":"cij9jnhac002fph3m083ww44y","tag_id":"cij9jnhad002gph3m3u0e060y","_id":"cij9jnhad002iph3m2y55s55k"},{"post_id":"cij9jnhac002fph3m083ww44y","tag_id":"cij9jnhad002hph3mnx9muo0c","_id":"cij9jnhad002jph3m1ecrnrs5"},{"post_id":"cij9jnhae002kph3mnjsfeihs","tag_id":"cij9jnhaf002lph3m0oja964l","_id":"cij9jnhaf002mph3miks87t6h"},{"post_id":"cij9jnhag002nph3mqo29e0z5","tag_id":"cij9jnhag002oph3mafuwylt1","_id":"cij9jnhah002pph3mk6782ml5"},{"post_id":"cij9jnhah002qph3m17ujya1f","tag_id":"cij9jnhag002oph3mafuwylt1","_id":"cij9jnhai002sph3mhe888b7j"},{"post_id":"cij9jnhah002qph3m17ujya1f","tag_id":"cij9jnhai002rph3msnfyhh4d","_id":"cij9jnhai002tph3mmy87epjt"},{"post_id":"cij9jnhaj002uph3m8b28ez7t","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnhak002vph3mnf44epiz"},{"post_id":"cij9jnhal002wph3myj5bq6qs","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnham002xph3mlbkxjufx"},{"post_id":"cij9jnhan002yph3m9zlruz2s","tag_id":"cij9jnh8i0007ph3m2weudqwo","_id":"cij9jnhao002zph3m1gaen5r7"}],"Tag":[{"name":"心情","_id":"cij9jnh8e0001ph3m0nzlwt0l"},{"name":"MarkDown","_id":"cij9jnh8h0004ph3mandefs0k"},{"name":"IOS开发SDK","_id":"cij9jnh8i0007ph3m2weudqwo"},{"name":"IOS开源项目","_id":"cij9jnh8k000aph3mc7quxf4x"},{"name":"命令行","_id":"cij9jnh8m000dph3mb1l7fuj6"},{"name":"Node","_id":"cij9jnh8s000lph3m0wm3p0a4"},{"name":"nodejs","_id":"cij9jnh91000tph3mi1ykduhd"},{"name":"git","_id":"cij9jnh91000uph3mzi1qath0"},{"name":"markdown","_id":"cij9jnh91000vph3mel37ymj0"},{"name":"项目","_id":"cij9jnh9j001iph3mn9nihjnt"},{"name":"swift","_id":"cij9jnh9k001jph3mnncx5gfh"},{"name":"IOS-Swift","_id":"cij9jnh9t001tph3mfe8vs91p"},{"name":"IOS开发经验总结","_id":"cij9jnha60026ph3m8m27sxb3"},{"name":"架构","_id":"cij9jnha80029ph3m3fy56a7k"},{"name":"ios经验","_id":"cij9jnhad002gph3m3u0e060y"},{"name":"ios开发","_id":"cij9jnhad002hph3mnx9muo0c"},{"name":"IOS网站博客","_id":"cij9jnhaf002lph3m0oja964l"},{"name":"Git","_id":"cij9jnhag002oph3mafuwylt1"},{"name":"GitHub","_id":"cij9jnhai002rph3msnfyhh4d"}]}}